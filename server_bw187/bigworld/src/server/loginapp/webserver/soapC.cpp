/* soapC.cpp
   Generated by gSOAP 2.7.13 from Register.h
   Copyright(C) 2000-2009, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.7.13 2009-08-13 17:39:24 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	soap->header = soap_new_SOAP_ENV__Header(soap, -1);
		soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (!soap->fault)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	for (;;)
		if (!soap_getelement(soap, &t))
			if (soap->error || soap_ignore_element(soap))
				break;
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_ns1__AutoActResultCode:
		return soap_in_ns1__AutoActResultCode(soap, NULL, NULL, "ns1:AutoActResultCode");
	case SOAP_TYPE_ns3__AdultStatusResult:
		return soap_in_ns3__AdultStatusResult(soap, NULL, NULL, "ns3:AdultStatusResult");
	case SOAP_TYPE_ns3__BlockRecord:
		return soap_in_ns3__BlockRecord(soap, NULL, NULL, "ns3:BlockRecord");
	case SOAP_TYPE_ns3__QueryAccountBlockHistoryResult:
		return soap_in_ns3__QueryAccountBlockHistoryResult(soap, NULL, NULL, "ns3:QueryAccountBlockHistoryResult");
	case SOAP_TYPE_ns3__QueryStringResult:
		return soap_in_ns3__QueryStringResult(soap, NULL, NULL, "ns3:QueryStringResult");
	case SOAP_TYPE_ns3__ProcessResult:
		return soap_in_ns3__ProcessResult(soap, NULL, NULL, "ns3:ProcessResult");
	case SOAP_TYPE_ns2__Exception:
		return soap_in_ns2__Exception(soap, NULL, NULL, "ns2:Exception");
	case SOAP_TYPE_ns1__GameAutoActivateResult:
		return soap_in_ns1__GameAutoActivateResult(soap, NULL, NULL, "ns1:GameAutoActivateResult");
	case SOAP_TYPE_ns2__UpdatePassword:
		return soap_in_ns2__UpdatePassword(soap, NULL, NULL, "ns2:UpdatePassword");
	case SOAP_TYPE_ns2__UpdatePasswordResponse:
		return soap_in_ns2__UpdatePasswordResponse(soap, NULL, NULL, "ns2:UpdatePasswordResponse");
	case SOAP_TYPE_ns2__Suspend:
		return soap_in_ns2__Suspend(soap, NULL, NULL, "ns2:Suspend");
	case SOAP_TYPE_ns2__SuspendResponse:
		return soap_in_ns2__SuspendResponse(soap, NULL, NULL, "ns2:SuspendResponse");
	case SOAP_TYPE_ns2__SetAdult:
		return soap_in_ns2__SetAdult(soap, NULL, NULL, "ns2:SetAdult");
	case SOAP_TYPE_ns2__SetAdultResponse:
		return soap_in_ns2__SetAdultResponse(soap, NULL, NULL, "ns2:SetAdultResponse");
	case SOAP_TYPE_ns2__Resume:
		return soap_in_ns2__Resume(soap, NULL, NULL, "ns2:Resume");
	case SOAP_TYPE_ns2__ResumeResponse:
		return soap_in_ns2__ResumeResponse(soap, NULL, NULL, "ns2:ResumeResponse");
	case SOAP_TYPE_ns2__Register:
		return soap_in_ns2__Register(soap, NULL, NULL, "ns2:Register");
	case SOAP_TYPE_ns2__RegisterResponse:
		return soap_in_ns2__RegisterResponse(soap, NULL, NULL, "ns2:RegisterResponse");
	case SOAP_TYPE_ns2__QueryPassword:
		return soap_in_ns2__QueryPassword(soap, NULL, NULL, "ns2:QueryPassword");
	case SOAP_TYPE_ns2__QueryPasswordResponse:
		return soap_in_ns2__QueryPasswordResponse(soap, NULL, NULL, "ns2:QueryPasswordResponse");
	case SOAP_TYPE_ns2__QueryAccountBlockHistory:
		return soap_in_ns2__QueryAccountBlockHistory(soap, NULL, NULL, "ns2:QueryAccountBlockHistory");
	case SOAP_TYPE_ns2__QueryAccountBlockHistoryResponse:
		return soap_in_ns2__QueryAccountBlockHistoryResponse(soap, NULL, NULL, "ns2:QueryAccountBlockHistoryResponse");
	case SOAP_TYPE_ns2__QueryAccountAdultStatus:
		return soap_in_ns2__QueryAccountAdultStatus(soap, NULL, NULL, "ns2:QueryAccountAdultStatus");
	case SOAP_TYPE_ns2__QueryAccountAdultStatusResponse:
		return soap_in_ns2__QueryAccountAdultStatusResponse(soap, NULL, NULL, "ns2:QueryAccountAdultStatusResponse");
	case SOAP_TYPE_PointerTo_ns1__RegisterResponse:
		return soap_in_PointerTo_ns1__RegisterResponse(soap, NULL, NULL, "ns1:RegisterResponse");
	case SOAP_TYPE_PointerTo_ns1__Register:
		return soap_in_PointerTo_ns1__Register(soap, NULL, NULL, "ns1:Register");
	case SOAP_TYPE_PointerTons3__ProcessResult:
		return soap_in_PointerTons3__ProcessResult(soap, NULL, NULL, "ns3:ProcessResult");
	case SOAP_TYPE_PointerTons3__QueryStringResult:
		return soap_in_PointerTons3__QueryStringResult(soap, NULL, NULL, "ns3:QueryStringResult");
	case SOAP_TYPE_PointerTons3__QueryAccountBlockHistoryResult:
		return soap_in_PointerTons3__QueryAccountBlockHistoryResult(soap, NULL, NULL, "ns3:QueryAccountBlockHistoryResult");
	case SOAP_TYPE_PointerTons3__AdultStatusResult:
		return soap_in_PointerTons3__AdultStatusResult(soap, NULL, NULL, "ns3:AdultStatusResult");
	case SOAP_TYPE_PointerTons2__Exception:
		return soap_in_PointerTons2__Exception(soap, NULL, NULL, "ns2:Exception");
	case SOAP_TYPE_PointerToPointerTons3__BlockRecord:
		return soap_in_PointerToPointerTons3__BlockRecord(soap, NULL, NULL, "ns3:BlockRecord");
	case SOAP_TYPE_PointerTons3__BlockRecord:
		return soap_in_PointerTons3__BlockRecord(soap, NULL, NULL, "ns3:BlockRecord");
	case SOAP_TYPE_PointerTons1__GameAutoActivateResult:
		return soap_in_PointerTons1__GameAutoActivateResult(soap, NULL, NULL, "ns1:GameAutoActivateResult");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "ns3:AdultStatusResult"))
		{	*type = SOAP_TYPE_ns3__AdultStatusResult;
			return soap_in_ns3__AdultStatusResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:BlockRecord"))
		{	*type = SOAP_TYPE_ns3__BlockRecord;
			return soap_in_ns3__BlockRecord(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:QueryAccountBlockHistoryResult"))
		{	*type = SOAP_TYPE_ns3__QueryAccountBlockHistoryResult;
			return soap_in_ns3__QueryAccountBlockHistoryResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:QueryStringResult"))
		{	*type = SOAP_TYPE_ns3__QueryStringResult;
			return soap_in_ns3__QueryStringResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:ProcessResult"))
		{	*type = SOAP_TYPE_ns3__ProcessResult;
			return soap_in_ns3__ProcessResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:Exception"))
		{	*type = SOAP_TYPE_ns2__Exception;
			return soap_in_ns2__Exception(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GameAutoActivateResult"))
		{	*type = SOAP_TYPE_ns1__GameAutoActivateResult;
			return soap_in_ns1__GameAutoActivateResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AutoActResultCode"))
		{	*type = SOAP_TYPE_ns1__AutoActResultCode;
			return soap_in_ns1__AutoActResultCode(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:UpdatePassword"))
		{	*type = SOAP_TYPE_ns2__UpdatePassword;
			return soap_in_ns2__UpdatePassword(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:UpdatePasswordResponse"))
		{	*type = SOAP_TYPE_ns2__UpdatePasswordResponse;
			return soap_in_ns2__UpdatePasswordResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:Suspend"))
		{	*type = SOAP_TYPE_ns2__Suspend;
			return soap_in_ns2__Suspend(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:SuspendResponse"))
		{	*type = SOAP_TYPE_ns2__SuspendResponse;
			return soap_in_ns2__SuspendResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:SetAdult"))
		{	*type = SOAP_TYPE_ns2__SetAdult;
			return soap_in_ns2__SetAdult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:SetAdultResponse"))
		{	*type = SOAP_TYPE_ns2__SetAdultResponse;
			return soap_in_ns2__SetAdultResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:Resume"))
		{	*type = SOAP_TYPE_ns2__Resume;
			return soap_in_ns2__Resume(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:ResumeResponse"))
		{	*type = SOAP_TYPE_ns2__ResumeResponse;
			return soap_in_ns2__ResumeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:Register"))
		{	*type = SOAP_TYPE_ns2__Register;
			return soap_in_ns2__Register(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:RegisterResponse"))
		{	*type = SOAP_TYPE_ns2__RegisterResponse;
			return soap_in_ns2__RegisterResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:QueryPassword"))
		{	*type = SOAP_TYPE_ns2__QueryPassword;
			return soap_in_ns2__QueryPassword(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:QueryPasswordResponse"))
		{	*type = SOAP_TYPE_ns2__QueryPasswordResponse;
			return soap_in_ns2__QueryPasswordResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:QueryAccountBlockHistory"))
		{	*type = SOAP_TYPE_ns2__QueryAccountBlockHistory;
			return soap_in_ns2__QueryAccountBlockHistory(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:QueryAccountBlockHistoryResponse"))
		{	*type = SOAP_TYPE_ns2__QueryAccountBlockHistoryResponse;
			return soap_in_ns2__QueryAccountBlockHistoryResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:QueryAccountAdultStatus"))
		{	*type = SOAP_TYPE_ns2__QueryAccountAdultStatus;
			return soap_in_ns2__QueryAccountAdultStatus(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:QueryAccountAdultStatusResponse"))
		{	*type = SOAP_TYPE_ns2__QueryAccountAdultStatusResponse;
			return soap_in_ns2__QueryAccountAdultStatusResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:RegisterResponse"))
		{	*type = SOAP_TYPE__ns1__RegisterResponse;
			return soap_in__ns1__RegisterResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Register"))
		{	*type = SOAP_TYPE__ns1__Register;
			return soap_in__ns1__Register(soap, NULL, NULL, NULL);
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_ns1__AutoActResultCode:
		return soap_out_ns1__AutoActResultCode(soap, tag, id, (const enum ns1__AutoActResultCode *)ptr, "ns1:AutoActResultCode");
	case SOAP_TYPE_ns3__AdultStatusResult:
		return ((ns3__AdultStatusResult *)ptr)->soap_out(soap, tag, id, "ns3:AdultStatusResult");
	case SOAP_TYPE_ns3__BlockRecord:
		return ((ns3__BlockRecord *)ptr)->soap_out(soap, tag, id, "ns3:BlockRecord");
	case SOAP_TYPE_ns3__QueryAccountBlockHistoryResult:
		return ((ns3__QueryAccountBlockHistoryResult *)ptr)->soap_out(soap, tag, id, "ns3:QueryAccountBlockHistoryResult");
	case SOAP_TYPE_ns3__QueryStringResult:
		return ((ns3__QueryStringResult *)ptr)->soap_out(soap, tag, id, "ns3:QueryStringResult");
	case SOAP_TYPE_ns3__ProcessResult:
		return ((ns3__ProcessResult *)ptr)->soap_out(soap, tag, id, "ns3:ProcessResult");
	case SOAP_TYPE_ns2__Exception:
		return ((ns2__Exception *)ptr)->soap_out(soap, tag, id, "ns2:Exception");
	case SOAP_TYPE__ns1__RegisterResponse:
		return ((_ns1__RegisterResponse *)ptr)->soap_out(soap, "ns1:RegisterResponse", id, NULL);
	case SOAP_TYPE__ns1__Register:
		return ((_ns1__Register *)ptr)->soap_out(soap, "ns1:Register", id, NULL);
	case SOAP_TYPE_ns1__GameAutoActivateResult:
		return ((ns1__GameAutoActivateResult *)ptr)->soap_out(soap, tag, id, "ns1:GameAutoActivateResult");
	case SOAP_TYPE_ns2__UpdatePassword:
		return soap_out_ns2__UpdatePassword(soap, tag, id, (const struct ns2__UpdatePassword *)ptr, "ns2:UpdatePassword");
	case SOAP_TYPE_ns2__UpdatePasswordResponse:
		return soap_out_ns2__UpdatePasswordResponse(soap, tag, id, (const struct ns2__UpdatePasswordResponse *)ptr, "ns2:UpdatePasswordResponse");
	case SOAP_TYPE_ns2__Suspend:
		return soap_out_ns2__Suspend(soap, tag, id, (const struct ns2__Suspend *)ptr, "ns2:Suspend");
	case SOAP_TYPE_ns2__SuspendResponse:
		return soap_out_ns2__SuspendResponse(soap, tag, id, (const struct ns2__SuspendResponse *)ptr, "ns2:SuspendResponse");
	case SOAP_TYPE_ns2__SetAdult:
		return soap_out_ns2__SetAdult(soap, tag, id, (const struct ns2__SetAdult *)ptr, "ns2:SetAdult");
	case SOAP_TYPE_ns2__SetAdultResponse:
		return soap_out_ns2__SetAdultResponse(soap, tag, id, (const struct ns2__SetAdultResponse *)ptr, "ns2:SetAdultResponse");
	case SOAP_TYPE_ns2__Resume:
		return soap_out_ns2__Resume(soap, tag, id, (const struct ns2__Resume *)ptr, "ns2:Resume");
	case SOAP_TYPE_ns2__ResumeResponse:
		return soap_out_ns2__ResumeResponse(soap, tag, id, (const struct ns2__ResumeResponse *)ptr, "ns2:ResumeResponse");
	case SOAP_TYPE_ns2__Register:
		return soap_out_ns2__Register(soap, tag, id, (const struct ns2__Register *)ptr, "ns2:Register");
	case SOAP_TYPE_ns2__RegisterResponse:
		return soap_out_ns2__RegisterResponse(soap, tag, id, (const struct ns2__RegisterResponse *)ptr, "ns2:RegisterResponse");
	case SOAP_TYPE_ns2__QueryPassword:
		return soap_out_ns2__QueryPassword(soap, tag, id, (const struct ns2__QueryPassword *)ptr, "ns2:QueryPassword");
	case SOAP_TYPE_ns2__QueryPasswordResponse:
		return soap_out_ns2__QueryPasswordResponse(soap, tag, id, (const struct ns2__QueryPasswordResponse *)ptr, "ns2:QueryPasswordResponse");
	case SOAP_TYPE_ns2__QueryAccountBlockHistory:
		return soap_out_ns2__QueryAccountBlockHistory(soap, tag, id, (const struct ns2__QueryAccountBlockHistory *)ptr, "ns2:QueryAccountBlockHistory");
	case SOAP_TYPE_ns2__QueryAccountBlockHistoryResponse:
		return soap_out_ns2__QueryAccountBlockHistoryResponse(soap, tag, id, (const struct ns2__QueryAccountBlockHistoryResponse *)ptr, "ns2:QueryAccountBlockHistoryResponse");
	case SOAP_TYPE_ns2__QueryAccountAdultStatus:
		return soap_out_ns2__QueryAccountAdultStatus(soap, tag, id, (const struct ns2__QueryAccountAdultStatus *)ptr, "ns2:QueryAccountAdultStatus");
	case SOAP_TYPE_ns2__QueryAccountAdultStatusResponse:
		return soap_out_ns2__QueryAccountAdultStatusResponse(soap, tag, id, (const struct ns2__QueryAccountAdultStatusResponse *)ptr, "ns2:QueryAccountAdultStatusResponse");
	case SOAP_TYPE_PointerTo_ns1__RegisterResponse:
		return soap_out_PointerTo_ns1__RegisterResponse(soap, tag, id, (_ns1__RegisterResponse *const*)ptr, "ns1:RegisterResponse");
	case SOAP_TYPE_PointerTo_ns1__Register:
		return soap_out_PointerTo_ns1__Register(soap, tag, id, (_ns1__Register *const*)ptr, "ns1:Register");
	case SOAP_TYPE_PointerTons3__ProcessResult:
		return soap_out_PointerTons3__ProcessResult(soap, tag, id, (ns3__ProcessResult *const*)ptr, "ns3:ProcessResult");
	case SOAP_TYPE_PointerTons3__QueryStringResult:
		return soap_out_PointerTons3__QueryStringResult(soap, tag, id, (ns3__QueryStringResult *const*)ptr, "ns3:QueryStringResult");
	case SOAP_TYPE_PointerTons3__QueryAccountBlockHistoryResult:
		return soap_out_PointerTons3__QueryAccountBlockHistoryResult(soap, tag, id, (ns3__QueryAccountBlockHistoryResult *const*)ptr, "ns3:QueryAccountBlockHistoryResult");
	case SOAP_TYPE_PointerTons3__AdultStatusResult:
		return soap_out_PointerTons3__AdultStatusResult(soap, tag, id, (ns3__AdultStatusResult *const*)ptr, "ns3:AdultStatusResult");
	case SOAP_TYPE_PointerTons2__Exception:
		return soap_out_PointerTons2__Exception(soap, tag, id, (ns2__Exception *const*)ptr, "ns2:Exception");
	case SOAP_TYPE_PointerToPointerTons3__BlockRecord:
		return soap_out_PointerToPointerTons3__BlockRecord(soap, tag, id, (ns3__BlockRecord **const*)ptr, "ns3:BlockRecord");
	case SOAP_TYPE_PointerTons3__BlockRecord:
		return soap_out_PointerTons3__BlockRecord(soap, tag, id, (ns3__BlockRecord *const*)ptr, "ns3:BlockRecord");
	case SOAP_TYPE_PointerTons1__GameAutoActivateResult:
		return soap_out_PointerTons1__GameAutoActivateResult(soap, tag, id, (ns1__GameAutoActivateResult *const*)ptr, "ns1:GameAutoActivateResult");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_ns3__AdultStatusResult:
		((ns3__AdultStatusResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__BlockRecord:
		((ns3__BlockRecord *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__QueryAccountBlockHistoryResult:
		((ns3__QueryAccountBlockHistoryResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__QueryStringResult:
		((ns3__QueryStringResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__ProcessResult:
		((ns3__ProcessResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns2__Exception:
		((ns2__Exception *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__RegisterResponse:
		((_ns1__RegisterResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__Register:
		((_ns1__Register *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__GameAutoActivateResult:
		((ns1__GameAutoActivateResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns5__Register:
		soap_serialize___ns5__Register(soap, (const struct __ns5__Register *)ptr);
		break;
	case SOAP_TYPE___ns4__Register:
		soap_serialize___ns4__Register(soap, (const struct __ns4__Register *)ptr);
		break;
	case SOAP_TYPE_ns2__UpdatePassword:
		soap_serialize_ns2__UpdatePassword(soap, (const struct ns2__UpdatePassword *)ptr);
		break;
	case SOAP_TYPE_ns2__UpdatePasswordResponse:
		soap_serialize_ns2__UpdatePasswordResponse(soap, (const struct ns2__UpdatePasswordResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__Suspend:
		soap_serialize_ns2__Suspend(soap, (const struct ns2__Suspend *)ptr);
		break;
	case SOAP_TYPE_ns2__SuspendResponse:
		soap_serialize_ns2__SuspendResponse(soap, (const struct ns2__SuspendResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__SetAdult:
		soap_serialize_ns2__SetAdult(soap, (const struct ns2__SetAdult *)ptr);
		break;
	case SOAP_TYPE_ns2__SetAdultResponse:
		soap_serialize_ns2__SetAdultResponse(soap, (const struct ns2__SetAdultResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__Resume:
		soap_serialize_ns2__Resume(soap, (const struct ns2__Resume *)ptr);
		break;
	case SOAP_TYPE_ns2__ResumeResponse:
		soap_serialize_ns2__ResumeResponse(soap, (const struct ns2__ResumeResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__Register:
		soap_serialize_ns2__Register(soap, (const struct ns2__Register *)ptr);
		break;
	case SOAP_TYPE_ns2__RegisterResponse:
		soap_serialize_ns2__RegisterResponse(soap, (const struct ns2__RegisterResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__QueryPassword:
		soap_serialize_ns2__QueryPassword(soap, (const struct ns2__QueryPassword *)ptr);
		break;
	case SOAP_TYPE_ns2__QueryPasswordResponse:
		soap_serialize_ns2__QueryPasswordResponse(soap, (const struct ns2__QueryPasswordResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__QueryAccountBlockHistory:
		soap_serialize_ns2__QueryAccountBlockHistory(soap, (const struct ns2__QueryAccountBlockHistory *)ptr);
		break;
	case SOAP_TYPE_ns2__QueryAccountBlockHistoryResponse:
		soap_serialize_ns2__QueryAccountBlockHistoryResponse(soap, (const struct ns2__QueryAccountBlockHistoryResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__QueryAccountAdultStatus:
		soap_serialize_ns2__QueryAccountAdultStatus(soap, (const struct ns2__QueryAccountAdultStatus *)ptr);
		break;
	case SOAP_TYPE_ns2__QueryAccountAdultStatusResponse:
		soap_serialize_ns2__QueryAccountAdultStatusResponse(soap, (const struct ns2__QueryAccountAdultStatusResponse *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__RegisterResponse:
		soap_serialize_PointerTo_ns1__RegisterResponse(soap, (_ns1__RegisterResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__Register:
		soap_serialize_PointerTo_ns1__Register(soap, (_ns1__Register *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__ProcessResult:
		soap_serialize_PointerTons3__ProcessResult(soap, (ns3__ProcessResult *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__QueryStringResult:
		soap_serialize_PointerTons3__QueryStringResult(soap, (ns3__QueryStringResult *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__QueryAccountBlockHistoryResult:
		soap_serialize_PointerTons3__QueryAccountBlockHistoryResult(soap, (ns3__QueryAccountBlockHistoryResult *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__AdultStatusResult:
		soap_serialize_PointerTons3__AdultStatusResult(soap, (ns3__AdultStatusResult *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons2__Exception:
		soap_serialize_PointerTons2__Exception(soap, (ns2__Exception *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTons3__BlockRecord:
		soap_serialize_PointerToPointerTons3__BlockRecord(soap, (ns3__BlockRecord **const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__BlockRecord:
		soap_serialize_PointerTons3__BlockRecord(soap, (ns3__BlockRecord *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__GameAutoActivateResult:
		soap_serialize_PointerTons1__GameAutoActivateResult(soap, (ns1__GameAutoActivateResult *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_ns1__GameAutoActivateResult:
		return (void*)soap_instantiate_ns1__GameAutoActivateResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__Register:
		return (void*)soap_instantiate__ns1__Register(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__RegisterResponse:
		return (void*)soap_instantiate__ns1__RegisterResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__Exception:
		return (void*)soap_instantiate_ns2__Exception(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__ProcessResult:
		return (void*)soap_instantiate_ns3__ProcessResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__QueryStringResult:
		return (void*)soap_instantiate_ns3__QueryStringResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__QueryAccountBlockHistoryResult:
		return (void*)soap_instantiate_ns3__QueryAccountBlockHistoryResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__BlockRecord:
		return (void*)soap_instantiate_ns3__BlockRecord(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__AdultStatusResult:
		return (void*)soap_instantiate_ns3__AdultStatusResult(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_ns2__QueryAccountAdultStatusResponse:
		return (void*)soap_instantiate_ns2__QueryAccountAdultStatusResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__QueryAccountAdultStatus:
		return (void*)soap_instantiate_ns2__QueryAccountAdultStatus(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__QueryAccountBlockHistoryResponse:
		return (void*)soap_instantiate_ns2__QueryAccountBlockHistoryResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__QueryAccountBlockHistory:
		return (void*)soap_instantiate_ns2__QueryAccountBlockHistory(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__QueryPasswordResponse:
		return (void*)soap_instantiate_ns2__QueryPasswordResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__QueryPassword:
		return (void*)soap_instantiate_ns2__QueryPassword(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__RegisterResponse:
		return (void*)soap_instantiate_ns2__RegisterResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__Register:
		return (void*)soap_instantiate_ns2__Register(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__ResumeResponse:
		return (void*)soap_instantiate_ns2__ResumeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__Resume:
		return (void*)soap_instantiate_ns2__Resume(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__SetAdultResponse:
		return (void*)soap_instantiate_ns2__SetAdultResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__SetAdult:
		return (void*)soap_instantiate_ns2__SetAdult(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__SuspendResponse:
		return (void*)soap_instantiate_ns2__SuspendResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__Suspend:
		return (void*)soap_instantiate_ns2__Suspend(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__UpdatePasswordResponse:
		return (void*)soap_instantiate_ns2__UpdatePasswordResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__UpdatePassword:
		return (void*)soap_instantiate_ns2__UpdatePassword(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns4__Register:
		return (void*)soap_instantiate___ns4__Register(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns5__Register:
		return (void*)soap_instantiate___ns5__Register(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_ns1__GameAutoActivateResult:
		if (p->size < 0)
			delete (ns1__GameAutoActivateResult*)p->ptr;
		else
			delete[] (ns1__GameAutoActivateResult*)p->ptr;
		break;
	case SOAP_TYPE__ns1__Register:
		if (p->size < 0)
			delete (_ns1__Register*)p->ptr;
		else
			delete[] (_ns1__Register*)p->ptr;
		break;
	case SOAP_TYPE__ns1__RegisterResponse:
		if (p->size < 0)
			delete (_ns1__RegisterResponse*)p->ptr;
		else
			delete[] (_ns1__RegisterResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns2__Exception:
		if (p->size < 0)
			delete (ns2__Exception*)p->ptr;
		else
			delete[] (ns2__Exception*)p->ptr;
		break;
	case SOAP_TYPE_ns3__ProcessResult:
		if (p->size < 0)
			delete (ns3__ProcessResult*)p->ptr;
		else
			delete[] (ns3__ProcessResult*)p->ptr;
		break;
	case SOAP_TYPE_ns3__QueryStringResult:
		if (p->size < 0)
			delete (ns3__QueryStringResult*)p->ptr;
		else
			delete[] (ns3__QueryStringResult*)p->ptr;
		break;
	case SOAP_TYPE_ns3__QueryAccountBlockHistoryResult:
		if (p->size < 0)
			delete (ns3__QueryAccountBlockHistoryResult*)p->ptr;
		else
			delete[] (ns3__QueryAccountBlockHistoryResult*)p->ptr;
		break;
	case SOAP_TYPE_ns3__BlockRecord:
		if (p->size < 0)
			delete (ns3__BlockRecord*)p->ptr;
		else
			delete[] (ns3__BlockRecord*)p->ptr;
		break;
	case SOAP_TYPE_ns3__AdultStatusResult:
		if (p->size < 0)
			delete (ns3__AdultStatusResult*)p->ptr;
		else
			delete[] (ns3__AdultStatusResult*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			delete (struct SOAP_ENV__Detail*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Detail*)p->ptr;
		break;
	case SOAP_TYPE_ns2__QueryAccountAdultStatusResponse:
		if (p->size < 0)
			delete (struct ns2__QueryAccountAdultStatusResponse*)p->ptr;
		else
			delete[] (struct ns2__QueryAccountAdultStatusResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns2__QueryAccountAdultStatus:
		if (p->size < 0)
			delete (struct ns2__QueryAccountAdultStatus*)p->ptr;
		else
			delete[] (struct ns2__QueryAccountAdultStatus*)p->ptr;
		break;
	case SOAP_TYPE_ns2__QueryAccountBlockHistoryResponse:
		if (p->size < 0)
			delete (struct ns2__QueryAccountBlockHistoryResponse*)p->ptr;
		else
			delete[] (struct ns2__QueryAccountBlockHistoryResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns2__QueryAccountBlockHistory:
		if (p->size < 0)
			delete (struct ns2__QueryAccountBlockHistory*)p->ptr;
		else
			delete[] (struct ns2__QueryAccountBlockHistory*)p->ptr;
		break;
	case SOAP_TYPE_ns2__QueryPasswordResponse:
		if (p->size < 0)
			delete (struct ns2__QueryPasswordResponse*)p->ptr;
		else
			delete[] (struct ns2__QueryPasswordResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns2__QueryPassword:
		if (p->size < 0)
			delete (struct ns2__QueryPassword*)p->ptr;
		else
			delete[] (struct ns2__QueryPassword*)p->ptr;
		break;
	case SOAP_TYPE_ns2__RegisterResponse:
		if (p->size < 0)
			delete (struct ns2__RegisterResponse*)p->ptr;
		else
			delete[] (struct ns2__RegisterResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns2__Register:
		if (p->size < 0)
			delete (struct ns2__Register*)p->ptr;
		else
			delete[] (struct ns2__Register*)p->ptr;
		break;
	case SOAP_TYPE_ns2__ResumeResponse:
		if (p->size < 0)
			delete (struct ns2__ResumeResponse*)p->ptr;
		else
			delete[] (struct ns2__ResumeResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns2__Resume:
		if (p->size < 0)
			delete (struct ns2__Resume*)p->ptr;
		else
			delete[] (struct ns2__Resume*)p->ptr;
		break;
	case SOAP_TYPE_ns2__SetAdultResponse:
		if (p->size < 0)
			delete (struct ns2__SetAdultResponse*)p->ptr;
		else
			delete[] (struct ns2__SetAdultResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns2__SetAdult:
		if (p->size < 0)
			delete (struct ns2__SetAdult*)p->ptr;
		else
			delete[] (struct ns2__SetAdult*)p->ptr;
		break;
	case SOAP_TYPE_ns2__SuspendResponse:
		if (p->size < 0)
			delete (struct ns2__SuspendResponse*)p->ptr;
		else
			delete[] (struct ns2__SuspendResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns2__Suspend:
		if (p->size < 0)
			delete (struct ns2__Suspend*)p->ptr;
		else
			delete[] (struct ns2__Suspend*)p->ptr;
		break;
	case SOAP_TYPE_ns2__UpdatePasswordResponse:
		if (p->size < 0)
			delete (struct ns2__UpdatePasswordResponse*)p->ptr;
		else
			delete[] (struct ns2__UpdatePasswordResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns2__UpdatePassword:
		if (p->size < 0)
			delete (struct ns2__UpdatePassword*)p->ptr;
		else
			delete[] (struct ns2__UpdatePassword*)p->ptr;
		break;
	case SOAP_TYPE___ns4__Register:
		if (p->size < 0)
			delete (struct __ns4__Register*)p->ptr;
		else
			delete[] (struct __ns4__Register*)p->ptr;
		break;
	case SOAP_TYPE___ns5__Register:
		if (p->size < 0)
			delete (struct __ns5__Register*)p->ptr;
		else
			delete[] (struct __ns5__Register*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			delete (struct SOAP_ENV__Header*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Header*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			delete (struct SOAP_ENV__Code*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Code*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			delete (struct SOAP_ENV__Reason*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Reason*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			delete (struct SOAP_ENV__Fault*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Fault*)p->ptr;
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_bool);
	if (soap_out_bool(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{	return soap_code_str(soap_codes_bool, n!=0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__AutoActResultCode(struct soap *soap, enum ns1__AutoActResultCode *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__AutoActResultCode
	*a = SOAP_DEFAULT_ns1__AutoActResultCode;
#else
	*a = (enum ns1__AutoActResultCode)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__AutoActResultCode(struct soap *soap, const enum ns1__AutoActResultCode *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__AutoActResultCode);
	if (soap_out_ns1__AutoActResultCode(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_ns1__AutoActResultCode[] =
{	{ (long)ns1__AutoActResultCode__UnknownError, "UnknownError" },
	{ (long)ns1__AutoActResultCode__Succeed, "Succeed" },
	{ (long)ns1__AutoActResultCode__ParameterIsNull, "ParameterIsNull" },
	{ (long)ns1__AutoActResultCode__UsernameOrPasswordNoSuited, "UsernameOrPasswordNoSuited" },
	{ (long)ns1__AutoActResultCode__GameInterfaceError, "GameInterfaceError" },
	{ (long)ns1__AutoActResultCode__GameInterfaceException, "GameInterfaceException" },
	{ (long)ns1__AutoActResultCode__ServerNoActivate, "ServerNoActivate" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__AutoActResultCode2s(struct soap *soap, enum ns1__AutoActResultCode n)
{	const char *s = soap_code_str(soap_codes_ns1__AutoActResultCode, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AutoActResultCode(struct soap *soap, const char *tag, int id, const enum ns1__AutoActResultCode *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__AutoActResultCode), type) || soap_send(soap, soap_ns1__AutoActResultCode2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 enum ns1__AutoActResultCode * SOAP_FMAC4 soap_get_ns1__AutoActResultCode(struct soap *soap, enum ns1__AutoActResultCode *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__AutoActResultCode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__AutoActResultCode(struct soap *soap, const char *s, enum ns1__AutoActResultCode *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_ns1__AutoActResultCode, s);
	if (map)
		*a = (enum ns1__AutoActResultCode)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 6)))
			return soap->error = SOAP_TYPE;
		*a = (enum ns1__AutoActResultCode)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ns1__AutoActResultCode * SOAP_FMAC4 soap_in_ns1__AutoActResultCode(struct soap *soap, const char *tag, enum ns1__AutoActResultCode *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ns1__AutoActResultCode *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__AutoActResultCode, sizeof(enum ns1__AutoActResultCode), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2ns1__AutoActResultCode(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum ns1__AutoActResultCode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__AutoActResultCode, 0, sizeof(enum ns1__AutoActResultCode), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

void ns3__AdultStatusResult::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->ns3__AdultStatusResult::Adult);
	soap_default_string(soap, &this->ns3__AdultStatusResult::Description);
	soap_default_int(soap, &this->ns3__AdultStatusResult::ErrorCode);
	/* transient soap skipped */
}

void ns3__AdultStatusResult::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->ns3__AdultStatusResult::Description);
	/* transient soap skipped */
}

int ns3__AdultStatusResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__AdultStatusResult);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns3__AdultStatusResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__AdultStatusResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__AdultStatusResult(struct soap *soap, const char *tag, int id, const ns3__AdultStatusResult *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__AdultStatusResult), type))
		return soap->error;
	if (soap_out_bool(soap, "Adult", -1, &(a->ns3__AdultStatusResult::Adult), ""))
		return soap->error;
	if (soap_out_string(soap, "Description", -1, &(a->ns3__AdultStatusResult::Description), ""))
		return soap->error;
	if (soap_out_int(soap, "ErrorCode", -1, &(a->ns3__AdultStatusResult::ErrorCode), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__AdultStatusResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__AdultStatusResult(soap, this, tag, type);
}

SOAP_FMAC3 ns3__AdultStatusResult * SOAP_FMAC4 soap_get_ns3__AdultStatusResult(struct soap *soap, ns3__AdultStatusResult *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__AdultStatusResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns3__AdultStatusResult::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__AdultStatusResult(soap, tag, this, type);
}

SOAP_FMAC3 ns3__AdultStatusResult * SOAP_FMAC4 soap_in_ns3__AdultStatusResult(struct soap *soap, const char *tag, ns3__AdultStatusResult *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__AdultStatusResult *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__AdultStatusResult, sizeof(ns3__AdultStatusResult), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__AdultStatusResult)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__AdultStatusResult *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Adult1 = 1;
	size_t soap_flag_Description1 = 1;
	size_t soap_flag_ErrorCode1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Adult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "Adult", &(a->ns3__AdultStatusResult::Adult), "xsd:boolean"))
				{	soap_flag_Adult1--;
					continue;
				}
			if (soap_flag_Description1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "Description", &(a->ns3__AdultStatusResult::Description), "xsd:string"))
				{	soap_flag_Description1--;
					continue;
				}
			if (soap_flag_ErrorCode1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ErrorCode", &(a->ns3__AdultStatusResult::ErrorCode), "xsd:int"))
				{	soap_flag_ErrorCode1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__AdultStatusResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__AdultStatusResult, 0, sizeof(ns3__AdultStatusResult), 0, soap_copy_ns3__AdultStatusResult);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Adult1 > 0 || soap_flag_ErrorCode1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 ns3__AdultStatusResult * SOAP_FMAC4 soap_instantiate_ns3__AdultStatusResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__AdultStatusResult(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__AdultStatusResult, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns3__AdultStatusResult;
		if (size)
			*size = sizeof(ns3__AdultStatusResult);
		((ns3__AdultStatusResult*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns3__AdultStatusResult[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__AdultStatusResult);
		for (int i = 0; i < n; i++)
			((ns3__AdultStatusResult*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__AdultStatusResult*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__AdultStatusResult(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__AdultStatusResult %p -> %p\n", q, p));
	*(ns3__AdultStatusResult*)p = *(ns3__AdultStatusResult*)q;
}

void ns3__BlockRecord::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns3__BlockRecord::OperationIntermal);
	soap_default_string(soap, &this->ns3__BlockRecord::OperationReason);
	soap_default_string(soap, &this->ns3__BlockRecord::OperationTime);
	soap_default_string(soap, &this->ns3__BlockRecord::OperationType);
	soap_default_string(soap, &this->ns3__BlockRecord::Operator);
	/* transient soap skipped */
}

void ns3__BlockRecord::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->ns3__BlockRecord::OperationIntermal);
	soap_serialize_string(soap, &this->ns3__BlockRecord::OperationReason);
	soap_serialize_string(soap, &this->ns3__BlockRecord::OperationTime);
	soap_serialize_string(soap, &this->ns3__BlockRecord::OperationType);
	soap_serialize_string(soap, &this->ns3__BlockRecord::Operator);
	/* transient soap skipped */
}

int ns3__BlockRecord::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__BlockRecord);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns3__BlockRecord::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__BlockRecord(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__BlockRecord(struct soap *soap, const char *tag, int id, const ns3__BlockRecord *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__BlockRecord), type))
		return soap->error;
	if (soap_out_string(soap, "OperationIntermal", -1, &(a->ns3__BlockRecord::OperationIntermal), ""))
		return soap->error;
	if (soap_out_string(soap, "OperationReason", -1, &(a->ns3__BlockRecord::OperationReason), ""))
		return soap->error;
	if (soap_out_string(soap, "OperationTime", -1, &(a->ns3__BlockRecord::OperationTime), ""))
		return soap->error;
	if (soap_out_string(soap, "OperationType", -1, &(a->ns3__BlockRecord::OperationType), ""))
		return soap->error;
	if (soap_out_string(soap, "Operator", -1, &(a->ns3__BlockRecord::Operator), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__BlockRecord::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__BlockRecord(soap, this, tag, type);
}

SOAP_FMAC3 ns3__BlockRecord * SOAP_FMAC4 soap_get_ns3__BlockRecord(struct soap *soap, ns3__BlockRecord *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__BlockRecord(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns3__BlockRecord::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__BlockRecord(soap, tag, this, type);
}

SOAP_FMAC3 ns3__BlockRecord * SOAP_FMAC4 soap_in_ns3__BlockRecord(struct soap *soap, const char *tag, ns3__BlockRecord *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__BlockRecord *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__BlockRecord, sizeof(ns3__BlockRecord), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__BlockRecord)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__BlockRecord *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_OperationIntermal1 = 1;
	size_t soap_flag_OperationReason1 = 1;
	size_t soap_flag_OperationTime1 = 1;
	size_t soap_flag_OperationType1 = 1;
	size_t soap_flag_Operator1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OperationIntermal1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "OperationIntermal", &(a->ns3__BlockRecord::OperationIntermal), "xsd:string"))
				{	soap_flag_OperationIntermal1--;
					continue;
				}
			if (soap_flag_OperationReason1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "OperationReason", &(a->ns3__BlockRecord::OperationReason), "xsd:string"))
				{	soap_flag_OperationReason1--;
					continue;
				}
			if (soap_flag_OperationTime1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "OperationTime", &(a->ns3__BlockRecord::OperationTime), "xsd:string"))
				{	soap_flag_OperationTime1--;
					continue;
				}
			if (soap_flag_OperationType1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "OperationType", &(a->ns3__BlockRecord::OperationType), "xsd:string"))
				{	soap_flag_OperationType1--;
					continue;
				}
			if (soap_flag_Operator1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "Operator", &(a->ns3__BlockRecord::Operator), "xsd:string"))
				{	soap_flag_Operator1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__BlockRecord *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__BlockRecord, 0, sizeof(ns3__BlockRecord), 0, soap_copy_ns3__BlockRecord);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 ns3__BlockRecord * SOAP_FMAC4 soap_instantiate_ns3__BlockRecord(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__BlockRecord(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__BlockRecord, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns3__BlockRecord;
		if (size)
			*size = sizeof(ns3__BlockRecord);
		((ns3__BlockRecord*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns3__BlockRecord[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__BlockRecord);
		for (int i = 0; i < n; i++)
			((ns3__BlockRecord*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__BlockRecord*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__BlockRecord(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__BlockRecord %p -> %p\n", q, p));
	*(ns3__BlockRecord*)p = *(ns3__BlockRecord*)q;
}

void ns3__QueryAccountBlockHistoryResult::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns3__QueryAccountBlockHistoryResult::Account);
	soap_default_string(soap, &this->ns3__QueryAccountBlockHistoryResult::Description);
	soap_default_int(soap, &this->ns3__QueryAccountBlockHistoryResult::ErrorCode);
	this->ns3__QueryAccountBlockHistoryResult::__sizeRecords = 0;
	this->ns3__QueryAccountBlockHistoryResult::Records = NULL;
	/* transient soap skipped */
}

void ns3__QueryAccountBlockHistoryResult::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->ns3__QueryAccountBlockHistoryResult::Account);
	soap_serialize_string(soap, &this->ns3__QueryAccountBlockHistoryResult::Description);
	if (this->ns3__QueryAccountBlockHistoryResult::Records)
	{	int i;
		for (i = 0; i < this->ns3__QueryAccountBlockHistoryResult::__sizeRecords; i++)
		{
			soap_serialize_PointerTons3__BlockRecord(soap, this->ns3__QueryAccountBlockHistoryResult::Records + i);
		}
	}
	/* transient soap skipped */
}

int ns3__QueryAccountBlockHistoryResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__QueryAccountBlockHistoryResult);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns3__QueryAccountBlockHistoryResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__QueryAccountBlockHistoryResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__QueryAccountBlockHistoryResult(struct soap *soap, const char *tag, int id, const ns3__QueryAccountBlockHistoryResult *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__QueryAccountBlockHistoryResult), type))
		return soap->error;
	if (soap_out_string(soap, "Account", -1, &(a->ns3__QueryAccountBlockHistoryResult::Account), ""))
		return soap->error;
	if (soap_out_string(soap, "Description", -1, &(a->ns3__QueryAccountBlockHistoryResult::Description), ""))
		return soap->error;
	if (soap_out_int(soap, "ErrorCode", -1, &(a->ns3__QueryAccountBlockHistoryResult::ErrorCode), ""))
		return soap->error;
	if (a->ns3__QueryAccountBlockHistoryResult::Records)
	{	int i;
		for (i = 0; i < a->ns3__QueryAccountBlockHistoryResult::__sizeRecords; i++)
			if (soap_out_PointerTons3__BlockRecord(soap, "Records", -1, a->ns3__QueryAccountBlockHistoryResult::Records + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__QueryAccountBlockHistoryResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__QueryAccountBlockHistoryResult(soap, this, tag, type);
}

SOAP_FMAC3 ns3__QueryAccountBlockHistoryResult * SOAP_FMAC4 soap_get_ns3__QueryAccountBlockHistoryResult(struct soap *soap, ns3__QueryAccountBlockHistoryResult *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__QueryAccountBlockHistoryResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns3__QueryAccountBlockHistoryResult::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__QueryAccountBlockHistoryResult(soap, tag, this, type);
}

SOAP_FMAC3 ns3__QueryAccountBlockHistoryResult * SOAP_FMAC4 soap_in_ns3__QueryAccountBlockHistoryResult(struct soap *soap, const char *tag, ns3__QueryAccountBlockHistoryResult *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__QueryAccountBlockHistoryResult *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__QueryAccountBlockHistoryResult, sizeof(ns3__QueryAccountBlockHistoryResult), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__QueryAccountBlockHistoryResult)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__QueryAccountBlockHistoryResult *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Account1 = 1;
	size_t soap_flag_Description1 = 1;
	size_t soap_flag_ErrorCode1 = 1;
	struct soap_blist *soap_blist_Records1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Account1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "Account", &(a->ns3__QueryAccountBlockHistoryResult::Account), "xsd:string"))
				{	soap_flag_Account1--;
					continue;
				}
			if (soap_flag_Description1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "Description", &(a->ns3__QueryAccountBlockHistoryResult::Description), "xsd:string"))
				{	soap_flag_Description1--;
					continue;
				}
			if (soap_flag_ErrorCode1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ErrorCode", &(a->ns3__QueryAccountBlockHistoryResult::ErrorCode), "xsd:int"))
				{	soap_flag_ErrorCode1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "Records", 1, NULL))
			{	if (a->ns3__QueryAccountBlockHistoryResult::Records == NULL)
				{	if (soap_blist_Records1 == NULL)
						soap_blist_Records1 = soap_new_block(soap);
					a->ns3__QueryAccountBlockHistoryResult::Records = (ns3__BlockRecord **)soap_push_block(soap, soap_blist_Records1, sizeof(ns3__BlockRecord *));
					if (a->ns3__QueryAccountBlockHistoryResult::Records == NULL)
						return NULL;
					*a->ns3__QueryAccountBlockHistoryResult::Records = NULL;
				}soap_revert(soap);
				if (soap_in_PointerTons3__BlockRecord(soap, "Records", a->ns3__QueryAccountBlockHistoryResult::Records, "ns3:BlockRecord"))
				{	a->ns3__QueryAccountBlockHistoryResult::__sizeRecords++;
					a->ns3__QueryAccountBlockHistoryResult::Records = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->ns3__QueryAccountBlockHistoryResult::Records)
			soap_pop_block(soap, soap_blist_Records1);
		if (a->ns3__QueryAccountBlockHistoryResult::__sizeRecords)
			a->ns3__QueryAccountBlockHistoryResult::Records = (ns3__BlockRecord **)soap_save_block(soap, soap_blist_Records1, NULL, 1);
		else
		{	a->ns3__QueryAccountBlockHistoryResult::Records = NULL;
			if (soap_blist_Records1)
				soap_end_block(soap, soap_blist_Records1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__QueryAccountBlockHistoryResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__QueryAccountBlockHistoryResult, 0, sizeof(ns3__QueryAccountBlockHistoryResult), 0, soap_copy_ns3__QueryAccountBlockHistoryResult);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ErrorCode1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 ns3__QueryAccountBlockHistoryResult * SOAP_FMAC4 soap_instantiate_ns3__QueryAccountBlockHistoryResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__QueryAccountBlockHistoryResult(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__QueryAccountBlockHistoryResult, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns3__QueryAccountBlockHistoryResult;
		if (size)
			*size = sizeof(ns3__QueryAccountBlockHistoryResult);
		((ns3__QueryAccountBlockHistoryResult*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns3__QueryAccountBlockHistoryResult[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__QueryAccountBlockHistoryResult);
		for (int i = 0; i < n; i++)
			((ns3__QueryAccountBlockHistoryResult*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__QueryAccountBlockHistoryResult*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__QueryAccountBlockHistoryResult(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__QueryAccountBlockHistoryResult %p -> %p\n", q, p));
	*(ns3__QueryAccountBlockHistoryResult*)p = *(ns3__QueryAccountBlockHistoryResult*)q;
}

void ns3__QueryStringResult::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns3__QueryStringResult::Description);
	soap_default_int(soap, &this->ns3__QueryStringResult::ErrorCode);
	soap_default_string(soap, &this->ns3__QueryStringResult::Value);
	/* transient soap skipped */
}

void ns3__QueryStringResult::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->ns3__QueryStringResult::Description);
	soap_serialize_string(soap, &this->ns3__QueryStringResult::Value);
	/* transient soap skipped */
}

int ns3__QueryStringResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__QueryStringResult);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns3__QueryStringResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__QueryStringResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__QueryStringResult(struct soap *soap, const char *tag, int id, const ns3__QueryStringResult *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__QueryStringResult), type))
		return soap->error;
	if (soap_out_string(soap, "Description", -1, &(a->ns3__QueryStringResult::Description), ""))
		return soap->error;
	if (soap_out_int(soap, "ErrorCode", -1, &(a->ns3__QueryStringResult::ErrorCode), ""))
		return soap->error;
	if (soap_out_string(soap, "Value", -1, &(a->ns3__QueryStringResult::Value), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__QueryStringResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__QueryStringResult(soap, this, tag, type);
}

SOAP_FMAC3 ns3__QueryStringResult * SOAP_FMAC4 soap_get_ns3__QueryStringResult(struct soap *soap, ns3__QueryStringResult *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__QueryStringResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns3__QueryStringResult::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__QueryStringResult(soap, tag, this, type);
}

SOAP_FMAC3 ns3__QueryStringResult * SOAP_FMAC4 soap_in_ns3__QueryStringResult(struct soap *soap, const char *tag, ns3__QueryStringResult *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__QueryStringResult *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__QueryStringResult, sizeof(ns3__QueryStringResult), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__QueryStringResult)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__QueryStringResult *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Description1 = 1;
	size_t soap_flag_ErrorCode1 = 1;
	size_t soap_flag_Value1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Description1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "Description", &(a->ns3__QueryStringResult::Description), "xsd:string"))
				{	soap_flag_Description1--;
					continue;
				}
			if (soap_flag_ErrorCode1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ErrorCode", &(a->ns3__QueryStringResult::ErrorCode), "xsd:int"))
				{	soap_flag_ErrorCode1--;
					continue;
				}
			if (soap_flag_Value1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "Value", &(a->ns3__QueryStringResult::Value), "xsd:string"))
				{	soap_flag_Value1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__QueryStringResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__QueryStringResult, 0, sizeof(ns3__QueryStringResult), 0, soap_copy_ns3__QueryStringResult);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ErrorCode1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 ns3__QueryStringResult * SOAP_FMAC4 soap_instantiate_ns3__QueryStringResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__QueryStringResult(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__QueryStringResult, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns3__QueryStringResult;
		if (size)
			*size = sizeof(ns3__QueryStringResult);
		((ns3__QueryStringResult*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns3__QueryStringResult[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__QueryStringResult);
		for (int i = 0; i < n; i++)
			((ns3__QueryStringResult*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__QueryStringResult*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__QueryStringResult(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__QueryStringResult %p -> %p\n", q, p));
	*(ns3__QueryStringResult*)p = *(ns3__QueryStringResult*)q;
}

void ns3__ProcessResult::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns3__ProcessResult::Description);
	soap_default_int(soap, &this->ns3__ProcessResult::ErrorCode);
	/* transient soap skipped */
}

void ns3__ProcessResult::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->ns3__ProcessResult::Description);
	/* transient soap skipped */
}

int ns3__ProcessResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__ProcessResult);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns3__ProcessResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__ProcessResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ProcessResult(struct soap *soap, const char *tag, int id, const ns3__ProcessResult *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__ProcessResult), type))
		return soap->error;
	if (soap_out_string(soap, "Description", -1, &(a->ns3__ProcessResult::Description), ""))
		return soap->error;
	if (soap_out_int(soap, "ErrorCode", -1, &(a->ns3__ProcessResult::ErrorCode), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns3__ProcessResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__ProcessResult(soap, this, tag, type);
}

SOAP_FMAC3 ns3__ProcessResult * SOAP_FMAC4 soap_get_ns3__ProcessResult(struct soap *soap, ns3__ProcessResult *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__ProcessResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns3__ProcessResult::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__ProcessResult(soap, tag, this, type);
}

SOAP_FMAC3 ns3__ProcessResult * SOAP_FMAC4 soap_in_ns3__ProcessResult(struct soap *soap, const char *tag, ns3__ProcessResult *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__ProcessResult *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__ProcessResult, sizeof(ns3__ProcessResult), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__ProcessResult)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns3__ProcessResult *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Description1 = 1;
	size_t soap_flag_ErrorCode1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Description1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "Description", &(a->ns3__ProcessResult::Description), "xsd:string"))
				{	soap_flag_Description1--;
					continue;
				}
			if (soap_flag_ErrorCode1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ErrorCode", &(a->ns3__ProcessResult::ErrorCode), "xsd:int"))
				{	soap_flag_ErrorCode1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__ProcessResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__ProcessResult, 0, sizeof(ns3__ProcessResult), 0, soap_copy_ns3__ProcessResult);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ErrorCode1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 ns3__ProcessResult * SOAP_FMAC4 soap_instantiate_ns3__ProcessResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__ProcessResult(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__ProcessResult, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns3__ProcessResult;
		if (size)
			*size = sizeof(ns3__ProcessResult);
		((ns3__ProcessResult*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns3__ProcessResult[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__ProcessResult);
		for (int i = 0; i < n; i++)
			((ns3__ProcessResult*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__ProcessResult*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__ProcessResult(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__ProcessResult %p -> %p\n", q, p));
	*(ns3__ProcessResult*)p = *(ns3__ProcessResult*)q;
}

void ns2__Exception::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns2__Exception::message);
	/* transient soap skipped */
}

void ns2__Exception::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->ns2__Exception::message);
	/* transient soap skipped */
}

int ns2__Exception::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns2__Exception);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns2__Exception::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns2__Exception(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Exception(struct soap *soap, const char *tag, int id, const ns2__Exception *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__Exception), type))
		return soap->error;
	if (soap_out_string(soap, "message", -1, &(a->ns2__Exception::message), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns2__Exception::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns2__Exception(soap, this, tag, type);
}

SOAP_FMAC3 ns2__Exception * SOAP_FMAC4 soap_get_ns2__Exception(struct soap *soap, ns2__Exception *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__Exception(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns2__Exception::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns2__Exception(soap, tag, this, type);
}

SOAP_FMAC3 ns2__Exception * SOAP_FMAC4 soap_in_ns2__Exception(struct soap *soap, const char *tag, ns2__Exception *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns2__Exception *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__Exception, sizeof(ns2__Exception), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns2__Exception)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns2__Exception *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_message1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_message1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "message", &(a->ns2__Exception::message), "xsd:string"))
				{	soap_flag_message1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns2__Exception *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__Exception, 0, sizeof(ns2__Exception), 0, soap_copy_ns2__Exception);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 ns2__Exception * SOAP_FMAC4 soap_instantiate_ns2__Exception(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__Exception(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__Exception, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns2__Exception;
		if (size)
			*size = sizeof(ns2__Exception);
		((ns2__Exception*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns2__Exception[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns2__Exception);
		for (int i = 0; i < n; i++)
			((ns2__Exception*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns2__Exception*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Exception(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns2__Exception %p -> %p\n", q, p));
	*(ns2__Exception*)p = *(ns2__Exception*)q;
}

void _ns1__RegisterResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__RegisterResponse::RegisterResult = NULL;
	/* transient soap skipped */
}

void _ns1__RegisterResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__GameAutoActivateResult(soap, &this->_ns1__RegisterResponse::RegisterResult);
	/* transient soap skipped */
}

int _ns1__RegisterResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__RegisterResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__RegisterResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__RegisterResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RegisterResponse(struct soap *soap, const char *tag, int id, const _ns1__RegisterResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__RegisterResponse), type))
		return soap->error;
	if (a->RegisterResult)
		soap_element_result(soap, "ns1:RegisterResult");
	if (soap_out_PointerTons1__GameAutoActivateResult(soap, "ns1:RegisterResult", -1, &(a->_ns1__RegisterResponse::RegisterResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__RegisterResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__RegisterResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__RegisterResponse * SOAP_FMAC4 soap_get__ns1__RegisterResponse(struct soap *soap, _ns1__RegisterResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__RegisterResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__RegisterResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__RegisterResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__RegisterResponse * SOAP_FMAC4 soap_in__ns1__RegisterResponse(struct soap *soap, const char *tag, _ns1__RegisterResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__RegisterResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__RegisterResponse, sizeof(_ns1__RegisterResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__RegisterResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__RegisterResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_RegisterResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_RegisterResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__GameAutoActivateResult(soap, "ns1:RegisterResult", &(a->_ns1__RegisterResponse::RegisterResult), "ns1:GameAutoActivateResult"))
				{	soap_flag_RegisterResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:RegisterResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__RegisterResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__RegisterResponse, 0, sizeof(_ns1__RegisterResponse), 0, soap_copy__ns1__RegisterResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 _ns1__RegisterResponse * SOAP_FMAC4 soap_instantiate__ns1__RegisterResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__RegisterResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__RegisterResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__RegisterResponse;
		if (size)
			*size = sizeof(_ns1__RegisterResponse);
		((_ns1__RegisterResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__RegisterResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__RegisterResponse);
		for (int i = 0; i < n; i++)
			((_ns1__RegisterResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__RegisterResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__RegisterResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__RegisterResponse %p -> %p\n", q, p));
	*(_ns1__RegisterResponse*)p = *(_ns1__RegisterResponse*)q;
}

void _ns1__Register::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__Register::serverIP);
	soap_default_string(soap, &this->_ns1__Register::userName);
	soap_default_string(soap, &this->_ns1__Register::password);
	soap_default_string(soap, &this->_ns1__Register::clientIp);
	/* transient soap skipped */
}

void _ns1__Register::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__Register::serverIP);
	soap_serialize_string(soap, &this->_ns1__Register::userName);
	soap_serialize_string(soap, &this->_ns1__Register::password);
	soap_serialize_string(soap, &this->_ns1__Register::clientIp);
	/* transient soap skipped */
}

int _ns1__Register::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__Register);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__Register::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__Register(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Register(struct soap *soap, const char *tag, int id, const _ns1__Register *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__Register), type))
		return soap->error;
	if (soap_out_string(soap, "ns1:serverIP", -1, &(a->_ns1__Register::serverIP), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:userName", -1, &(a->_ns1__Register::userName), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:password", -1, &(a->_ns1__Register::password), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:clientIp", -1, &(a->_ns1__Register::clientIp), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__Register::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__Register(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__Register * SOAP_FMAC4 soap_get__ns1__Register(struct soap *soap, _ns1__Register *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__Register(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__Register::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__Register(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__Register * SOAP_FMAC4 soap_in__ns1__Register(struct soap *soap, const char *tag, _ns1__Register *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__Register *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__Register, sizeof(_ns1__Register), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__Register)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__Register *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_serverIP1 = 1;
	size_t soap_flag_userName1 = 1;
	size_t soap_flag_password1 = 1;
	size_t soap_flag_clientIp1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_serverIP1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:serverIP", &(a->_ns1__Register::serverIP), "xsd:string"))
				{	soap_flag_serverIP1--;
					continue;
				}
			if (soap_flag_userName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:userName", &(a->_ns1__Register::userName), "xsd:string"))
				{	soap_flag_userName1--;
					continue;
				}
			if (soap_flag_password1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:password", &(a->_ns1__Register::password), "xsd:string"))
				{	soap_flag_password1--;
					continue;
				}
			if (soap_flag_clientIp1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:clientIp", &(a->_ns1__Register::clientIp), "xsd:string"))
				{	soap_flag_clientIp1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__Register *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__Register, 0, sizeof(_ns1__Register), 0, soap_copy__ns1__Register);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 _ns1__Register * SOAP_FMAC4 soap_instantiate__ns1__Register(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__Register(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__Register, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__Register;
		if (size)
			*size = sizeof(_ns1__Register);
		((_ns1__Register*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__Register[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__Register);
		for (int i = 0; i < n; i++)
			((_ns1__Register*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__Register*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__Register(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__Register %p -> %p\n", q, p));
	*(_ns1__Register*)p = *(_ns1__Register*)q;
}

void ns1__GameAutoActivateResult::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_ns1__AutoActResultCode(soap, &this->ns1__GameAutoActivateResult::ErrorCode);
	soap_default_bool(soap, &this->ns1__GameAutoActivateResult::IsPresentee);
	soap_default_bool(soap, &this->ns1__GameAutoActivateResult::IsAdult);
	/* transient soap skipped */
}

void ns1__GameAutoActivateResult::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int ns1__GameAutoActivateResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__GameAutoActivateResult);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__GameAutoActivateResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__GameAutoActivateResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GameAutoActivateResult(struct soap *soap, const char *tag, int id, const ns1__GameAutoActivateResult *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__GameAutoActivateResult), type))
		return soap->error;
	if (soap_out_ns1__AutoActResultCode(soap, "ns1:ErrorCode", -1, &(a->ns1__GameAutoActivateResult::ErrorCode), ""))
		return soap->error;
	if (soap_out_bool(soap, "ns1:IsPresentee", -1, &(a->ns1__GameAutoActivateResult::IsPresentee), ""))
		return soap->error;
	if (soap_out_bool(soap, "ns1:IsAdult", -1, &(a->ns1__GameAutoActivateResult::IsAdult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__GameAutoActivateResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__GameAutoActivateResult(soap, this, tag, type);
}

SOAP_FMAC3 ns1__GameAutoActivateResult * SOAP_FMAC4 soap_get_ns1__GameAutoActivateResult(struct soap *soap, ns1__GameAutoActivateResult *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__GameAutoActivateResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__GameAutoActivateResult::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__GameAutoActivateResult(soap, tag, this, type);
}

SOAP_FMAC3 ns1__GameAutoActivateResult * SOAP_FMAC4 soap_in_ns1__GameAutoActivateResult(struct soap *soap, const char *tag, ns1__GameAutoActivateResult *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__GameAutoActivateResult *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__GameAutoActivateResult, sizeof(ns1__GameAutoActivateResult), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__GameAutoActivateResult)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__GameAutoActivateResult *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ErrorCode1 = 1;
	size_t soap_flag_IsPresentee1 = 1;
	size_t soap_flag_IsAdult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ErrorCode1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns1__AutoActResultCode(soap, "ns1:ErrorCode", &(a->ns1__GameAutoActivateResult::ErrorCode), "ns1:AutoActResultCode"))
				{	soap_flag_ErrorCode1--;
					continue;
				}
			if (soap_flag_IsPresentee1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ns1:IsPresentee", &(a->ns1__GameAutoActivateResult::IsPresentee), "xsd:boolean"))
				{	soap_flag_IsPresentee1--;
					continue;
				}
			if (soap_flag_IsAdult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ns1:IsAdult", &(a->ns1__GameAutoActivateResult::IsAdult), "xsd:boolean"))
				{	soap_flag_IsAdult1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__GameAutoActivateResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__GameAutoActivateResult, 0, sizeof(ns1__GameAutoActivateResult), 0, soap_copy_ns1__GameAutoActivateResult);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ErrorCode1 > 0 || soap_flag_IsPresentee1 > 0 || soap_flag_IsAdult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 ns1__GameAutoActivateResult * SOAP_FMAC4 soap_instantiate_ns1__GameAutoActivateResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__GameAutoActivateResult(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__GameAutoActivateResult, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__GameAutoActivateResult;
		if (size)
			*size = sizeof(ns1__GameAutoActivateResult);
		((ns1__GameAutoActivateResult*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__GameAutoActivateResult[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__GameAutoActivateResult);
		for (int i = 0; i < n; i++)
			((ns1__GameAutoActivateResult*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__GameAutoActivateResult*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__GameAutoActivateResult(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__GameAutoActivateResult %p -> %p\n", q, p));
	*(ns1__GameAutoActivateResult*)p = *(ns1__GameAutoActivateResult*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault;
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason;
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Code;
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Code[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Header;
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Header[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns5__Register(struct soap *soap, struct __ns5__Register *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Register = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns5__Register(struct soap *soap, const struct __ns5__Register *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__Register(soap, &a->ns1__Register);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns5__Register(struct soap *soap, const struct __ns5__Register *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns5__Register(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns5__Register(struct soap *soap, const char *tag, int id, const struct __ns5__Register *a, const char *type)
{
	if (soap_out_PointerTo_ns1__Register(soap, "ns1:Register", -1, &a->ns1__Register, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns5__Register * SOAP_FMAC4 soap_get___ns5__Register(struct soap *soap, struct __ns5__Register *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns5__Register(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns5__Register * SOAP_FMAC4 soap_in___ns5__Register(struct soap *soap, const char *tag, struct __ns5__Register *a, const char *type)
{
	size_t soap_flag_ns1__Register = 1;
	short soap_flag;
	a = (struct __ns5__Register *)soap_id_enter(soap, "", a, SOAP_TYPE___ns5__Register, sizeof(struct __ns5__Register), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns5__Register(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Register && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__Register(soap, "ns1:Register", &a->ns1__Register, ""))
				{	soap_flag_ns1__Register--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 struct __ns5__Register * SOAP_FMAC4 soap_instantiate___ns5__Register(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns5__Register(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns5__Register, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns5__Register;
		if (size)
			*size = sizeof(struct __ns5__Register);
	}
	else
	{	cp->ptr = (void*)new struct __ns5__Register[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns5__Register);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns5__Register*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns5__Register(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns5__Register %p -> %p\n", q, p));
	*(struct __ns5__Register*)p = *(struct __ns5__Register*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns4__Register(struct soap *soap, struct __ns4__Register *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Register = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns4__Register(struct soap *soap, const struct __ns4__Register *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__Register(soap, &a->ns1__Register);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns4__Register(struct soap *soap, const struct __ns4__Register *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns4__Register(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns4__Register(struct soap *soap, const char *tag, int id, const struct __ns4__Register *a, const char *type)
{
	if (soap_out_PointerTo_ns1__Register(soap, "ns1:Register", -1, &a->ns1__Register, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns4__Register * SOAP_FMAC4 soap_get___ns4__Register(struct soap *soap, struct __ns4__Register *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns4__Register(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns4__Register * SOAP_FMAC4 soap_in___ns4__Register(struct soap *soap, const char *tag, struct __ns4__Register *a, const char *type)
{
	size_t soap_flag_ns1__Register = 1;
	short soap_flag;
	a = (struct __ns4__Register *)soap_id_enter(soap, "", a, SOAP_TYPE___ns4__Register, sizeof(struct __ns4__Register), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns4__Register(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Register && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__Register(soap, "ns1:Register", &a->ns1__Register, ""))
				{	soap_flag_ns1__Register--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 struct __ns4__Register * SOAP_FMAC4 soap_instantiate___ns4__Register(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns4__Register(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns4__Register, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns4__Register;
		if (size)
			*size = sizeof(struct __ns4__Register);
	}
	else
	{	cp->ptr = (void*)new struct __ns4__Register[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns4__Register);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns4__Register*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns4__Register(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns4__Register %p -> %p\n", q, p));
	*(struct __ns4__Register*)p = *(struct __ns4__Register*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__UpdatePassword(struct soap *soap, struct ns2__UpdatePassword *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->_account);
	soap_default_string(soap, &a->_newPassword);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__UpdatePassword(struct soap *soap, const struct ns2__UpdatePassword *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->_account);
	soap_serialize_string(soap, &a->_newPassword);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__UpdatePassword(struct soap *soap, const struct ns2__UpdatePassword *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__UpdatePassword);
	if (soap_out_ns2__UpdatePassword(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__UpdatePassword(struct soap *soap, const char *tag, int id, const struct ns2__UpdatePassword *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__UpdatePassword), type))
		return soap->error;
	if (soap_out_string(soap, "account", -1, &a->_account, ""))
		return soap->error;
	if (soap_out_string(soap, "newPassword", -1, &a->_newPassword, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__UpdatePassword * SOAP_FMAC4 soap_get_ns2__UpdatePassword(struct soap *soap, struct ns2__UpdatePassword *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__UpdatePassword(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns2__UpdatePassword * SOAP_FMAC4 soap_in_ns2__UpdatePassword(struct soap *soap, const char *tag, struct ns2__UpdatePassword *a, const char *type)
{
	size_t soap_flag__account = 1;
	size_t soap_flag__newPassword = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__UpdatePassword *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__UpdatePassword, sizeof(struct ns2__UpdatePassword), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__UpdatePassword(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__account && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, NULL, &a->_account, "xsd:string"))
				{	soap_flag__account--;
					continue;
				}
			if (soap_flag__newPassword && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, NULL, &a->_newPassword, "xsd:string"))
				{	soap_flag__newPassword--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__UpdatePassword *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__UpdatePassword, 0, sizeof(struct ns2__UpdatePassword), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 struct ns2__UpdatePassword * SOAP_FMAC4 soap_instantiate_ns2__UpdatePassword(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__UpdatePassword(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__UpdatePassword, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns2__UpdatePassword;
		if (size)
			*size = sizeof(struct ns2__UpdatePassword);
	}
	else
	{	cp->ptr = (void*)new struct ns2__UpdatePassword[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns2__UpdatePassword);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns2__UpdatePassword*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__UpdatePassword(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__UpdatePassword %p -> %p\n", q, p));
	*(struct ns2__UpdatePassword*)p = *(struct ns2__UpdatePassword*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__UpdatePasswordResponse(struct soap *soap, struct ns2__UpdatePasswordResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->_return_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__UpdatePasswordResponse(struct soap *soap, const struct ns2__UpdatePasswordResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons3__ProcessResult(soap, &a->_return_);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__UpdatePasswordResponse(struct soap *soap, const struct ns2__UpdatePasswordResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__UpdatePasswordResponse);
	if (soap_out_ns2__UpdatePasswordResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__UpdatePasswordResponse(struct soap *soap, const char *tag, int id, const struct ns2__UpdatePasswordResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__UpdatePasswordResponse), type))
		return soap->error;
	if (soap_out_PointerTons3__ProcessResult(soap, "return", -1, &a->_return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__UpdatePasswordResponse * SOAP_FMAC4 soap_get_ns2__UpdatePasswordResponse(struct soap *soap, struct ns2__UpdatePasswordResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__UpdatePasswordResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns2__UpdatePasswordResponse * SOAP_FMAC4 soap_in_ns2__UpdatePasswordResponse(struct soap *soap, const char *tag, struct ns2__UpdatePasswordResponse *a, const char *type)
{
	size_t soap_flag__return_ = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__UpdatePasswordResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__UpdatePasswordResponse, sizeof(struct ns2__UpdatePasswordResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__UpdatePasswordResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__return_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons3__ProcessResult(soap, NULL, &a->_return_, "ns3:ProcessResult"))
				{	soap_flag__return_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__UpdatePasswordResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__UpdatePasswordResponse, 0, sizeof(struct ns2__UpdatePasswordResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 struct ns2__UpdatePasswordResponse * SOAP_FMAC4 soap_instantiate_ns2__UpdatePasswordResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__UpdatePasswordResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__UpdatePasswordResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns2__UpdatePasswordResponse;
		if (size)
			*size = sizeof(struct ns2__UpdatePasswordResponse);
	}
	else
	{	cp->ptr = (void*)new struct ns2__UpdatePasswordResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns2__UpdatePasswordResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns2__UpdatePasswordResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__UpdatePasswordResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__UpdatePasswordResponse %p -> %p\n", q, p));
	*(struct ns2__UpdatePasswordResponse*)p = *(struct ns2__UpdatePasswordResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__Suspend(struct soap *soap, struct ns2__Suspend *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->_account);
	soap_default_string(soap, &a->_reason);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__Suspend(struct soap *soap, const struct ns2__Suspend *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->_account);
	soap_serialize_string(soap, &a->_reason);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__Suspend(struct soap *soap, const struct ns2__Suspend *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__Suspend);
	if (soap_out_ns2__Suspend(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Suspend(struct soap *soap, const char *tag, int id, const struct ns2__Suspend *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__Suspend), type))
		return soap->error;
	if (soap_out_string(soap, "account", -1, &a->_account, ""))
		return soap->error;
	if (soap_out_string(soap, "reason", -1, &a->_reason, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__Suspend * SOAP_FMAC4 soap_get_ns2__Suspend(struct soap *soap, struct ns2__Suspend *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__Suspend(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns2__Suspend * SOAP_FMAC4 soap_in_ns2__Suspend(struct soap *soap, const char *tag, struct ns2__Suspend *a, const char *type)
{
	size_t soap_flag__account = 1;
	size_t soap_flag__reason = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__Suspend *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__Suspend, sizeof(struct ns2__Suspend), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__Suspend(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__account && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, NULL, &a->_account, "xsd:string"))
				{	soap_flag__account--;
					continue;
				}
			if (soap_flag__reason && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, NULL, &a->_reason, "xsd:string"))
				{	soap_flag__reason--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__Suspend *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__Suspend, 0, sizeof(struct ns2__Suspend), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 struct ns2__Suspend * SOAP_FMAC4 soap_instantiate_ns2__Suspend(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__Suspend(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__Suspend, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns2__Suspend;
		if (size)
			*size = sizeof(struct ns2__Suspend);
	}
	else
	{	cp->ptr = (void*)new struct ns2__Suspend[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns2__Suspend);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns2__Suspend*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Suspend(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__Suspend %p -> %p\n", q, p));
	*(struct ns2__Suspend*)p = *(struct ns2__Suspend*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__SuspendResponse(struct soap *soap, struct ns2__SuspendResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->_return_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__SuspendResponse(struct soap *soap, const struct ns2__SuspendResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons3__ProcessResult(soap, &a->_return_);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__SuspendResponse(struct soap *soap, const struct ns2__SuspendResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__SuspendResponse);
	if (soap_out_ns2__SuspendResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SuspendResponse(struct soap *soap, const char *tag, int id, const struct ns2__SuspendResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__SuspendResponse), type))
		return soap->error;
	if (soap_out_PointerTons3__ProcessResult(soap, "return", -1, &a->_return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__SuspendResponse * SOAP_FMAC4 soap_get_ns2__SuspendResponse(struct soap *soap, struct ns2__SuspendResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__SuspendResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns2__SuspendResponse * SOAP_FMAC4 soap_in_ns2__SuspendResponse(struct soap *soap, const char *tag, struct ns2__SuspendResponse *a, const char *type)
{
	size_t soap_flag__return_ = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__SuspendResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__SuspendResponse, sizeof(struct ns2__SuspendResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__SuspendResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__return_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons3__ProcessResult(soap, NULL, &a->_return_, "ns3:ProcessResult"))
				{	soap_flag__return_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__SuspendResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__SuspendResponse, 0, sizeof(struct ns2__SuspendResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 struct ns2__SuspendResponse * SOAP_FMAC4 soap_instantiate_ns2__SuspendResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__SuspendResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__SuspendResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns2__SuspendResponse;
		if (size)
			*size = sizeof(struct ns2__SuspendResponse);
	}
	else
	{	cp->ptr = (void*)new struct ns2__SuspendResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns2__SuspendResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns2__SuspendResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__SuspendResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__SuspendResponse %p -> %p\n", q, p));
	*(struct ns2__SuspendResponse*)p = *(struct ns2__SuspendResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__SetAdult(struct soap *soap, struct ns2__SetAdult *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->_account);
	soap_default_int(soap, &a->_adult);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__SetAdult(struct soap *soap, const struct ns2__SetAdult *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->_account);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__SetAdult(struct soap *soap, const struct ns2__SetAdult *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__SetAdult);
	if (soap_out_ns2__SetAdult(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SetAdult(struct soap *soap, const char *tag, int id, const struct ns2__SetAdult *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__SetAdult), type))
		return soap->error;
	if (soap_out_string(soap, "account", -1, &a->_account, ""))
		return soap->error;
	if (soap_out_int(soap, "adult", -1, &a->_adult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__SetAdult * SOAP_FMAC4 soap_get_ns2__SetAdult(struct soap *soap, struct ns2__SetAdult *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__SetAdult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns2__SetAdult * SOAP_FMAC4 soap_in_ns2__SetAdult(struct soap *soap, const char *tag, struct ns2__SetAdult *a, const char *type)
{
	size_t soap_flag__account = 1;
	size_t soap_flag__adult = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__SetAdult *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__SetAdult, sizeof(struct ns2__SetAdult), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__SetAdult(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__account && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, NULL, &a->_account, "xsd:string"))
				{	soap_flag__account--;
					continue;
				}
			if (soap_flag__adult && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, NULL, &a->_adult, "xsd:int"))
				{	soap_flag__adult--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__SetAdult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__SetAdult, 0, sizeof(struct ns2__SetAdult), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__adult > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 struct ns2__SetAdult * SOAP_FMAC4 soap_instantiate_ns2__SetAdult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__SetAdult(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__SetAdult, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns2__SetAdult;
		if (size)
			*size = sizeof(struct ns2__SetAdult);
	}
	else
	{	cp->ptr = (void*)new struct ns2__SetAdult[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns2__SetAdult);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns2__SetAdult*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__SetAdult(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__SetAdult %p -> %p\n", q, p));
	*(struct ns2__SetAdult*)p = *(struct ns2__SetAdult*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__SetAdultResponse(struct soap *soap, struct ns2__SetAdultResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->_return_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__SetAdultResponse(struct soap *soap, const struct ns2__SetAdultResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons3__ProcessResult(soap, &a->_return_);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__SetAdultResponse(struct soap *soap, const struct ns2__SetAdultResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__SetAdultResponse);
	if (soap_out_ns2__SetAdultResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SetAdultResponse(struct soap *soap, const char *tag, int id, const struct ns2__SetAdultResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__SetAdultResponse), type))
		return soap->error;
	if (soap_out_PointerTons3__ProcessResult(soap, "return", -1, &a->_return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__SetAdultResponse * SOAP_FMAC4 soap_get_ns2__SetAdultResponse(struct soap *soap, struct ns2__SetAdultResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__SetAdultResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns2__SetAdultResponse * SOAP_FMAC4 soap_in_ns2__SetAdultResponse(struct soap *soap, const char *tag, struct ns2__SetAdultResponse *a, const char *type)
{
	size_t soap_flag__return_ = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__SetAdultResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__SetAdultResponse, sizeof(struct ns2__SetAdultResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__SetAdultResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__return_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons3__ProcessResult(soap, NULL, &a->_return_, "ns3:ProcessResult"))
				{	soap_flag__return_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__SetAdultResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__SetAdultResponse, 0, sizeof(struct ns2__SetAdultResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 struct ns2__SetAdultResponse * SOAP_FMAC4 soap_instantiate_ns2__SetAdultResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__SetAdultResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__SetAdultResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns2__SetAdultResponse;
		if (size)
			*size = sizeof(struct ns2__SetAdultResponse);
	}
	else
	{	cp->ptr = (void*)new struct ns2__SetAdultResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns2__SetAdultResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns2__SetAdultResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__SetAdultResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__SetAdultResponse %p -> %p\n", q, p));
	*(struct ns2__SetAdultResponse*)p = *(struct ns2__SetAdultResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__Resume(struct soap *soap, struct ns2__Resume *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->_account);
	soap_default_string(soap, &a->_reason);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__Resume(struct soap *soap, const struct ns2__Resume *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->_account);
	soap_serialize_string(soap, &a->_reason);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__Resume(struct soap *soap, const struct ns2__Resume *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__Resume);
	if (soap_out_ns2__Resume(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Resume(struct soap *soap, const char *tag, int id, const struct ns2__Resume *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__Resume), type))
		return soap->error;
	if (soap_out_string(soap, "account", -1, &a->_account, ""))
		return soap->error;
	if (soap_out_string(soap, "reason", -1, &a->_reason, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__Resume * SOAP_FMAC4 soap_get_ns2__Resume(struct soap *soap, struct ns2__Resume *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__Resume(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns2__Resume * SOAP_FMAC4 soap_in_ns2__Resume(struct soap *soap, const char *tag, struct ns2__Resume *a, const char *type)
{
	size_t soap_flag__account = 1;
	size_t soap_flag__reason = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__Resume *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__Resume, sizeof(struct ns2__Resume), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__Resume(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__account && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, NULL, &a->_account, "xsd:string"))
				{	soap_flag__account--;
					continue;
				}
			if (soap_flag__reason && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, NULL, &a->_reason, "xsd:string"))
				{	soap_flag__reason--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__Resume *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__Resume, 0, sizeof(struct ns2__Resume), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 struct ns2__Resume * SOAP_FMAC4 soap_instantiate_ns2__Resume(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__Resume(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__Resume, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns2__Resume;
		if (size)
			*size = sizeof(struct ns2__Resume);
	}
	else
	{	cp->ptr = (void*)new struct ns2__Resume[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns2__Resume);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns2__Resume*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Resume(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__Resume %p -> %p\n", q, p));
	*(struct ns2__Resume*)p = *(struct ns2__Resume*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__ResumeResponse(struct soap *soap, struct ns2__ResumeResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->_return_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__ResumeResponse(struct soap *soap, const struct ns2__ResumeResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons3__ProcessResult(soap, &a->_return_);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__ResumeResponse(struct soap *soap, const struct ns2__ResumeResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__ResumeResponse);
	if (soap_out_ns2__ResumeResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ResumeResponse(struct soap *soap, const char *tag, int id, const struct ns2__ResumeResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__ResumeResponse), type))
		return soap->error;
	if (soap_out_PointerTons3__ProcessResult(soap, "return", -1, &a->_return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__ResumeResponse * SOAP_FMAC4 soap_get_ns2__ResumeResponse(struct soap *soap, struct ns2__ResumeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__ResumeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns2__ResumeResponse * SOAP_FMAC4 soap_in_ns2__ResumeResponse(struct soap *soap, const char *tag, struct ns2__ResumeResponse *a, const char *type)
{
	size_t soap_flag__return_ = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__ResumeResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__ResumeResponse, sizeof(struct ns2__ResumeResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__ResumeResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__return_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons3__ProcessResult(soap, NULL, &a->_return_, "ns3:ProcessResult"))
				{	soap_flag__return_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__ResumeResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__ResumeResponse, 0, sizeof(struct ns2__ResumeResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 struct ns2__ResumeResponse * SOAP_FMAC4 soap_instantiate_ns2__ResumeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__ResumeResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__ResumeResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns2__ResumeResponse;
		if (size)
			*size = sizeof(struct ns2__ResumeResponse);
	}
	else
	{	cp->ptr = (void*)new struct ns2__ResumeResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns2__ResumeResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns2__ResumeResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ResumeResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__ResumeResponse %p -> %p\n", q, p));
	*(struct ns2__ResumeResponse*)p = *(struct ns2__ResumeResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__Register(struct soap *soap, struct ns2__Register *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->_uinfo);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__Register(struct soap *soap, const struct ns2__Register *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->_uinfo);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__Register(struct soap *soap, const struct ns2__Register *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__Register);
	if (soap_out_ns2__Register(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Register(struct soap *soap, const char *tag, int id, const struct ns2__Register *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__Register), type))
		return soap->error;
	if (soap_out_string(soap, "uinfo", -1, &a->_uinfo, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__Register * SOAP_FMAC4 soap_get_ns2__Register(struct soap *soap, struct ns2__Register *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__Register(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns2__Register * SOAP_FMAC4 soap_in_ns2__Register(struct soap *soap, const char *tag, struct ns2__Register *a, const char *type)
{
	size_t soap_flag__uinfo = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__Register *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__Register, sizeof(struct ns2__Register), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__Register(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__uinfo && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, NULL, &a->_uinfo, "xsd:string"))
				{	soap_flag__uinfo--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__Register *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__Register, 0, sizeof(struct ns2__Register), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 struct ns2__Register * SOAP_FMAC4 soap_instantiate_ns2__Register(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__Register(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__Register, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns2__Register;
		if (size)
			*size = sizeof(struct ns2__Register);
	}
	else
	{	cp->ptr = (void*)new struct ns2__Register[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns2__Register);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns2__Register*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Register(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__Register %p -> %p\n", q, p));
	*(struct ns2__Register*)p = *(struct ns2__Register*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__RegisterResponse(struct soap *soap, struct ns2__RegisterResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->_return_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__RegisterResponse(struct soap *soap, const struct ns2__RegisterResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons3__ProcessResult(soap, &a->_return_);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__RegisterResponse(struct soap *soap, const struct ns2__RegisterResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__RegisterResponse);
	if (soap_out_ns2__RegisterResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__RegisterResponse(struct soap *soap, const char *tag, int id, const struct ns2__RegisterResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__RegisterResponse), type))
		return soap->error;
	if (soap_out_PointerTons3__ProcessResult(soap, "return", -1, &a->_return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__RegisterResponse * SOAP_FMAC4 soap_get_ns2__RegisterResponse(struct soap *soap, struct ns2__RegisterResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__RegisterResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns2__RegisterResponse * SOAP_FMAC4 soap_in_ns2__RegisterResponse(struct soap *soap, const char *tag, struct ns2__RegisterResponse *a, const char *type)
{
	size_t soap_flag__return_ = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__RegisterResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__RegisterResponse, sizeof(struct ns2__RegisterResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__RegisterResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__return_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons3__ProcessResult(soap, NULL, &a->_return_, "ns3:ProcessResult"))
				{	soap_flag__return_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__RegisterResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__RegisterResponse, 0, sizeof(struct ns2__RegisterResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 struct ns2__RegisterResponse * SOAP_FMAC4 soap_instantiate_ns2__RegisterResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__RegisterResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__RegisterResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns2__RegisterResponse;
		if (size)
			*size = sizeof(struct ns2__RegisterResponse);
	}
	else
	{	cp->ptr = (void*)new struct ns2__RegisterResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns2__RegisterResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns2__RegisterResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__RegisterResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__RegisterResponse %p -> %p\n", q, p));
	*(struct ns2__RegisterResponse*)p = *(struct ns2__RegisterResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__QueryPassword(struct soap *soap, struct ns2__QueryPassword *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->_account);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__QueryPassword(struct soap *soap, const struct ns2__QueryPassword *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->_account);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__QueryPassword(struct soap *soap, const struct ns2__QueryPassword *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__QueryPassword);
	if (soap_out_ns2__QueryPassword(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__QueryPassword(struct soap *soap, const char *tag, int id, const struct ns2__QueryPassword *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__QueryPassword), type))
		return soap->error;
	if (soap_out_string(soap, "account", -1, &a->_account, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__QueryPassword * SOAP_FMAC4 soap_get_ns2__QueryPassword(struct soap *soap, struct ns2__QueryPassword *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__QueryPassword(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns2__QueryPassword * SOAP_FMAC4 soap_in_ns2__QueryPassword(struct soap *soap, const char *tag, struct ns2__QueryPassword *a, const char *type)
{
	size_t soap_flag__account = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__QueryPassword *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__QueryPassword, sizeof(struct ns2__QueryPassword), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__QueryPassword(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__account && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, NULL, &a->_account, "xsd:string"))
				{	soap_flag__account--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__QueryPassword *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__QueryPassword, 0, sizeof(struct ns2__QueryPassword), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 struct ns2__QueryPassword * SOAP_FMAC4 soap_instantiate_ns2__QueryPassword(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__QueryPassword(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__QueryPassword, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns2__QueryPassword;
		if (size)
			*size = sizeof(struct ns2__QueryPassword);
	}
	else
	{	cp->ptr = (void*)new struct ns2__QueryPassword[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns2__QueryPassword);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns2__QueryPassword*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__QueryPassword(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__QueryPassword %p -> %p\n", q, p));
	*(struct ns2__QueryPassword*)p = *(struct ns2__QueryPassword*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__QueryPasswordResponse(struct soap *soap, struct ns2__QueryPasswordResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->_return_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__QueryPasswordResponse(struct soap *soap, const struct ns2__QueryPasswordResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons3__QueryStringResult(soap, &a->_return_);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__QueryPasswordResponse(struct soap *soap, const struct ns2__QueryPasswordResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__QueryPasswordResponse);
	if (soap_out_ns2__QueryPasswordResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__QueryPasswordResponse(struct soap *soap, const char *tag, int id, const struct ns2__QueryPasswordResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__QueryPasswordResponse), type))
		return soap->error;
	if (soap_out_PointerTons3__QueryStringResult(soap, "return", -1, &a->_return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__QueryPasswordResponse * SOAP_FMAC4 soap_get_ns2__QueryPasswordResponse(struct soap *soap, struct ns2__QueryPasswordResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__QueryPasswordResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns2__QueryPasswordResponse * SOAP_FMAC4 soap_in_ns2__QueryPasswordResponse(struct soap *soap, const char *tag, struct ns2__QueryPasswordResponse *a, const char *type)
{
	size_t soap_flag__return_ = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__QueryPasswordResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__QueryPasswordResponse, sizeof(struct ns2__QueryPasswordResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__QueryPasswordResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__return_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons3__QueryStringResult(soap, NULL, &a->_return_, "ns3:QueryStringResult"))
				{	soap_flag__return_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__QueryPasswordResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__QueryPasswordResponse, 0, sizeof(struct ns2__QueryPasswordResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 struct ns2__QueryPasswordResponse * SOAP_FMAC4 soap_instantiate_ns2__QueryPasswordResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__QueryPasswordResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__QueryPasswordResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns2__QueryPasswordResponse;
		if (size)
			*size = sizeof(struct ns2__QueryPasswordResponse);
	}
	else
	{	cp->ptr = (void*)new struct ns2__QueryPasswordResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns2__QueryPasswordResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns2__QueryPasswordResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__QueryPasswordResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__QueryPasswordResponse %p -> %p\n", q, p));
	*(struct ns2__QueryPasswordResponse*)p = *(struct ns2__QueryPasswordResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__QueryAccountBlockHistory(struct soap *soap, struct ns2__QueryAccountBlockHistory *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->_account);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__QueryAccountBlockHistory(struct soap *soap, const struct ns2__QueryAccountBlockHistory *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->_account);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__QueryAccountBlockHistory(struct soap *soap, const struct ns2__QueryAccountBlockHistory *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__QueryAccountBlockHistory);
	if (soap_out_ns2__QueryAccountBlockHistory(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__QueryAccountBlockHistory(struct soap *soap, const char *tag, int id, const struct ns2__QueryAccountBlockHistory *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__QueryAccountBlockHistory), type))
		return soap->error;
	if (soap_out_string(soap, "account", -1, &a->_account, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__QueryAccountBlockHistory * SOAP_FMAC4 soap_get_ns2__QueryAccountBlockHistory(struct soap *soap, struct ns2__QueryAccountBlockHistory *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__QueryAccountBlockHistory(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns2__QueryAccountBlockHistory * SOAP_FMAC4 soap_in_ns2__QueryAccountBlockHistory(struct soap *soap, const char *tag, struct ns2__QueryAccountBlockHistory *a, const char *type)
{
	size_t soap_flag__account = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__QueryAccountBlockHistory *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__QueryAccountBlockHistory, sizeof(struct ns2__QueryAccountBlockHistory), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__QueryAccountBlockHistory(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__account && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, NULL, &a->_account, "xsd:string"))
				{	soap_flag__account--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__QueryAccountBlockHistory *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__QueryAccountBlockHistory, 0, sizeof(struct ns2__QueryAccountBlockHistory), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 struct ns2__QueryAccountBlockHistory * SOAP_FMAC4 soap_instantiate_ns2__QueryAccountBlockHistory(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__QueryAccountBlockHistory(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__QueryAccountBlockHistory, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns2__QueryAccountBlockHistory;
		if (size)
			*size = sizeof(struct ns2__QueryAccountBlockHistory);
	}
	else
	{	cp->ptr = (void*)new struct ns2__QueryAccountBlockHistory[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns2__QueryAccountBlockHistory);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns2__QueryAccountBlockHistory*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__QueryAccountBlockHistory(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__QueryAccountBlockHistory %p -> %p\n", q, p));
	*(struct ns2__QueryAccountBlockHistory*)p = *(struct ns2__QueryAccountBlockHistory*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__QueryAccountBlockHistoryResponse(struct soap *soap, struct ns2__QueryAccountBlockHistoryResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->_return_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__QueryAccountBlockHistoryResponse(struct soap *soap, const struct ns2__QueryAccountBlockHistoryResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons3__QueryAccountBlockHistoryResult(soap, &a->_return_);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__QueryAccountBlockHistoryResponse(struct soap *soap, const struct ns2__QueryAccountBlockHistoryResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__QueryAccountBlockHistoryResponse);
	if (soap_out_ns2__QueryAccountBlockHistoryResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__QueryAccountBlockHistoryResponse(struct soap *soap, const char *tag, int id, const struct ns2__QueryAccountBlockHistoryResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__QueryAccountBlockHistoryResponse), type))
		return soap->error;
	if (soap_out_PointerTons3__QueryAccountBlockHistoryResult(soap, "return", -1, &a->_return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__QueryAccountBlockHistoryResponse * SOAP_FMAC4 soap_get_ns2__QueryAccountBlockHistoryResponse(struct soap *soap, struct ns2__QueryAccountBlockHistoryResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__QueryAccountBlockHistoryResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns2__QueryAccountBlockHistoryResponse * SOAP_FMAC4 soap_in_ns2__QueryAccountBlockHistoryResponse(struct soap *soap, const char *tag, struct ns2__QueryAccountBlockHistoryResponse *a, const char *type)
{
	size_t soap_flag__return_ = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__QueryAccountBlockHistoryResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__QueryAccountBlockHistoryResponse, sizeof(struct ns2__QueryAccountBlockHistoryResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__QueryAccountBlockHistoryResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__return_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons3__QueryAccountBlockHistoryResult(soap, NULL, &a->_return_, "ns3:QueryAccountBlockHistoryResult"))
				{	soap_flag__return_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__QueryAccountBlockHistoryResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__QueryAccountBlockHistoryResponse, 0, sizeof(struct ns2__QueryAccountBlockHistoryResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 struct ns2__QueryAccountBlockHistoryResponse * SOAP_FMAC4 soap_instantiate_ns2__QueryAccountBlockHistoryResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__QueryAccountBlockHistoryResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__QueryAccountBlockHistoryResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns2__QueryAccountBlockHistoryResponse;
		if (size)
			*size = sizeof(struct ns2__QueryAccountBlockHistoryResponse);
	}
	else
	{	cp->ptr = (void*)new struct ns2__QueryAccountBlockHistoryResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns2__QueryAccountBlockHistoryResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns2__QueryAccountBlockHistoryResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__QueryAccountBlockHistoryResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__QueryAccountBlockHistoryResponse %p -> %p\n", q, p));
	*(struct ns2__QueryAccountBlockHistoryResponse*)p = *(struct ns2__QueryAccountBlockHistoryResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__QueryAccountAdultStatus(struct soap *soap, struct ns2__QueryAccountAdultStatus *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->_account);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__QueryAccountAdultStatus(struct soap *soap, const struct ns2__QueryAccountAdultStatus *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->_account);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__QueryAccountAdultStatus(struct soap *soap, const struct ns2__QueryAccountAdultStatus *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__QueryAccountAdultStatus);
	if (soap_out_ns2__QueryAccountAdultStatus(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__QueryAccountAdultStatus(struct soap *soap, const char *tag, int id, const struct ns2__QueryAccountAdultStatus *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__QueryAccountAdultStatus), type))
		return soap->error;
	if (soap_out_string(soap, "account", -1, &a->_account, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__QueryAccountAdultStatus * SOAP_FMAC4 soap_get_ns2__QueryAccountAdultStatus(struct soap *soap, struct ns2__QueryAccountAdultStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__QueryAccountAdultStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns2__QueryAccountAdultStatus * SOAP_FMAC4 soap_in_ns2__QueryAccountAdultStatus(struct soap *soap, const char *tag, struct ns2__QueryAccountAdultStatus *a, const char *type)
{
	size_t soap_flag__account = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__QueryAccountAdultStatus *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__QueryAccountAdultStatus, sizeof(struct ns2__QueryAccountAdultStatus), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__QueryAccountAdultStatus(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__account && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, NULL, &a->_account, "xsd:string"))
				{	soap_flag__account--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__QueryAccountAdultStatus *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__QueryAccountAdultStatus, 0, sizeof(struct ns2__QueryAccountAdultStatus), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 struct ns2__QueryAccountAdultStatus * SOAP_FMAC4 soap_instantiate_ns2__QueryAccountAdultStatus(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__QueryAccountAdultStatus(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__QueryAccountAdultStatus, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns2__QueryAccountAdultStatus;
		if (size)
			*size = sizeof(struct ns2__QueryAccountAdultStatus);
	}
	else
	{	cp->ptr = (void*)new struct ns2__QueryAccountAdultStatus[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns2__QueryAccountAdultStatus);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns2__QueryAccountAdultStatus*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__QueryAccountAdultStatus(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__QueryAccountAdultStatus %p -> %p\n", q, p));
	*(struct ns2__QueryAccountAdultStatus*)p = *(struct ns2__QueryAccountAdultStatus*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__QueryAccountAdultStatusResponse(struct soap *soap, struct ns2__QueryAccountAdultStatusResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->_return_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__QueryAccountAdultStatusResponse(struct soap *soap, const struct ns2__QueryAccountAdultStatusResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons3__AdultStatusResult(soap, &a->_return_);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__QueryAccountAdultStatusResponse(struct soap *soap, const struct ns2__QueryAccountAdultStatusResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__QueryAccountAdultStatusResponse);
	if (soap_out_ns2__QueryAccountAdultStatusResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__QueryAccountAdultStatusResponse(struct soap *soap, const char *tag, int id, const struct ns2__QueryAccountAdultStatusResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__QueryAccountAdultStatusResponse), type))
		return soap->error;
	if (soap_out_PointerTons3__AdultStatusResult(soap, "return", -1, &a->_return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__QueryAccountAdultStatusResponse * SOAP_FMAC4 soap_get_ns2__QueryAccountAdultStatusResponse(struct soap *soap, struct ns2__QueryAccountAdultStatusResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__QueryAccountAdultStatusResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ns2__QueryAccountAdultStatusResponse * SOAP_FMAC4 soap_in_ns2__QueryAccountAdultStatusResponse(struct soap *soap, const char *tag, struct ns2__QueryAccountAdultStatusResponse *a, const char *type)
{
	size_t soap_flag__return_ = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__QueryAccountAdultStatusResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__QueryAccountAdultStatusResponse, sizeof(struct ns2__QueryAccountAdultStatusResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__QueryAccountAdultStatusResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__return_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons3__AdultStatusResult(soap, NULL, &a->_return_, "ns3:AdultStatusResult"))
				{	soap_flag__return_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__QueryAccountAdultStatusResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__QueryAccountAdultStatusResponse, 0, sizeof(struct ns2__QueryAccountAdultStatusResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 struct ns2__QueryAccountAdultStatusResponse * SOAP_FMAC4 soap_instantiate_ns2__QueryAccountAdultStatusResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__QueryAccountAdultStatusResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__QueryAccountAdultStatusResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct ns2__QueryAccountAdultStatusResponse;
		if (size)
			*size = sizeof(struct ns2__QueryAccountAdultStatusResponse);
	}
	else
	{	cp->ptr = (void*)new struct ns2__QueryAccountAdultStatusResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns2__QueryAccountAdultStatusResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns2__QueryAccountAdultStatusResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__QueryAccountAdultStatusResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__QueryAccountAdultStatusResponse %p -> %p\n", q, p));
	*(struct ns2__QueryAccountAdultStatusResponse*)p = *(struct ns2__QueryAccountAdultStatusResponse*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns2__Exception_ = NULL;
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__Exception(soap, &a->ns2__Exception_);
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_out_PointerTons2__Exception(soap, "ns2:Exception", -1, &a->ns2__Exception_, ""))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag_ns2__Exception_ = 1;
	size_t soap_flag_fault = 1;
	size_t soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns2__Exception_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__Exception(soap, "ns2:Exception", &a->ns2__Exception_, "ns2:Exception"))
				{	soap_flag_ns2__Exception_--;
					continue;
				}
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_fault > 1))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail;
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__RegisterResponse(struct soap *soap, _ns1__RegisterResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__RegisterResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__RegisterResponse(struct soap *soap, _ns1__RegisterResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__RegisterResponse);
	if (soap_out_PointerTo_ns1__RegisterResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__RegisterResponse(struct soap *soap, const char *tag, int id, _ns1__RegisterResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__RegisterResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__RegisterResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__RegisterResponse(struct soap *soap, _ns1__RegisterResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__RegisterResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__RegisterResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__RegisterResponse(struct soap *soap, const char *tag, _ns1__RegisterResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__RegisterResponse **)soap_malloc(soap, sizeof(_ns1__RegisterResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__RegisterResponse *)soap_instantiate__ns1__RegisterResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__RegisterResponse ** p = (_ns1__RegisterResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__RegisterResponse, sizeof(_ns1__RegisterResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Register(struct soap *soap, _ns1__Register *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__Register))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Register(struct soap *soap, _ns1__Register *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__Register);
	if (soap_out_PointerTo_ns1__Register(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Register(struct soap *soap, const char *tag, int id, _ns1__Register *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__Register);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__Register ** SOAP_FMAC4 soap_get_PointerTo_ns1__Register(struct soap *soap, _ns1__Register **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__Register(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__Register ** SOAP_FMAC4 soap_in_PointerTo_ns1__Register(struct soap *soap, const char *tag, _ns1__Register **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__Register **)soap_malloc(soap, sizeof(_ns1__Register *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__Register *)soap_instantiate__ns1__Register(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__Register ** p = (_ns1__Register **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__Register, sizeof(_ns1__Register), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ProcessResult(struct soap *soap, ns3__ProcessResult *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__ProcessResult))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ProcessResult(struct soap *soap, ns3__ProcessResult *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__ProcessResult);
	if (soap_out_PointerTons3__ProcessResult(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ProcessResult(struct soap *soap, const char *tag, int id, ns3__ProcessResult *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__ProcessResult);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__ProcessResult ** SOAP_FMAC4 soap_get_PointerTons3__ProcessResult(struct soap *soap, ns3__ProcessResult **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__ProcessResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns3__ProcessResult ** SOAP_FMAC4 soap_in_PointerTons3__ProcessResult(struct soap *soap, const char *tag, ns3__ProcessResult **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__ProcessResult **)soap_malloc(soap, sizeof(ns3__ProcessResult *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__ProcessResult *)soap_instantiate_ns3__ProcessResult(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__ProcessResult ** p = (ns3__ProcessResult **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__ProcessResult, sizeof(ns3__ProcessResult), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__QueryStringResult(struct soap *soap, ns3__QueryStringResult *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__QueryStringResult))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__QueryStringResult(struct soap *soap, ns3__QueryStringResult *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__QueryStringResult);
	if (soap_out_PointerTons3__QueryStringResult(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__QueryStringResult(struct soap *soap, const char *tag, int id, ns3__QueryStringResult *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__QueryStringResult);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__QueryStringResult ** SOAP_FMAC4 soap_get_PointerTons3__QueryStringResult(struct soap *soap, ns3__QueryStringResult **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__QueryStringResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns3__QueryStringResult ** SOAP_FMAC4 soap_in_PointerTons3__QueryStringResult(struct soap *soap, const char *tag, ns3__QueryStringResult **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__QueryStringResult **)soap_malloc(soap, sizeof(ns3__QueryStringResult *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__QueryStringResult *)soap_instantiate_ns3__QueryStringResult(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__QueryStringResult ** p = (ns3__QueryStringResult **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__QueryStringResult, sizeof(ns3__QueryStringResult), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__QueryAccountBlockHistoryResult(struct soap *soap, ns3__QueryAccountBlockHistoryResult *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__QueryAccountBlockHistoryResult))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__QueryAccountBlockHistoryResult(struct soap *soap, ns3__QueryAccountBlockHistoryResult *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__QueryAccountBlockHistoryResult);
	if (soap_out_PointerTons3__QueryAccountBlockHistoryResult(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__QueryAccountBlockHistoryResult(struct soap *soap, const char *tag, int id, ns3__QueryAccountBlockHistoryResult *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__QueryAccountBlockHistoryResult);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__QueryAccountBlockHistoryResult ** SOAP_FMAC4 soap_get_PointerTons3__QueryAccountBlockHistoryResult(struct soap *soap, ns3__QueryAccountBlockHistoryResult **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__QueryAccountBlockHistoryResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns3__QueryAccountBlockHistoryResult ** SOAP_FMAC4 soap_in_PointerTons3__QueryAccountBlockHistoryResult(struct soap *soap, const char *tag, ns3__QueryAccountBlockHistoryResult **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__QueryAccountBlockHistoryResult **)soap_malloc(soap, sizeof(ns3__QueryAccountBlockHistoryResult *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__QueryAccountBlockHistoryResult *)soap_instantiate_ns3__QueryAccountBlockHistoryResult(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__QueryAccountBlockHistoryResult ** p = (ns3__QueryAccountBlockHistoryResult **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__QueryAccountBlockHistoryResult, sizeof(ns3__QueryAccountBlockHistoryResult), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__AdultStatusResult(struct soap *soap, ns3__AdultStatusResult *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__AdultStatusResult))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__AdultStatusResult(struct soap *soap, ns3__AdultStatusResult *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__AdultStatusResult);
	if (soap_out_PointerTons3__AdultStatusResult(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__AdultStatusResult(struct soap *soap, const char *tag, int id, ns3__AdultStatusResult *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__AdultStatusResult);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__AdultStatusResult ** SOAP_FMAC4 soap_get_PointerTons3__AdultStatusResult(struct soap *soap, ns3__AdultStatusResult **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__AdultStatusResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns3__AdultStatusResult ** SOAP_FMAC4 soap_in_PointerTons3__AdultStatusResult(struct soap *soap, const char *tag, ns3__AdultStatusResult **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__AdultStatusResult **)soap_malloc(soap, sizeof(ns3__AdultStatusResult *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__AdultStatusResult *)soap_instantiate_ns3__AdultStatusResult(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__AdultStatusResult ** p = (ns3__AdultStatusResult **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__AdultStatusResult, sizeof(ns3__AdultStatusResult), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Exception(struct soap *soap, ns2__Exception *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__Exception))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Exception(struct soap *soap, ns2__Exception *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons2__Exception);
	if (soap_out_PointerTons2__Exception(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Exception(struct soap *soap, const char *tag, int id, ns2__Exception *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__Exception);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns2__Exception ** SOAP_FMAC4 soap_get_PointerTons2__Exception(struct soap *soap, ns2__Exception **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__Exception(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns2__Exception ** SOAP_FMAC4 soap_in_PointerTons2__Exception(struct soap *soap, const char *tag, ns2__Exception **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns2__Exception **)soap_malloc(soap, sizeof(ns2__Exception *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns2__Exception *)soap_instantiate_ns2__Exception(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns2__Exception ** p = (ns2__Exception **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__Exception, sizeof(ns2__Exception), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons3__BlockRecord(struct soap *soap, ns3__BlockRecord **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTons3__BlockRecord))
		soap_serialize_PointerTons3__BlockRecord(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons3__BlockRecord(struct soap *soap, ns3__BlockRecord **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToPointerTons3__BlockRecord);
	if (soap_out_PointerToPointerTons3__BlockRecord(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons3__BlockRecord(struct soap *soap, const char *tag, int id, ns3__BlockRecord **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTons3__BlockRecord);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTons3__BlockRecord(soap, tag, id, *a, type);
}

SOAP_FMAC3 ns3__BlockRecord *** SOAP_FMAC4 soap_get_PointerToPointerTons3__BlockRecord(struct soap *soap, ns3__BlockRecord ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTons3__BlockRecord(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns3__BlockRecord *** SOAP_FMAC4 soap_in_PointerToPointerTons3__BlockRecord(struct soap *soap, const char *tag, ns3__BlockRecord ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__BlockRecord ***)soap_malloc(soap, sizeof(ns3__BlockRecord **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTons3__BlockRecord(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (ns3__BlockRecord ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PointerTons3__BlockRecord, sizeof(ns3__BlockRecord *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__BlockRecord(struct soap *soap, ns3__BlockRecord *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__BlockRecord))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__BlockRecord(struct soap *soap, ns3__BlockRecord *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons3__BlockRecord);
	if (soap_out_PointerTons3__BlockRecord(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__BlockRecord(struct soap *soap, const char *tag, int id, ns3__BlockRecord *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__BlockRecord);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns3__BlockRecord ** SOAP_FMAC4 soap_get_PointerTons3__BlockRecord(struct soap *soap, ns3__BlockRecord **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__BlockRecord(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns3__BlockRecord ** SOAP_FMAC4 soap_in_PointerTons3__BlockRecord(struct soap *soap, const char *tag, ns3__BlockRecord **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__BlockRecord **)soap_malloc(soap, sizeof(ns3__BlockRecord *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__BlockRecord *)soap_instantiate_ns3__BlockRecord(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns3__BlockRecord ** p = (ns3__BlockRecord **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__BlockRecord, sizeof(ns3__BlockRecord), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__GameAutoActivateResult(struct soap *soap, ns1__GameAutoActivateResult *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__GameAutoActivateResult))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__GameAutoActivateResult(struct soap *soap, ns1__GameAutoActivateResult *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__GameAutoActivateResult);
	if (soap_out_PointerTons1__GameAutoActivateResult(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__GameAutoActivateResult(struct soap *soap, const char *tag, int id, ns1__GameAutoActivateResult *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__GameAutoActivateResult);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__GameAutoActivateResult ** SOAP_FMAC4 soap_get_PointerTons1__GameAutoActivateResult(struct soap *soap, ns1__GameAutoActivateResult **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__GameAutoActivateResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__GameAutoActivateResult ** SOAP_FMAC4 soap_in_PointerTons1__GameAutoActivateResult(struct soap *soap, const char *tag, ns1__GameAutoActivateResult **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__GameAutoActivateResult **)soap_malloc(soap, sizeof(ns1__GameAutoActivateResult *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__GameAutoActivateResult *)soap_instantiate_ns1__GameAutoActivateResult(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__GameAutoActivateResult ** p = (ns1__GameAutoActivateResult **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__GameAutoActivateResult, sizeof(ns1__GameAutoActivateResult), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, -1, -1);
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, -1, -1);
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */

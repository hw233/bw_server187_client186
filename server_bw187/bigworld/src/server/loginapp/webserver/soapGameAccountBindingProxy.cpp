/* soapGameAccountBindingProxy.cpp
   Generated by gSOAP 2.7.13 from Register.h
   Copyright(C) 2000-2009, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "soapGameAccountBindingProxy.h"

GameAccountBindingProxy::GameAccountBindingProxy()
{
    GameAccountBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
    serverAdd_ = "http://172.16.1.13:8080";
}

GameAccountBindingProxy::GameAccountBindingProxy(const struct soap &soap)
{	soap_copy_context(this, &soap);
	GameAccountBindingProxy_init(soap.imode, soap.omode);
}

GameAccountBindingProxy::GameAccountBindingProxy(soap_mode iomode)
{	GameAccountBindingProxy_init(iomode, iomode);
}

GameAccountBindingProxy::GameAccountBindingProxy(soap_mode imode, soap_mode omode)
{	GameAccountBindingProxy_init(imode, omode);
}

void GameAccountBindingProxy::GameAccountBindingProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns3", "htpp://www.cogame.cn", NULL, NULL},
	{"ns2", "http://service.cogame.cn/", NULL, NULL},
	{"ns4", "http://www.gyyx.cn/AutoActivateSoap", NULL, NULL},
	{"ns1", "http://www.gyyx.cn/", NULL, NULL},
	{"ns5", "http://www.gyyx.cn/AutoActivateSoap12", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	if (!this->namespaces)
		this->namespaces = namespaces;
}

GameAccountBindingProxy::~GameAccountBindingProxy()
{ }

void GameAccountBindingProxy::soap_noheader()
{	header = NULL;
}

const SOAP_ENV__Fault *GameAccountBindingProxy::soap_fault()
{	return this->fault;
}

const char *GameAccountBindingProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *GameAccountBindingProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int GameAccountBindingProxy::soap_close_socket()
{	return soap_closesock(this);
}

void GameAccountBindingProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
void GameAccountBindingProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}

char *GameAccountBindingProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int GameAccountBindingProxy::QueryAccountAdultStatus(char *_account, struct ns2__QueryAccountAdultStatusResponse &_param_1)
{	struct soap *soap = this;
	struct ns2__QueryAccountAdultStatus soap_tmp_ns2__QueryAccountAdultStatus;
	const char *soap_action = NULL;
    char addr[1024];
	if (!soap_endpoint)
    {
        memset(addr,0x0,1024);
        sprintf(addr, "%s/GameService/GameAccount", serverAdd_.c_str() );
		soap_endpoint = addr;
    }
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_ns2__QueryAccountAdultStatus._account = _account;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns2__QueryAccountAdultStatus(soap, &soap_tmp_ns2__QueryAccountAdultStatus);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__QueryAccountAdultStatus(soap, &soap_tmp_ns2__QueryAccountAdultStatus, "ns2:QueryAccountAdultStatus", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__QueryAccountAdultStatus(soap, &soap_tmp_ns2__QueryAccountAdultStatus, "ns2:QueryAccountAdultStatus", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_1)
		return soap_closesock(soap);
	soap_default_ns2__QueryAccountAdultStatusResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns2__QueryAccountAdultStatusResponse(soap, &_param_1, "ns2:QueryAccountAdultStatusResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GameAccountBindingProxy::QueryAccountBlockHistory(char *_account, struct ns2__QueryAccountBlockHistoryResponse &_param_2)
{	struct soap *soap = this;
	struct ns2__QueryAccountBlockHistory soap_tmp_ns2__QueryAccountBlockHistory;
	const char *soap_action = NULL;
    char addr[1024];
	if (!soap_endpoint)
    {
        memset(addr,0x0,1024);
        sprintf(addr, "%s/GameService/GameAccount", serverAdd_.c_str() );
		soap_endpoint = addr;
    }
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_ns2__QueryAccountBlockHistory._account = _account;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns2__QueryAccountBlockHistory(soap, &soap_tmp_ns2__QueryAccountBlockHistory);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__QueryAccountBlockHistory(soap, &soap_tmp_ns2__QueryAccountBlockHistory, "ns2:QueryAccountBlockHistory", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__QueryAccountBlockHistory(soap, &soap_tmp_ns2__QueryAccountBlockHistory, "ns2:QueryAccountBlockHistory", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_2)
		return soap_closesock(soap);
	soap_default_ns2__QueryAccountBlockHistoryResponse(soap, &_param_2);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns2__QueryAccountBlockHistoryResponse(soap, &_param_2, "ns2:QueryAccountBlockHistoryResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GameAccountBindingProxy::QueryPassword(char *_account, struct ns2__QueryPasswordResponse &_param_3)
{	struct soap *soap = this;
	struct ns2__QueryPassword soap_tmp_ns2__QueryPassword;
	const char *soap_action = NULL;
    char addr[1024];
	if (!soap_endpoint)
    {
        memset(addr,0x0,1024);
        sprintf(addr, "%s/GameService/GameAccount", serverAdd_.c_str() );
		soap_endpoint = addr;
    }
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_ns2__QueryPassword._account = _account;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns2__QueryPassword(soap, &soap_tmp_ns2__QueryPassword);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__QueryPassword(soap, &soap_tmp_ns2__QueryPassword, "ns2:QueryPassword", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__QueryPassword(soap, &soap_tmp_ns2__QueryPassword, "ns2:QueryPassword", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_3)
		return soap_closesock(soap);
	soap_default_ns2__QueryPasswordResponse(soap, &_param_3);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns2__QueryPasswordResponse(soap, &_param_3, "ns2:QueryPasswordResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GameAccountBindingProxy::Register(char *_uinfo, struct ns2__RegisterResponse &_param_4)
{	struct soap *soap = this;
	struct ns2__Register soap_tmp_ns2__Register;
	const char *soap_action = NULL;
    char addr[1024];
	if (!soap_endpoint)
    {
        memset(addr,0x0,1024);
        sprintf(addr, "%s/GameService/GameAccount", serverAdd_.c_str() );
		soap_endpoint = addr;
    }

	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_ns2__Register._uinfo = _uinfo;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns2__Register(soap, &soap_tmp_ns2__Register);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__Register(soap, &soap_tmp_ns2__Register, "ns2:Register", "")
		 || soap_body_end_out(soap)
		|| soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__Register(soap, &soap_tmp_ns2__Register, "ns2:Register", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_4)
		return soap_closesock(soap);
	soap_default_ns2__RegisterResponse(soap, &_param_4);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns2__RegisterResponse(soap, &_param_4, "ns2:RegisterResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GameAccountBindingProxy::Resume(char *_account, char *_reason, struct ns2__ResumeResponse &_param_5)
{	struct soap *soap = this;
	struct ns2__Resume soap_tmp_ns2__Resume;
	const char *soap_action = NULL;
    char addr[1024];
	if (!soap_endpoint)
    {
        memset(addr,0x0,1024);
        sprintf(addr, "%s/GameService/GameAccount", serverAdd_.c_str() );
		soap_endpoint = addr;
    }
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_ns2__Resume._account = _account;
	soap_tmp_ns2__Resume._reason = _reason;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns2__Resume(soap, &soap_tmp_ns2__Resume);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__Resume(soap, &soap_tmp_ns2__Resume, "ns2:Resume", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__Resume(soap, &soap_tmp_ns2__Resume, "ns2:Resume", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_5)
		return soap_closesock(soap);
	soap_default_ns2__ResumeResponse(soap, &_param_5);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns2__ResumeResponse(soap, &_param_5, "ns2:ResumeResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GameAccountBindingProxy::SetAdult(char *_account, int _adult, struct ns2__SetAdultResponse &_param_6)
{	struct soap *soap = this;
	struct ns2__SetAdult soap_tmp_ns2__SetAdult;
	const char *soap_action = NULL;
    char addr[1024];
	if (!soap_endpoint)
    {
        memset(addr,0x0,1024);
        sprintf(addr, "%s/GameService/GameAccount", serverAdd_.c_str() );
		soap_endpoint = addr;
    }
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_ns2__SetAdult._account = _account;
	soap_tmp_ns2__SetAdult._adult = _adult;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns2__SetAdult(soap, &soap_tmp_ns2__SetAdult);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__SetAdult(soap, &soap_tmp_ns2__SetAdult, "ns2:SetAdult", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__SetAdult(soap, &soap_tmp_ns2__SetAdult, "ns2:SetAdult", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_6)
		return soap_closesock(soap);
	soap_default_ns2__SetAdultResponse(soap, &_param_6);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns2__SetAdultResponse(soap, &_param_6, "ns2:SetAdultResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GameAccountBindingProxy::Suspend(char *_account, char *_reason, struct ns2__SuspendResponse &_param_7)
{	struct soap *soap = this;
	struct ns2__Suspend soap_tmp_ns2__Suspend;
	const char *soap_action = NULL;
    char addr[1024];
	if (!soap_endpoint)
    {
        memset(addr,0x0,1024);
        sprintf(addr, "%s/GameService/GameAccount", serverAdd_.c_str() );
		soap_endpoint = addr;
    }
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_ns2__Suspend._account = _account;
	soap_tmp_ns2__Suspend._reason = _reason;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns2__Suspend(soap, &soap_tmp_ns2__Suspend);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__Suspend(soap, &soap_tmp_ns2__Suspend, "ns2:Suspend", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__Suspend(soap, &soap_tmp_ns2__Suspend, "ns2:Suspend", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_7)
		return soap_closesock(soap);
	soap_default_ns2__SuspendResponse(soap, &_param_7);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns2__SuspendResponse(soap, &_param_7, "ns2:SuspendResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GameAccountBindingProxy::UpdatePassword(char *_account, char *_newPassword, struct ns2__UpdatePasswordResponse &_param_8)
{	struct soap *soap = this;
	struct ns2__UpdatePassword soap_tmp_ns2__UpdatePassword;
	const char *soap_action = NULL;
    char addr[1024];
	if (!soap_endpoint)
    {
        memset(addr,0x0,1024);
        sprintf(addr, "%s/GameService/GameAccount", serverAdd_.c_str() );
		soap_endpoint = addr;
    }
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_ns2__UpdatePassword._account = _account;
	soap_tmp_ns2__UpdatePassword._newPassword = _newPassword;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns2__UpdatePassword(soap, &soap_tmp_ns2__UpdatePassword);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__UpdatePassword(soap, &soap_tmp_ns2__UpdatePassword, "ns2:UpdatePassword", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__UpdatePassword(soap, &soap_tmp_ns2__UpdatePassword, "ns2:UpdatePassword", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_8)
		return soap_closesock(soap);
	soap_default_ns2__UpdatePasswordResponse(soap, &_param_8);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns2__UpdatePasswordResponse(soap, &_param_8, "ns2:UpdatePasswordResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */

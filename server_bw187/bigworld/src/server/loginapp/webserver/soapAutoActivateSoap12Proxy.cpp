/* soapAutoActivateSoap12Proxy.cpp
   Generated by gSOAP 2.7.13 from Register.h
   Copyright(C) 2000-2009, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "soapAutoActivateSoap12Proxy.h"

AutoActivateSoap12Proxy::AutoActivateSoap12Proxy()
{	
    AutoActivateSoap12Proxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

AutoActivateSoap12Proxy::AutoActivateSoap12Proxy(const struct soap &soap)
{	soap_copy_context(this, &soap);
	AutoActivateSoap12Proxy_init(soap.imode, soap.omode);
}

AutoActivateSoap12Proxy::AutoActivateSoap12Proxy(soap_mode iomode)
{	AutoActivateSoap12Proxy_init(iomode, iomode);
}

AutoActivateSoap12Proxy::AutoActivateSoap12Proxy(soap_mode imode, soap_mode omode)
{	AutoActivateSoap12Proxy_init(imode, omode);
}

void AutoActivateSoap12Proxy::AutoActivateSoap12Proxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns3", "htpp://www.cogame.cn", NULL, NULL},
	{"ns2", "http://service.cogame.cn/", NULL, NULL},
	{"ns4", "http://www.gyyx.cn/AutoActivateSoap", NULL, NULL},
	{"ns1", "http://www.gyyx.cn/", NULL, NULL},
	{"ns5", "http://www.gyyx.cn/AutoActivateSoap12", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	if (!this->namespaces)
		this->namespaces = namespaces;
    serverAdd_ = "";
}

AutoActivateSoap12Proxy::~AutoActivateSoap12Proxy()
{ }

void AutoActivateSoap12Proxy::soap_noheader()
{	header = NULL;
}

const SOAP_ENV__Fault *AutoActivateSoap12Proxy::soap_fault()
{	return this->fault;
}

const char *AutoActivateSoap12Proxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *AutoActivateSoap12Proxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int AutoActivateSoap12Proxy::soap_close_socket()
{	return soap_closesock(this);
}

void AutoActivateSoap12Proxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
void AutoActivateSoap12Proxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}

char *AutoActivateSoap12Proxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int AutoActivateSoap12Proxy::Register(_ns1__Register *ns1__Register, _ns1__RegisterResponse *ns1__RegisterResponse)
{	struct soap *soap = this;
	struct __ns5__Register soap_tmp___ns5__Register;
	const char *soap_action = NULL;
    char addr[1024];
	if (!soap_endpoint)
    {
        memset(addr,0x00,1024);
        sprintf(addr, "%s/CsServiceV2/AutoActivate.asmx", serverAdd_.c_str() );
		soap_endpoint = addr;
    }

	soap_action = "http://www.gyyx.cn/Register";
	soap->encodingStyle = NULL;
	soap_tmp___ns5__Register.ns1__Register = ns1__Register;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns5__Register(soap, &soap_tmp___ns5__Register);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns5__Register(soap, &soap_tmp___ns5__Register, "-ns5:Register", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns5__Register(soap, &soap_tmp___ns5__Register, "-ns5:Register", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RegisterResponse)
		return soap_closesock(soap);
	ns1__RegisterResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RegisterResponse->soap_get(soap, "ns1:RegisterResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */

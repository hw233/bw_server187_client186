!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
ADDR	.\vdbe.h	155;"	d
AGGREGATE	.\sqliteInt.h	1005;"	d
ALWAYS	.\fts3Int.h	80;"	d
ALWAYS	.\sqliteInt.h	265;"	d
ALWAYS	.\sqliteInt.h	268;"	d
ALWAYS	.\sqliteInt.h	271;"	d
AdjustTree	.\rtree.c	/^static void AdjustTree($/;"	f	file:
AggInfo	.\sqliteInt.h	/^struct AggInfo {$/;"	s
AggInfo	.\sqliteInt.h	/^typedef struct AggInfo AggInfo;$/;"	t	typeref:struct:AggInfo
AggInfo_col	.\sqliteInt.h	/^  struct AggInfo_col {    \/* For each column used in source tables *\/$/;"	s	struct:AggInfo
AggInfo_func	.\sqliteInt.h	/^  struct AggInfo_func {   \/* For each aggregate function *\/$/;"	s	struct:AggInfo
AreFileApisANSI	.\os_win.c	75;"	d	file:
Argv0	.\shell.c	/^static char *Argv0;$/;"	v	file:
ArraySize	.\shell.c	450;"	d	file:
ArraySize	.\sqliteInt.h	535;"	d
AssignCells	.\rtree.c	45;"	d	file:
AssignCells	.\rtree.c	50;"	d	file:
AssignCells	.\rtree.c	53;"	d	file:
AttachKey	.\parse.c	/^struct AttachKey { int type;  Token key; };$/;"	s	file:
AuthContext	.\sqliteInt.h	/^struct AuthContext {$/;"	s
AuthContext	.\sqliteInt.h	/^typedef struct AuthContext AuthContext;$/;"	t	typeref:struct:AuthContext
AutoincInfo	.\sqliteInt.h	/^struct AutoincInfo {$/;"	s
AutoincInfo	.\sqliteInt.h	/^typedef struct AutoincInfo AutoincInfo;$/;"	t	typeref:struct:AutoincInfo
AuxData	.\vdbeInt.h	/^  struct AuxData {$/;"	s	struct:VdbeFunc
BEGIN_TIMER	.\shell.c	108;"	d	file:
BEGIN_TIMER	.\shell.c	183;"	d	file:
BEGIN_TIMER	.\shell.c	188;"	d	file:
BITVEC_HASH	.\bitvec.c	67;"	d	file:
BITVEC_MXHASH	.\bitvec.c	62;"	d	file:
BITVEC_NBIT	.\bitvec.c	56;"	d	file:
BITVEC_NELEM	.\bitvec.c	54;"	d	file:
BITVEC_NINT	.\bitvec.c	59;"	d	file:
BITVEC_NPTR	.\bitvec.c	69;"	d	file:
BITVEC_SZ	.\bitvec.c	40;"	d	file:
BITVEC_SZELEM	.\bitvec.c	52;"	d	file:
BITVEC_TELEM	.\bitvec.c	50;"	d	file:
BITVEC_USIZE	.\bitvec.c	44;"	d	file:
BMS	.\sqliteInt.h	1762;"	d
BTCURSOR_MAX_DEPTH	.\btreeInt.h	467;"	d
BTREE_AUTOVACUUM_FULL	.\btree.h	33;"	d
BTREE_AUTOVACUUM_INCR	.\btree.h	34;"	d
BTREE_AUTOVACUUM_NONE	.\btree.h	32;"	d
BTREE_CREATE	.\btree.h	75;"	d
BTREE_DEFAULT_CACHE_SIZE	.\btree.h	139;"	d
BTREE_FILE_FORMAT	.\btree.h	138;"	d
BTREE_FREE_PAGE_COUNT	.\btree.h	136;"	d
BTREE_INCR_VACUUM	.\btree.h	143;"	d
BTREE_INTKEY	.\btree.h	113;"	d
BTREE_LARGEST_ROOT_PAGE	.\btree.h	140;"	d
BTREE_LEAFDATA	.\btree.h	115;"	d
BTREE_MEMORY	.\btree.h	72;"	d
BTREE_NO_READLOCK	.\btree.h	71;"	d
BTREE_OMIT_JOURNAL	.\btree.h	70;"	d
BTREE_READONLY	.\btree.h	73;"	d
BTREE_READWRITE	.\btree.h	74;"	d
BTREE_SCHEMA_VERSION	.\btree.h	137;"	d
BTREE_TEXT_ENCODING	.\btree.h	141;"	d
BTREE_USER_VERSION	.\btree.h	142;"	d
BTREE_ZERODATA	.\btree.h	114;"	d
BYTESWAP32	.\wal.c	550;"	d	file:
BenignMallocHooks	.\fault.c	/^static SQLITE_WSD struct BenignMallocHooks {$/;"	s	file:
BenignMallocHooks	.\fault.c	/^typedef struct BenignMallocHooks BenignMallocHooks;$/;"	t	typeref:struct:BenignMallocHooks	file:
Bitmask	.\sqliteInt.h	/^typedef u64 Bitmask;$/;"	t
Bitvec	.\bitvec.c	/^struct Bitvec {$/;"	s	file:
Bitvec	.\sqliteInt.h	/^typedef struct Bitvec Bitvec;$/;"	t	typeref:struct:Bitvec
Bool	.\vdbeInt.h	/^typedef unsigned char Bool;$/;"	t
BtCursor	.\btree.h	/^typedef struct BtCursor BtCursor;$/;"	t	typeref:struct:BtCursor
BtCursor	.\btreeInt.h	/^struct BtCursor {$/;"	s
BtLock	.\btreeInt.h	/^struct BtLock {$/;"	s
BtLock	.\btreeInt.h	/^typedef struct BtLock BtLock;$/;"	t	typeref:struct:BtLock
BtShared	.\btree.h	/^typedef struct BtShared BtShared;$/;"	t	typeref:struct:BtShared
BtShared	.\btreeInt.h	/^struct BtShared {$/;"	s
Btree	.\btree.h	/^typedef struct Btree Btree;$/;"	t	typeref:struct:Btree
Btree	.\btreeInt.h	/^struct Btree {$/;"	s
BtreeMutexArray	.\btree.h	/^struct BtreeMutexArray {$/;"	s
BtreeMutexArray	.\btree.h	/^typedef struct BtreeMutexArray BtreeMutexArray;$/;"	t	typeref:struct:BtreeMutexArray
BusyHandler	.\sqliteInt.h	/^struct BusyHandler {$/;"	s
BusyHandler	.\sqliteInt.h	/^typedef struct BusyHandler BusyHandler;$/;"	t	typeref:struct:BusyHandler
ByteRangeLockPB2	.\os_unix.c	/^struct ByteRangeLockPB2$/;"	s	file:
CACHE_STALE	.\vdbeInt.h	126;"	d
CHECK_FOR_INTERRUPT	.\vdbe.c	480;"	d	file:
CHECK_PAGE	.\pager.c	1161;"	d	file:
CHECK_PAGE	.\pager.c	1172;"	d	file:
CLEARBIT	.\bitvec.c	300;"	d	file:
CODEC1	.\pager.c	413;"	d	file:
CODEC1	.\pager.c	419;"	d	file:
CODEC2	.\pager.c	415;"	d	file:
CODEC2	.\pager.c	420;"	d	file:
COLNAME_COLUMN	.\vdbe.h	138;"	d
COLNAME_DATABASE	.\vdbe.h	136;"	d
COLNAME_DECLTYPE	.\vdbe.h	135;"	d
COLNAME_N	.\vdbe.h	140;"	d
COLNAME_N	.\vdbe.h	143;"	d
COLNAME_N	.\vdbe.h	145;"	d
COLNAME_NAME	.\vdbe.h	134;"	d
COLNAME_TABLE	.\vdbe.h	137;"	d
COLUMN_MASK	.\fkey.c	825;"	d	file:
CTIMEOPT_VAL	.\ctime.c	34;"	d	file:
CTIMEOPT_VAL_	.\ctime.c	33;"	d	file:
CTRL_FREE	.\mem5.c	84;"	d	file:
CTRL_LOGSIZE	.\mem5.c	83;"	d	file:
CURSOR_FAULT	.\btreeInt.h	535;"	d
CURSOR_INVALID	.\btreeInt.h	532;"	d
CURSOR_REQUIRESEEK	.\btreeInt.h	534;"	d
CURSOR_VALID	.\btreeInt.h	533;"	d
CellInfo	.\btreeInt.h	/^struct CellInfo {$/;"	s
CellInfo	.\btreeInt.h	/^typedef struct CellInfo CellInfo;$/;"	t	typeref:struct:CellInfo
ChooseLeaf	.\rtree.c	/^static int ChooseLeaf($/;"	f	file:
Cleanup	.\vdbeaux.c	/^static void Cleanup(Vdbe *p){$/;"	f	file:
CollSeq	.\sqliteInt.h	/^struct CollSeq {$/;"	s
CollSeq	.\sqliteInt.h	/^typedef struct CollSeq CollSeq;$/;"	t	typeref:struct:CollSeq
Column	.\sqliteInt.h	/^struct Column {$/;"	s
Column	.\sqliteInt.h	/^typedef struct Column Column;$/;"	t	typeref:struct:Column
CountCtx	.\func.c	/^struct CountCtx {$/;"	s	file:
CountCtx	.\func.c	/^typedef struct CountCtx CountCtx;$/;"	t	typeref:struct:CountCtx	file:
D	.\date.c	/^  int Y, M, D;       \/* Year, month, and day *\/$/;"	m	struct:DateTime	file:
DB_Empty	.\sqliteInt.h	699;"	d
DB_SchemaLoaded	.\sqliteInt.h	697;"	d
DB_UnresetViews	.\sqliteInt.h	698;"	d
DCOORD	.\rtree.c	169;"	d	file:
DIRECT_MODE	.\pager.c	5491;"	d	file:
DOTLOCK_SUFFIX	.\os_unix.c	1534;"	d	file:
DO_OS_MALLOC_TEST	.\os.c	39;"	d	file:
DO_OS_MALLOC_TEST	.\os.c	46;"	d	file:
DateTime	.\date.c	/^struct DateTime {$/;"	s	file:
DateTime	.\date.c	/^typedef struct DateTime DateTime;$/;"	t	typeref:struct:DateTime	file:
Db	.\sqliteInt.h	/^struct Db {$/;"	s
Db	.\sqliteInt.h	/^typedef struct Db Db;$/;"	t	typeref:struct:Db
DbBusyHandler	.\tclsqlite.c	/^static int DbBusyHandler(void *cd, int nTries){$/;"	f	file:
DbClearProperty	.\sqliteInt.h	685;"	d
DbCommitHandler	.\tclsqlite.c	/^static int DbCommitHandler(void *cd){$/;"	f	file:
DbDeleteCmd	.\tclsqlite.c	/^static void DbDeleteCmd(void *db){$/;"	f	file:
DbEvalContext	.\tclsqlite.c	/^struct DbEvalContext {$/;"	s	file:
DbEvalContext	.\tclsqlite.c	/^typedef struct DbEvalContext DbEvalContext;$/;"	t	typeref:struct:DbEvalContext	file:
DbEvalNextCmd	.\tclsqlite.c	/^static int DbEvalNextCmd($/;"	f	file:
DbFixer	.\sqliteInt.h	/^struct DbFixer {$/;"	s
DbFixer	.\sqliteInt.h	/^typedef struct DbFixer DbFixer;$/;"	t	typeref:struct:DbFixer
DbHasAnyProperty	.\sqliteInt.h	683;"	d
DbHasProperty	.\sqliteInt.h	682;"	d
DbMain	.\tclsqlite.c	/^static int DbMain(void *cd, Tcl_Interp *interp, int objc,Tcl_Obj *const*objv){$/;"	f	file:
DbObjCmd	.\tclsqlite.c	/^static int DbObjCmd(void *cd, Tcl_Interp *interp, int objc,Tcl_Obj *const*objv){$/;"	f	file:
DbObjCmdAdaptor	.\tclsqlite.c	/^static int DbObjCmdAdaptor($/;"	f	file:
DbPage	.\pager.h	/^typedef struct PgHdr DbPage;$/;"	t	typeref:struct:PgHdr
DbProfileHandler	.\tclsqlite.c	/^static void DbProfileHandler(void *cd, const char *zSql, sqlite_uint64 tm){$/;"	f	file:
DbProgressHandler	.\tclsqlite.c	/^static int DbProgressHandler(void *cd){$/;"	f	file:
DbRollbackHandler	.\tclsqlite.c	/^static void DbRollbackHandler(void *clientData){$/;"	f	file:
DbSetProperty	.\sqliteInt.h	684;"	d
DbTraceHandler	.\tclsqlite.c	/^static void DbTraceHandler(void *cd, const char *zSql){$/;"	f	file:
DbTransPostCmd	.\tclsqlite.c	/^static int DbTransPostCmd($/;"	f	file:
DbUnlockNotify	.\tclsqlite.c	/^static void DbUnlockNotify(void **apArg, int nArg){$/;"	f	file:
DbUpdateHandler	.\tclsqlite.c	/^static void DbUpdateHandler($/;"	f	file:
DbUseNre	.\tclsqlite.c	/^static int DbUseNre(void){$/;"	f	file:
DbUseNre	.\tclsqlite.c	1484;"	d	file:
DbWalHandler	.\tclsqlite.c	/^static int DbWalHandler($/;"	f	file:
Deephemeralize	.\vdbe.c	139;"	d	file:
EIGHT_BYTE_ALIGNMENT	.\sqliteInt.h	491;"	d
EIGHT_BYTE_ALIGNMENT	.\sqliteInt.h	493;"	d
ENC	.\sqliteInt.h	887;"	d
END_TIMER	.\shell.c	109;"	d	file:
END_TIMER	.\shell.c	184;"	d	file:
END_TIMER	.\shell.c	189;"	d	file:
EP2_Irreducible	.\sqliteInt.h	1654;"	d
EP2_MallocedToken	.\sqliteInt.h	1653;"	d
EP_Agg	.\sqliteInt.h	1634;"	d
EP_DblQuoted	.\sqliteInt.h	1639;"	d
EP_Distinct	.\sqliteInt.h	1637;"	d
EP_Error	.\sqliteInt.h	1636;"	d
EP_ExpCollate	.\sqliteInt.h	1641;"	d
EP_FixedDest	.\sqliteInt.h	1642;"	d
EP_FromJoin	.\sqliteInt.h	1633;"	d
EP_InfixFunc	.\sqliteInt.h	1640;"	d
EP_IntValue	.\sqliteInt.h	1643;"	d
EP_Reduced	.\sqliteInt.h	1646;"	d
EP_Resolved	.\sqliteInt.h	1635;"	d
EP_Static	.\sqliteInt.h	1648;"	d
EP_TokenOnly	.\sqliteInt.h	1647;"	d
EP_VarSelect	.\sqliteInt.h	1638;"	d
EP_xIsSelect	.\sqliteInt.h	1644;"	d
EXCLUSIVE_LOCK	.\os.h	163;"	d
EXPRDUP_REDUCE	.\sqliteInt.h	1690;"	d
EXPR_FULLSIZE	.\sqliteInt.h	1682;"	d
EXPR_REDUCEDSIZE	.\sqliteInt.h	1683;"	d
EXPR_TOKENONLYSIZE	.\sqliteInt.h	1684;"	d
EXTRA_SIZE	.\btreeInt.h	301;"	d
ExpandBlob	.\vdbe.c	147;"	d	file:
Expr	.\sqliteInt.h	/^struct Expr {$/;"	s
Expr	.\sqliteInt.h	/^typedef struct Expr Expr;$/;"	t	typeref:struct:Expr
ExprClearProperty	.\sqliteInt.h	1675;"	d
ExprHasAnyProperty	.\sqliteInt.h	1673;"	d
ExprHasProperty	.\sqliteInt.h	1672;"	d
ExprList	.\sqliteInt.h	/^struct ExprList {$/;"	s
ExprList	.\sqliteInt.h	/^typedef struct ExprList ExprList;$/;"	t	typeref:struct:ExprList
ExprList_item	.\sqliteInt.h	/^  struct ExprList_item {$/;"	s	struct:ExprList
ExprSetIrreducible	.\sqliteInt.h	1663;"	d
ExprSetIrreducible	.\sqliteInt.h	1665;"	d
ExprSetProperty	.\sqliteInt.h	1674;"	d
ExprSpan	.\sqliteInt.h	/^struct ExprSpan {$/;"	s
ExprSpan	.\sqliteInt.h	/^typedef struct ExprSpan ExprSpan;$/;"	t	typeref:struct:ExprSpan
F1	.\tclsqlite.c	3108;"	d	file:
F2	.\tclsqlite.c	3109;"	d	file:
F3	.\tclsqlite.c	3110;"	d	file:
F4	.\tclsqlite.c	3111;"	d	file:
FABS	.\rtree.c	1539;"	d	file:
FILEHANDLEID	.\pager.c	132;"	d	file:
FKey	.\sqliteInt.h	/^struct FKey {$/;"	s
FKey	.\sqliteInt.h	/^typedef struct FKey FKey;$/;"	t	typeref:struct:FKey
FLAG_INTERN	.\printf.c	103;"	d	file:
FLAG_SIGNED	.\printf.c	102;"	d	file:
FLAG_STRING	.\printf.c	104;"	d	file:
FOREGUARD	.\mem2.c	68;"	d	file:
FTS3_DOCID_SEARCH	.\fts3Int.h	187;"	d
FTS3_FULLSCAN_SEARCH	.\fts3Int.h	186;"	d
FTS3_FULLTEXT_SEARCH	.\fts3Int.h	188;"	d
FTS3_HASH_BINARY	.\fts3_hash.h	69;"	d
FTS3_HASH_STRING	.\fts3_hash.h	68;"	d
FTS3_MAX_PENDING_DATA	.\fts3Int.h	41;"	d
FTS3_MERGE_COUNT	.\fts3Int.h	31;"	d
FTS3_SEGMENT_COLUMN_FILTER	.\fts3Int.h	280;"	d
FTS3_SEGMENT_IGNORE_EMPTY	.\fts3Int.h	279;"	d
FTS3_SEGMENT_PREFIX	.\fts3Int.h	281;"	d
FTS3_SEGMENT_REQUIRE_POS	.\fts3Int.h	278;"	d
FTS3_VARINT_MAX	.\fts3Int.h	54;"	d
FTSQUERY_AND	.\fts3Int.h	249;"	d
FTSQUERY_NEAR	.\fts3Int.h	247;"	d
FTSQUERY_NOT	.\fts3Int.h	248;"	d
FTSQUERY_OR	.\fts3Int.h	250;"	d
FTSQUERY_PHRASE	.\fts3Int.h	251;"	d
FUNCTION	.\sqliteInt.h	997;"	d
FileChunk	.\memjournal.c	/^struct FileChunk {$/;"	s	file:
FileChunk	.\memjournal.c	/^typedef struct FileChunk FileChunk;$/;"	t	typeref:struct:FileChunk	file:
FilePoint	.\memjournal.c	/^struct FilePoint {$/;"	s	file:
FilePoint	.\memjournal.c	/^typedef struct FilePoint FilePoint;$/;"	t	typeref:struct:FilePoint	file:
FormatMessageW	.\os_win.c	76;"	d	file:
Fts3Cursor	.\fts3Int.h	/^struct Fts3Cursor {$/;"	s
Fts3Cursor	.\fts3Int.h	/^typedef struct Fts3Cursor Fts3Cursor;$/;"	t	typeref:struct:Fts3Cursor
Fts3Expr	.\fts3Int.h	/^struct Fts3Expr {$/;"	s
Fts3Expr	.\fts3Int.h	/^typedef struct Fts3Expr Fts3Expr;$/;"	t	typeref:struct:Fts3Expr
Fts3Hash	.\fts3_hash.h	/^struct Fts3Hash {$/;"	s
Fts3Hash	.\fts3_hash.h	/^typedef struct Fts3Hash Fts3Hash;$/;"	t	typeref:struct:Fts3Hash
Fts3HashElem	.\fts3_hash.h	/^struct Fts3HashElem {$/;"	s
Fts3HashElem	.\fts3_hash.h	/^typedef struct Fts3HashElem Fts3HashElem;$/;"	t	typeref:struct:Fts3HashElem
Fts3Phrase	.\fts3Int.h	/^struct Fts3Phrase {$/;"	s
Fts3Phrase	.\fts3Int.h	/^typedef struct Fts3Phrase Fts3Phrase;$/;"	t	typeref:struct:Fts3Phrase
Fts3SegFilter	.\fts3Int.h	/^struct Fts3SegFilter {$/;"	s
Fts3SegFilter	.\fts3Int.h	/^typedef struct Fts3SegFilter Fts3SegFilter;$/;"	t	typeref:struct:Fts3SegFilter
Fts3SegReader	.\fts3Int.h	/^typedef struct Fts3SegReader Fts3SegReader;$/;"	t	typeref:struct:Fts3SegReader
Fts3SegReader	.\fts3_write.c	/^struct Fts3SegReader {$/;"	s	file:
Fts3Table	.\fts3Int.h	/^struct Fts3Table {$/;"	s
Fts3Table	.\fts3Int.h	/^typedef struct Fts3Table Fts3Table;$/;"	t	typeref:struct:Fts3Table
FuncDef	.\sqliteInt.h	/^struct FuncDef {$/;"	s
FuncDef	.\sqliteInt.h	/^typedef struct FuncDef FuncDef;$/;"	t	typeref:struct:FuncDef
FuncDefHash	.\sqliteInt.h	/^struct FuncDefHash {$/;"	s
FuncDefHash	.\sqliteInt.h	/^typedef struct FuncDefHash FuncDefHash;$/;"	t	typeref:struct:FuncDefHash
GETPROCTIMES	.\shell.c	/^typedef BOOL (WINAPI *GETPROCTIMES)(HANDLE, LPFILETIME, LPFILETIME, LPFILETIME, LPFILETIME);$/;"	t	file:
GLOBAL	.\sqliteInt.h	559;"	d
GLOBAL	.\sqliteInt.h	565;"	d
GetTempPathA	.\os_win.c	333;"	d	file:
GlogUpperToLower	.\func.c	510;"	d	file:
GlogUpperToLower	.\func.c	512;"	d	file:
HANDLE_TO_WINFILE	.\os_win.c	339;"	d	file:
HASHSIZE	.\rtree.c	87;"	d	file:
HASHTABLE_HASH_1	.\wal.c	473;"	d	file:
HASHTABLE_NPAGE	.\wal.c	472;"	d	file:
HASHTABLE_NPAGE_ONE	.\wal.c	481;"	d	file:
HASHTABLE_NSLOT	.\wal.c	474;"	d	file:
HAS_TIMER	.\shell.c	110;"	d	file:
HAS_TIMER	.\shell.c	185;"	d	file:
HAS_TIMER	.\shell.c	190;"	d	file:
HAVE_FULLFSYNC	.\os_unix.c	2806;"	d	file:
HAVE_FULLFSYNC	.\os_unix.c	2808;"	d	file:
HAVE_LOCALTIME_S	.\date.c	67;"	d	file:
Hash	.\hash.h	/^struct Hash {$/;"	s
Hash	.\hash.h	/^typedef struct Hash Hash;$/;"	t	typeref:struct:Hash
HashElem	.\hash.h	/^struct HashElem {$/;"	s
HashElem	.\hash.h	/^typedef struct HashElem HashElem;$/;"	t	typeref:struct:HashElem
INCL_DOSDATETIME	.\os.h	89;"	d
INCL_DOSERRORS	.\os.h	91;"	d
INCL_DOSFILEMGR	.\os.h	90;"	d
INCL_DOSMISC	.\os.h	92;"	d
INCL_DOSMODULEMGR	.\os.h	94;"	d
INCL_DOSPROCESS	.\os.h	93;"	d
INCL_DOSSEMAPHORES	.\os.h	95;"	d
INT16_TYPE	.\sqliteInt.h	404;"	d
INT16_TYPE	.\sqliteInt.h	406;"	d
INT8_TYPE	.\sqliteInt.h	418;"	d
INT8_TYPE	.\sqliteInt.h	420;"	d
INTERFACE	.\parse.c	154;"	d	file:
INVALID_FILE_ATTRIBUTES	.\os_win.c	67;"	d	file:
INVALID_SET_FILE_POINTER	.\os_win.c	628;"	d	file:
IN_DECLARE_VTAB	.\sqliteInt.h	2190;"	d
IN_DECLARE_VTAB	.\sqliteInt.h	2192;"	d
IN_INDEX_EPH	.\sqliteInt.h	3053;"	d
IN_INDEX_INDEX	.\sqliteInt.h	3054;"	d
IN_INDEX_ROWID	.\sqliteInt.h	3052;"	d
IOMETHODS	.\os_unix.c	3806;"	d	file:
IOTRACE	.\sqliteInt.h	3102;"	d
IOTRACE	.\sqliteInt.h	3106;"	d
ISAUTOVACUUM	.\btreeInt.h	614;"	d
ISAUTOVACUUM	.\btreeInt.h	616;"	d
IS_BIG_INT	.\sqliteInt.h	280;"	d
IS_LOCK_ERROR	.\os_unix.c	176;"	d	file:
IcuCursor	.\fts3_icu.c	/^struct IcuCursor {$/;"	s	file:
IcuCursor	.\fts3_icu.c	/^typedef struct IcuCursor IcuCursor;$/;"	t	typeref:struct:IcuCursor	file:
IcuTokenizer	.\fts3_icu.c	/^struct IcuTokenizer {$/;"	s	file:
IcuTokenizer	.\fts3_icu.c	/^typedef struct IcuTokenizer IcuTokenizer;$/;"	t	typeref:struct:IcuTokenizer	file:
IdChar	.\complete.c	27;"	d	file:
IdChar	.\complete.c	31;"	d	file:
IdChar	.\tokenize.c	103;"	d	file:
IdChar	.\tokenize.c	85;"	d	file:
IdList	.\sqliteInt.h	/^struct IdList {$/;"	s
IdList	.\sqliteInt.h	/^typedef struct IdList IdList;$/;"	t	typeref:struct:IdList
IdList_item	.\sqliteInt.h	/^  struct IdList_item {$/;"	s	struct:IdList
IgnorableOrderby	.\sqliteInt.h	2016;"	d
InLoop	.\sqliteInt.h	/^      struct InLoop {$/;"	s	struct:WhereLevel::__anon14::__anon15
Incrblob	.\vdbeblob.c	/^struct Incrblob {$/;"	s	file:
Incrblob	.\vdbeblob.c	/^typedef struct Incrblob Incrblob;$/;"	t	typeref:struct:Incrblob	file:
IncrblobChannel	.\tclsqlite.c	/^struct IncrblobChannel {$/;"	s	file:
IncrblobChannel	.\tclsqlite.c	/^typedef struct IncrblobChannel IncrblobChannel;$/;"	t	typeref:struct:IncrblobChannel	file:
IncrblobChannelType	.\tclsqlite.c	/^static Tcl_ChannelType IncrblobChannelType = {$/;"	v	file:
Index	.\sqliteInt.h	/^struct Index {$/;"	s
Index	.\sqliteInt.h	/^typedef struct Index Index;$/;"	t	typeref:struct:Index
IndexSample	.\sqliteInt.h	/^struct IndexSample {$/;"	s
IndexSample	.\sqliteInt.h	/^typedef struct IndexSample IndexSample;$/;"	t	typeref:struct:IndexSample
InitData	.\sqliteInt.h	/^} InitData;$/;"	t	typeref:struct:__anon16
IntegrityCk	.\btreeInt.h	/^struct IntegrityCk {$/;"	s
IntegrityCk	.\btreeInt.h	/^typedef struct IntegrityCk IntegrityCk;$/;"	t	typeref:struct:IntegrityCk
IsHiddenColumn	.\sqliteInt.h	1268;"	d
IsHiddenColumn	.\sqliteInt.h	1271;"	d
IsVirtual	.\sqliteInt.h	1267;"	d
IsVirtual	.\sqliteInt.h	1270;"	d
JOURNAL_CHUNKSIZE	.\memjournal.c	32;"	d	file:
JOURNAL_HDR_SZ	.\pager.c	744;"	d	file:
JOURNAL_PG_SZ	.\pager.c	738;"	d	file:
JT_CROSS	.\sqliteInt.h	1808;"	d
JT_ERROR	.\sqliteInt.h	1813;"	d
JT_INNER	.\sqliteInt.h	1807;"	d
JT_LEFT	.\sqliteInt.h	1810;"	d
JT_NATURAL	.\sqliteInt.h	1809;"	d
JT_OUTER	.\sqliteInt.h	1812;"	d
JT_RIGHT	.\sqliteInt.h	1811;"	d
JournalFile	.\journal.c	/^struct JournalFile {$/;"	s	file:
JournalFile	.\journal.c	/^typedef struct JournalFile JournalFile;$/;"	t	typeref:struct:JournalFile	file:
JournalFileMethods	.\journal.c	/^static struct sqlite3_io_methods JournalFileMethods = {$/;"	v	typeref:struct:sqlite3_io_methods	file:
KeyClass	.\sqliteInt.h	/^typedef struct KeyClass KeyClass;$/;"	t	typeref:struct:KeyClass
KeyInfo	.\sqliteInt.h	/^struct KeyInfo {$/;"	s
KeyInfo	.\sqliteInt.h	/^typedef struct KeyInfo KeyInfo;$/;"	t	typeref:struct:KeyInfo
LARGEST_INT64	.\sqliteInt.h	467;"	d
LIKEFUNC	.\sqliteInt.h	1003;"	d
LOCKFILE_FAIL_IMMEDIATELY	.\os_win.c	897;"	d	file:
LOCK_TIMEOUT	.\os_os2.c	70;"	d	file:
LOGMAX	.\mem5.c	78;"	d	file:
LONGDOUBLE_TYPE	.\sqliteInt.h	312;"	d
LONGDOUBLE_TYPE	.\sqliteInt.h	424;"	d
LikeOp	.\parse.c	/^struct LikeOp {$/;"	s	file:
LimitVal	.\parse.c	/^struct LimitVal {$/;"	s	file:
LinearPickNext	.\rtree.c	/^static RtreeCell *LinearPickNext($/;"	f	file:
LinearPickSeeds	.\rtree.c	/^static void LinearPickSeeds($/;"	f	file:
LoadDoclistCtx	.\fts3_snippet.c	/^struct LoadDoclistCtx {$/;"	s	file:
LoadDoclistCtx	.\fts3_snippet.c	/^typedef struct LoadDoclistCtx LoadDoclistCtx;$/;"	t	typeref:struct:LoadDoclistCtx	file:
LockFile	.\os_win.c	335;"	d	file:
LockFileEx	.\os_win.c	337;"	d	file:
Lookaside	.\sqliteInt.h	/^struct Lookaside {$/;"	s
Lookaside	.\sqliteInt.h	/^typedef struct Lookaside Lookaside;$/;"	t	typeref:struct:Lookaside
LookasideSlot	.\sqliteInt.h	/^struct LookasideSlot {$/;"	s
LookasideSlot	.\sqliteInt.h	/^typedef struct LookasideSlot LookasideSlot;$/;"	t	typeref:struct:LookasideSlot
M	.\date.c	/^  int Y, M, D;       \/* Year, month, and day *\/$/;"	m	struct:DateTime	file:
MASTER_NAME	.\sqliteInt.h	518;"	d
MASTER_ROOT	.\sqliteInt.h	524;"	d
MAX	.\rtree.c	228;"	d	file:
MAX_6BYTE	.\vdbeaux.c	2485;"	d	file:
MAX_PATHNAME	.\os_unix.c	170;"	d	file:
MAX_PREPARED_STMTS	.\tclsqlite.c	54;"	d	file:
MAX_ROWID	.\vdbe.c	4117;"	d	file:
MAX_SECTOR_SIZE	.\pager.c	429;"	d	file:
MD5Context	.\tclsqlite.c	/^struct MD5Context {$/;"	s	file:
MD5Context	.\tclsqlite.c	/^typedef struct MD5Context MD5Context;$/;"	t	typeref:struct:MD5Context	file:
MD5DigestToBase10x8	.\tclsqlite.c	/^static void MD5DigestToBase10x8(unsigned char digest[16], char zDigest[50]){$/;"	f	file:
MD5DigestToBase16	.\tclsqlite.c	/^static void MD5DigestToBase16(unsigned char *digest, char *zBuf){$/;"	f	file:
MD5Final	.\tclsqlite.c	/^static void MD5Final(unsigned char digest[16], MD5Context *ctx){$/;"	f	file:
MD5Init	.\tclsqlite.c	/^static void MD5Init(MD5Context *ctx){$/;"	f	file:
MD5STEP	.\tclsqlite.c	3114;"	d	file:
MD5Transform	.\tclsqlite.c	/^static void MD5Transform(uint32 buf[4], const uint32 in[16]){$/;"	f	file:
MD5Update	.\tclsqlite.c	/^void MD5Update(MD5Context *ctx, const unsigned char *buf, unsigned int len){$/;"	f	file:
MEM5LINK	.\mem5.c	141;"	d	file:
MEMCELLSIZE	.\vdbemem.c	599;"	d	file:
MEMDB	.\pager.c	753;"	d	file:
MEMDB	.\pager.c	755;"	d	file:
MEMTYPE_DB	.\sqliteInt.h	3151;"	d
MEMTYPE_HEAP	.\sqliteInt.h	3147;"	d
MEMTYPE_LOOKASIDE	.\sqliteInt.h	3148;"	d
MEMTYPE_PCACHE	.\sqliteInt.h	3150;"	d
MEMTYPE_SCRATCH	.\sqliteInt.h	3149;"	d
MEM_Agg	.\vdbeInt.h	191;"	d
MEM_Blob	.\vdbeInt.h	177;"	d
MEM_Dyn	.\vdbeInt.h	188;"	d
MEM_Ephem	.\vdbeInt.h	190;"	d
MEM_Frame	.\vdbeInt.h	179;"	d
MEM_Int	.\vdbeInt.h	175;"	d
MEM_Null	.\vdbeInt.h	173;"	d
MEM_Real	.\vdbeInt.h	176;"	d
MEM_RowSet	.\vdbeInt.h	178;"	d
MEM_Static	.\vdbeInt.h	189;"	d
MEM_Str	.\vdbeInt.h	174;"	d
MEM_Term	.\vdbeInt.h	187;"	d
MEM_TypeMask	.\vdbeInt.h	180;"	d
MEM_Zero	.\vdbeInt.h	192;"	d
MEM_Zero	.\vdbeInt.h	195;"	d
MEM_Zero	.\vdbeInt.h	196;"	d
MERGE_AND	.\fts3.c	1447;"	d	file:
MERGE_NEAR	.\fts3.c	1452;"	d	file:
MERGE_NOT	.\fts3.c	1446;"	d	file:
MERGE_OR	.\fts3.c	1448;"	d	file:
MERGE_PHRASE	.\fts3.c	1450;"	d	file:
MERGE_POS_NEAR	.\fts3.c	1453;"	d	file:
MERGE_POS_OR	.\fts3.c	1449;"	d	file:
MERGE_POS_PHRASE	.\fts3.c	1451;"	d	file:
MIN	.\backup.c	21;"	d	file:
MIN	.\memjournal.c	37;"	d	file:
MIN	.\rtree.c	231;"	d	file:
MODE_Column	.\shell.c	426;"	d	file:
MODE_Csv	.\shell.c	432;"	d	file:
MODE_Explain	.\shell.c	433;"	d	file:
MODE_Html	.\shell.c	429;"	d	file:
MODE_Insert	.\shell.c	430;"	d	file:
MODE_Line	.\shell.c	425;"	d	file:
MODE_List	.\shell.c	427;"	d	file:
MODE_Semi	.\shell.c	428;"	d	file:
MODE_Tcl	.\shell.c	431;"	d	file:
MX_CELL	.\btreeInt.h	228;"	d
MX_CELL_SIZE	.\btreeInt.h	221;"	d
MX_CLOSE_ATTEMPT	.\os_win.c	670;"	d	file:
MX_DELETION_ATTEMPTS	.\os_win.c	2177;"	d	file:
MX_SMALL	.\mem3.c	40;"	d	file:
MatchInfo	.\fts3_snippet.c	/^struct MatchInfo {$/;"	s	file:
MatchInfo	.\fts3_snippet.c	/^typedef struct MatchInfo MatchInfo;$/;"	t	typeref:struct:MatchInfo	file:
Md5_Init	.\tclsqlite.c	/^int Md5_Init(Tcl_Interp *interp){$/;"	f
Md5_Register	.\tclsqlite.c	/^int Md5_Register(sqlite3 *db){$/;"	f
Mem	.\vdbe.h	/^typedef struct Mem Mem;$/;"	t	typeref:struct:Mem
Mem	.\vdbeInt.h	/^struct Mem {$/;"	s
Mem0Global	.\malloc.c	/^static SQLITE_WSD struct Mem0Global {$/;"	s	file:
Mem3Block	.\mem3.c	/^struct Mem3Block {$/;"	s	file:
Mem3Block	.\mem3.c	/^typedef struct Mem3Block Mem3Block;$/;"	t	typeref:struct:Mem3Block	file:
Mem3Global	.\mem3.c	/^static SQLITE_WSD struct Mem3Global {$/;"	s	file:
Mem5Global	.\mem5.c	/^static SQLITE_WSD struct Mem5Global {$/;"	s	file:
Mem5Link	.\mem5.c	/^struct Mem5Link {$/;"	s	file:
Mem5Link	.\mem5.c	/^typedef struct Mem5Link Mem5Link;$/;"	t	typeref:struct:Mem5Link	file:
MemBlockHdr	.\mem2.c	/^struct MemBlockHdr {$/;"	s	file:
MemJournal	.\memjournal.c	/^struct MemJournal {$/;"	s	file:
MemJournal	.\memjournal.c	/^typedef struct MemJournal MemJournal;$/;"	t	typeref:struct:MemJournal	file:
MemJournalMethods	.\memjournal.c	/^static const struct sqlite3_io_methods MemJournalMethods = {$/;"	v	typeref:struct:sqlite3_io_methods	file:
MemPage	.\btreeInt.h	/^struct MemPage {$/;"	s
MemPage	.\btreeInt.h	/^typedef struct MemPage MemPage;$/;"	t	typeref:struct:MemPage
MemSetTypeFlag	.\vdbeInt.h	203;"	d
Module	.\sqliteInt.h	/^struct Module {$/;"	s
Module	.\sqliteInt.h	/^typedef struct Module Module;$/;"	t	typeref:struct:Module
NB	.\btree.c	5534;"	d	file:
NCELL	.\rtree.c	217;"	d	file:
NCSIZE	.\mem2.c	74;"	d	file:
NDEBUG	.\fts3Int.h	19;"	d
NDEBUG	.\sqliteInt.h	200;"	d
NDELAY	.\main.c	815;"	d	file:
NEVER	.\fts3Int.h	81;"	d
NEVER	.\sqliteInt.h	266;"	d
NEVER	.\sqliteInt.h	269;"	d
NEVER	.\sqliteInt.h	272;"	d
NN	.\btree.c	5533;"	d	file:
NO_LOCK	.\os.h	159;"	d
NUM_PREPARED_STMTS	.\tclsqlite.c	53;"	d	file:
N_HASH	.\mem3.c	46;"	d	file:
N_SORT_BUCKET	.\pcache.c	484;"	d	file:
N_STATEMENT	.\rtree.c	2559;"	d	file:
NameContext	.\sqliteInt.h	/^struct NameContext {$/;"	s
NameContext	.\sqliteInt.h	/^typedef struct NameContext NameContext;$/;"	t	typeref:struct:NameContext
OE_Abort	.\sqliteInt.h	1337;"	d
OE_Cascade	.\sqliteInt.h	1345;"	d
OE_Default	.\sqliteInt.h	1347;"	d
OE_Fail	.\sqliteInt.h	1338;"	d
OE_Ignore	.\sqliteInt.h	1339;"	d
OE_None	.\sqliteInt.h	1335;"	d
OE_Replace	.\sqliteInt.h	1340;"	d
OE_Restrict	.\sqliteInt.h	1342;"	d
OE_Rollback	.\sqliteInt.h	1336;"	d
OE_SetDflt	.\sqliteInt.h	1344;"	d
OE_SetNull	.\sqliteInt.h	1343;"	d
OMIT_TEMPDB	.\sqliteInt.h	331;"	d
OMIT_TEMPDB	.\sqliteInt.h	333;"	d
OPFLAG_APPEND	.\sqliteInt.h	2210;"	d
OPFLAG_CLEARCACHE	.\sqliteInt.h	2212;"	d
OPFLAG_ISUPDATE	.\sqliteInt.h	2209;"	d
OPFLAG_LASTROWID	.\sqliteInt.h	2208;"	d
OPFLAG_NCHANGE	.\sqliteInt.h	2207;"	d
OPFLAG_USESEEKRESULT	.\sqliteInt.h	2211;"	d
OPFLG_IN1	.\opcodes.h	158;"	d
OPFLG_IN2	.\opcodes.h	159;"	d
OPFLG_IN3	.\opcodes.h	160;"	d
OPFLG_INITIALIZER	.\opcodes.h	163;"	d
OPFLG_JUMP	.\opcodes.h	156;"	d
OPFLG_OUT2	.\opcodes.h	161;"	d
OPFLG_OUT2_PRERELEASE	.\opcodes.h	157;"	d
OPFLG_OUT3	.\opcodes.h	162;"	d
OP_Add	.\opcodes.h	22;"	d
OP_AddImm	.\opcodes.h	33;"	d
OP_Affinity	.\opcodes.h	59;"	d
OP_AggFinal	.\opcodes.h	125;"	d
OP_AggStep	.\opcodes.h	124;"	d
OP_And	.\opcodes.h	50;"	d
OP_AutoCommit	.\opcodes.h	63;"	d
OP_BitAnd	.\opcodes.h	29;"	d
OP_BitNot	.\opcodes.h	53;"	d
OP_BitOr	.\opcodes.h	30;"	d
OP_Blob	.\opcodes.h	15;"	d
OP_Checkpoint	.\opcodes.h	126;"	d
OP_Clear	.\opcodes.h	104;"	d
OP_Close	.\opcodes.h	73;"	d
OP_CollSeq	.\opcodes.h	27;"	d
OP_Column	.\opcodes.h	58;"	d
OP_Compare	.\opcodes.h	48;"	d
OP_Concat	.\opcodes.h	21;"	d
OP_Copy	.\opcodes.h	18;"	d
OP_Count	.\opcodes.h	61;"	d
OP_CreateIndex	.\opcodes.h	105;"	d
OP_CreateTable	.\opcodes.h	106;"	d
OP_Delete	.\opcodes.h	87;"	d
OP_Destroy	.\opcodes.h	103;"	d
OP_Divide	.\opcodes.h	25;"	d
OP_DropIndex	.\opcodes.h	110;"	d
OP_DropTable	.\opcodes.h	109;"	d
OP_DropTrigger	.\opcodes.h	111;"	d
OP_Eq	.\opcodes.h	41;"	d
OP_Expire	.\opcodes.h	130;"	d
OP_Explain	.\opcodes.h	144;"	d
OP_FkCounter	.\opcodes.h	118;"	d
OP_FkIfZero	.\opcodes.h	119;"	d
OP_Found	.\opcodes.h	80;"	d
OP_Function	.\opcodes.h	28;"	d
OP_Ge	.\opcodes.h	46;"	d
OP_Gosub	.\opcodes.h	4;"	d
OP_Goto	.\opcodes.h	3;"	d
OP_Gt	.\opcodes.h	45;"	d
OP_Halt	.\opcodes.h	8;"	d
OP_HaltIfNull	.\opcodes.h	7;"	d
OP_IdxDelete	.\opcodes.h	99;"	d
OP_IdxGE	.\opcodes.h	102;"	d
OP_IdxInsert	.\opcodes.h	98;"	d
OP_IdxLT	.\opcodes.h	101;"	d
OP_IdxRowid	.\opcodes.h	100;"	d
OP_If	.\opcodes.h	54;"	d
OP_IfNeg	.\opcodes.h	122;"	d
OP_IfNot	.\opcodes.h	55;"	d
OP_IfPos	.\opcodes.h	121;"	d
OP_IfZero	.\opcodes.h	123;"	d
OP_IncrVacuum	.\opcodes.h	129;"	d
OP_Insert	.\opcodes.h	85;"	d
OP_InsertInt	.\opcodes.h	86;"	d
OP_Int64	.\opcodes.h	10;"	d
OP_Integer	.\opcodes.h	9;"	d
OP_IntegrityCk	.\opcodes.h	112;"	d
OP_IsNull	.\opcodes.h	56;"	d
OP_IsUnique	.\opcodes.h	81;"	d
OP_JournalMode	.\opcodes.h	127;"	d
OP_Jump	.\opcodes.h	49;"	d
OP_Last	.\opcodes.h	93;"	d
OP_Le	.\opcodes.h	44;"	d
OP_LoadAnalysis	.\opcodes.h	108;"	d
OP_Lt	.\opcodes.h	43;"	d
OP_MakeRecord	.\opcodes.h	60;"	d
OP_MemMax	.\opcodes.h	120;"	d
OP_Move	.\opcodes.h	17;"	d
OP_Multiply	.\opcodes.h	24;"	d
OP_MustBeInt	.\opcodes.h	34;"	d
OP_Ne	.\opcodes.h	42;"	d
OP_NewRowid	.\opcodes.h	84;"	d
OP_Next	.\opcodes.h	97;"	d
OP_Noop	.\opcodes.h	143;"	d
OP_Not	.\opcodes.h	52;"	d
OP_NotExists	.\opcodes.h	82;"	d
OP_NotFound	.\opcodes.h	79;"	d
OP_NotNull	.\opcodes.h	57;"	d
OP_NotUsed_138	.\opcodes.h	147;"	d
OP_NotUsed_139	.\opcodes.h	148;"	d
OP_NotUsed_140	.\opcodes.h	149;"	d
OP_Null	.\opcodes.h	14;"	d
OP_NullRow	.\opcodes.h	92;"	d
OP_OpenAutoindex	.\opcodes.h	70;"	d
OP_OpenEphemeral	.\opcodes.h	71;"	d
OP_OpenPseudo	.\opcodes.h	72;"	d
OP_OpenRead	.\opcodes.h	68;"	d
OP_OpenWrite	.\opcodes.h	69;"	d
OP_Or	.\opcodes.h	51;"	d
OP_Pagecount	.\opcodes.h	141;"	d
OP_Param	.\opcodes.h	117;"	d
OP_ParseSchema	.\opcodes.h	107;"	d
OP_Permutation	.\opcodes.h	47;"	d
OP_Prev	.\opcodes.h	96;"	d
OP_Program	.\opcodes.h	116;"	d
OP_ReadCookie	.\opcodes.h	65;"	d
OP_Real	.\opcodes.h	11;"	d
OP_RealAffinity	.\opcodes.h	35;"	d
OP_Remainder	.\opcodes.h	26;"	d
OP_ResetCount	.\opcodes.h	88;"	d
OP_ResultRow	.\opcodes.h	20;"	d
OP_Return	.\opcodes.h	5;"	d
OP_Rewind	.\opcodes.h	95;"	d
OP_RowData	.\opcodes.h	90;"	d
OP_RowKey	.\opcodes.h	89;"	d
OP_RowSetAdd	.\opcodes.h	113;"	d
OP_RowSetRead	.\opcodes.h	114;"	d
OP_RowSetTest	.\opcodes.h	115;"	d
OP_Rowid	.\opcodes.h	91;"	d
OP_SCopy	.\opcodes.h	19;"	d
OP_Savepoint	.\opcodes.h	62;"	d
OP_Seek	.\opcodes.h	78;"	d
OP_SeekGe	.\opcodes.h	76;"	d
OP_SeekGt	.\opcodes.h	77;"	d
OP_SeekLe	.\opcodes.h	75;"	d
OP_SeekLt	.\opcodes.h	74;"	d
OP_Sequence	.\opcodes.h	83;"	d
OP_SetCookie	.\opcodes.h	66;"	d
OP_ShiftLeft	.\opcodes.h	31;"	d
OP_ShiftRight	.\opcodes.h	32;"	d
OP_Sort	.\opcodes.h	94;"	d
OP_String	.\opcodes.h	13;"	d
OP_String8	.\opcodes.h	12;"	d
OP_Subtract	.\opcodes.h	23;"	d
OP_TableLock	.\opcodes.h	131;"	d
OP_ToBlob	.\opcodes.h	37;"	d
OP_ToInt	.\opcodes.h	39;"	d
OP_ToNumeric	.\opcodes.h	38;"	d
OP_ToReal	.\opcodes.h	40;"	d
OP_ToText	.\opcodes.h	36;"	d
OP_Trace	.\opcodes.h	142;"	d
OP_Transaction	.\opcodes.h	64;"	d
OP_VBegin	.\opcodes.h	132;"	d
OP_VColumn	.\opcodes.h	137;"	d
OP_VCreate	.\opcodes.h	133;"	d
OP_VDestroy	.\opcodes.h	134;"	d
OP_VFilter	.\opcodes.h	136;"	d
OP_VNext	.\opcodes.h	138;"	d
OP_VOpen	.\opcodes.h	135;"	d
OP_VRename	.\opcodes.h	139;"	d
OP_VUpdate	.\opcodes.h	140;"	d
OP_Vacuum	.\opcodes.h	128;"	d
OP_Variable	.\opcodes.h	16;"	d
OP_VerifyCookie	.\opcodes.h	67;"	d
OP_Yield	.\opcodes.h	6;"	d
OS2_MUTEX_INITIALIZER	.\mutex_os2.c	38;"	d	file:
OSTRACE	.\os_common.h	34;"	d
OSTRACE	.\os_common.h	36;"	d
OS_VXWORKS	.\os_unix.c	80;"	d	file:
OS_VXWORKS	.\os_unix.c	82;"	d	file:
O_BINARY	.\os_unix.c	268;"	d	file:
O_LARGEFILE	.\os_unix.c	258;"	d	file:
O_LARGEFILE	.\os_unix.c	261;"	d	file:
O_LARGEFILE	.\os_unix.c	262;"	d	file:
O_NOFOLLOW	.\os_unix.c	265;"	d	file:
Op	.\vdbeInt.h	/^typedef struct VdbeOp Op;$/;"	t	typeref:struct:VdbeOp
OpenCounter	.\os_common.h	107;"	d
OpenCounter	.\os_common.h	109;"	d
P4_COLLSEQ	.\vdbe.h	106;"	d
P4_DYNAMIC	.\vdbe.h	104;"	d
P4_FUNCDEF	.\vdbe.h	107;"	d
P4_INT32	.\vdbe.h	116;"	d
P4_INT64	.\vdbe.h	115;"	d
P4_INTARRAY	.\vdbe.h	117;"	d
P4_KEYINFO	.\vdbe.h	108;"	d
P4_KEYINFO_HANDOFF	.\vdbe.h	127;"	d
P4_KEYINFO_STATIC	.\vdbe.h	128;"	d
P4_MEM	.\vdbe.h	110;"	d
P4_MPRINTF	.\vdbe.h	113;"	d
P4_NOTUSED	.\vdbe.h	103;"	d
P4_REAL	.\vdbe.h	114;"	d
P4_STATIC	.\vdbe.h	105;"	d
P4_SUBPROGRAM	.\vdbe.h	118;"	d
P4_TRANSIENT	.\vdbe.h	111;"	d
P4_VDBEFUNC	.\vdbe.h	109;"	d
P4_VTAB	.\vdbe.h	112;"	d
PACKAGE_VERSION	.\tclsqlite.c	3006;"	d	file:
PAGERID	.\pager.c	131;"	d	file:
PAGERTRACE	.\pager.c	120;"	d	file:
PAGER_ERROR	.\pager.c	357;"	d	file:
PAGER_INCR	.\pager.c	700;"	d	file:
PAGER_INCR	.\pager.c	702;"	d	file:
PAGER_JOURNALMODE_DELETE	.\pager.h	74;"	d
PAGER_JOURNALMODE_MEMORY	.\pager.h	78;"	d
PAGER_JOURNALMODE_OFF	.\pager.h	76;"	d
PAGER_JOURNALMODE_PERSIST	.\pager.h	75;"	d
PAGER_JOURNALMODE_QUERY	.\pager.h	73;"	d
PAGER_JOURNALMODE_TRUNCATE	.\pager.h	77;"	d
PAGER_JOURNALMODE_WAL	.\pager.h	79;"	d
PAGER_LOCKINGMODE_EXCLUSIVE	.\pager.h	68;"	d
PAGER_LOCKINGMODE_NORMAL	.\pager.h	67;"	d
PAGER_LOCKINGMODE_QUERY	.\pager.h	66;"	d
PAGER_MAX_PGNO	.\pager.c	761;"	d	file:
PAGER_MJ_PGNO	.\pager.h	53;"	d
PAGER_NO_READLOCK	.\pager.h	61;"	d
PAGER_OMIT_JOURNAL	.\pager.h	60;"	d
PAGER_OPEN	.\pager.c	351;"	d	file:
PAGER_READER	.\pager.c	352;"	d	file:
PAGER_WRITER_CACHEMOD	.\pager.c	354;"	d	file:
PAGER_WRITER_DBMOD	.\pager.c	355;"	d	file:
PAGER_WRITER_FINISHED	.\pager.c	356;"	d	file:
PAGER_WRITER_LOCKED	.\pager.c	353;"	d	file:
PAGE_TO_PGHDR1	.\pcache1.c	112;"	d	file:
PCache	.\pcache.c	/^struct PCache {$/;"	s	file:
PCache	.\pcache.h	/^typedef struct PCache PCache;$/;"	t	typeref:struct:PCache
PCache1	.\pcache1.c	/^struct PCache1 {$/;"	s	file:
PCache1	.\pcache1.c	/^typedef struct PCache1 PCache1;$/;"	t	typeref:struct:PCache1	file:
PCacheGlobal	.\pcache1.c	/^static SQLITE_WSD struct PCacheGlobal {$/;"	s	file:
PENDING_BYTE	.\os.h	221;"	d
PENDING_BYTE	.\os.h	223;"	d
PENDING_BYTE_PAGE	.\btreeInt.h	540;"	d
PENDING_LOCK	.\os.h	162;"	d
PGHDR1_TO_PAGE	.\pcache1.c	111;"	d	file:
PGHDR_DIRTY	.\pcache.h	48;"	d
PGHDR_DONT_WRITE	.\pcache.h	53;"	d
PGHDR_NEED_READ	.\pcache.h	51;"	d
PGHDR_NEED_SYNC	.\pcache.h	49;"	d
PGHDR_REUSE_UNLIKELY	.\pcache.h	52;"	d
POSITION_LIST_END	.\fts3.c	1161;"	d	file:
POS_COLUMN	.\fts3Int.h	67;"	d
POS_END	.\fts3Int.h	68;"	d
PROXY_CONCHVERSION	.\os_unix.c	5404;"	d	file:
PROXY_HEADERLEN	.\os_unix.c	5405;"	d	file:
PROXY_HOSTIDLEN	.\os_unix.c	5372;"	d	file:
PROXY_MAXCONCHLEN	.\os_unix.c	5407;"	d	file:
PROXY_PATHINDEX	.\os_unix.c	5406;"	d	file:
PTF_INTKEY	.\btreeInt.h	254;"	d
PTF_LEAF	.\btreeInt.h	257;"	d
PTF_LEAFDATA	.\btreeInt.h	256;"	d
PTF_ZERODATA	.\btreeInt.h	255;"	d
PTRMAP_BTREE	.\btreeInt.h	596;"	d
PTRMAP_FREEPAGE	.\btreeInt.h	593;"	d
PTRMAP_ISPAGE	.\btreeInt.h	559;"	d
PTRMAP_OVERFLOW1	.\btreeInt.h	594;"	d
PTRMAP_OVERFLOW2	.\btreeInt.h	595;"	d
PTRMAP_PAGENO	.\btreeInt.h	557;"	d
PTRMAP_PTROFFSET	.\btreeInt.h	558;"	d
PTRMAP_ROOTPAGE	.\btreeInt.h	592;"	d
Pager	.\pager.c	/^struct Pager {$/;"	s	file:
Pager	.\pager.h	/^typedef struct Pager Pager;$/;"	t	typeref:struct:Pager
PagerSavepoint	.\pager.c	/^struct PagerSavepoint {$/;"	s	file:
PagerSavepoint	.\pager.c	/^typedef struct PagerSavepoint PagerSavepoint;$/;"	t	typeref:struct:PagerSavepoint	file:
Parse	.\sqliteInt.h	/^struct Parse {$/;"	s
Parse	.\sqliteInt.h	/^typedef struct Parse Parse;$/;"	t	typeref:struct:Parse
ParseContext	.\fts3_expr.c	/^struct ParseContext {$/;"	s	file:
ParseContext	.\fts3_expr.c	/^typedef struct ParseContext ParseContext;$/;"	t	typeref:struct:ParseContext	file:
PendingList	.\fts3_write.c	/^struct PendingList {$/;"	s	file:
PendingList	.\fts3_write.c	/^typedef struct PendingList PendingList;$/;"	t	typeref:struct:PendingList	file:
PgFreeslot	.\pcache1.c	/^struct PgFreeslot {$/;"	s	file:
PgFreeslot	.\pcache1.c	/^typedef struct PgFreeslot PgFreeslot;$/;"	t	typeref:struct:PgFreeslot	file:
PgHdr	.\pcache.h	/^struct PgHdr {$/;"	s
PgHdr	.\pcache.h	/^typedef struct PgHdr PgHdr;$/;"	t	typeref:struct:PgHdr
PgHdr1	.\pcache1.c	/^struct PgHdr1 {$/;"	s	file:
PgHdr1	.\pcache1.c	/^typedef struct PgHdr1 PgHdr1;$/;"	t	typeref:struct:PgHdr1	file:
Pgno	.\pager.h	/^typedef u32 Pgno;$/;"	t
PhraseToken	.\fts3Int.h	/^  struct PhraseToken {$/;"	s	struct:Fts3Phrase
PickNext	.\rtree.c	43;"	d	file:
PickNext	.\rtree.c	48;"	d	file:
PickSeeds	.\rtree.c	44;"	d	file:
PickSeeds	.\rtree.c	49;"	d	file:
QuadraticPickNext	.\rtree.c	/^static RtreeCell *QuadraticPickNext($/;"	f	file:
QuadraticPickSeeds	.\rtree.c	/^static void QuadraticPickSeeds($/;"	f	file:
READMARK_NOT_USED	.\wal.c	367;"	d	file:
READ_LOCK	.\btreeInt.h	318;"	d
READ_UTF16BE	.\utf.c	118;"	d	file:
READ_UTF16LE	.\utf.c	108;"	d	file:
READ_UTF8	.\utf.c	155;"	d	file:
REARGUARD	.\mem2.c	69;"	d	file:
REGISTER_TRACE	.\vdbe.c	454;"	d	file:
REGISTER_TRACE	.\vdbe.c	456;"	d	file:
RESERVED_BYTE	.\os.h	225;"	d
RESERVED_LOCK	.\os.h	161;"	d
ROUND8	.\sqliteInt.h	474;"	d
ROUNDDOWN8	.\sqliteInt.h	479;"	d
ROWSET_ALLOCATION_SIZE	.\rowset.c	69;"	d	file:
ROWSET_ENTRY_PER_CHUNK	.\rowset.c	74;"	d	file:
RTREE_COORD_INT32	.\rtree.c	132;"	d	file:
RTREE_COORD_REAL32	.\rtree.c	131;"	d	file:
RTREE_EQ	.\rtree.c	185;"	d	file:
RTREE_GE	.\rtree.c	188;"	d	file:
RTREE_GT	.\rtree.c	189;"	d	file:
RTREE_LE	.\rtree.c	186;"	d	file:
RTREE_LT	.\rtree.c	187;"	d	file:
RTREE_MAXCELLS	.\rtree.c	145;"	d	file:
RTREE_MAX_DIMENSIONS	.\rtree.c	81;"	d	file:
RTREE_MINCELLS	.\rtree.c	143;"	d	file:
RTREE_REINSERT	.\rtree.c	144;"	d	file:
Reinsert	.\rtree.c	/^static int Reinsert($/;"	f	file:
RowSet	.\rowset.c	/^struct RowSet {$/;"	s	file:
RowSet	.\sqliteInt.h	/^typedef struct RowSet RowSet;$/;"	t	typeref:struct:RowSet
RowSetChunk	.\rowset.c	/^struct RowSetChunk {$/;"	s	file:
RowSetEntry	.\rowset.c	/^struct RowSetEntry {            $/;"	s	file:
Rtree	.\rtree.c	/^struct Rtree {$/;"	s	file:
Rtree	.\rtree.c	/^typedef struct Rtree Rtree;$/;"	t	typeref:struct:Rtree	file:
RtreeCell	.\rtree.c	/^struct RtreeCell {$/;"	s	file:
RtreeCell	.\rtree.c	/^typedef struct RtreeCell RtreeCell;$/;"	t	typeref:struct:RtreeCell	file:
RtreeConstraint	.\rtree.c	/^struct RtreeConstraint {$/;"	s	file:
RtreeConstraint	.\rtree.c	/^typedef struct RtreeConstraint RtreeConstraint;$/;"	t	typeref:struct:RtreeConstraint	file:
RtreeCoord	.\rtree.c	/^typedef union RtreeCoord RtreeCoord;$/;"	t	typeref:union:RtreeCoord	file:
RtreeCoord	.\rtree.c	/^union RtreeCoord {$/;"	u	file:
RtreeCursor	.\rtree.c	/^struct RtreeCursor {$/;"	s	file:
RtreeCursor	.\rtree.c	/^typedef struct RtreeCursor RtreeCursor;$/;"	t	typeref:struct:RtreeCursor	file:
RtreeNode	.\rtree.c	/^struct RtreeNode {$/;"	s	file:
RtreeNode	.\rtree.c	/^typedef struct RtreeNode RtreeNode;$/;"	t	typeref:struct:RtreeNode	file:
SAVEPOINT_BEGIN	.\sqliteInt.h	1025;"	d
SAVEPOINT_RELEASE	.\sqliteInt.h	1026;"	d
SAVEPOINT_ROLLBACK	.\sqliteInt.h	1027;"	d
SAVE_SZ	.\build.c	233;"	d	file:
SCHEMA_TABLE	.\sqliteInt.h	529;"	d
SETBIT	.\bitvec.c	299;"	d	file:
SET_FULLSYNC	.\os.h	107;"	d
SF_Aggregate	.\sqliteInt.h	2000;"	d
SF_Distinct	.\sqliteInt.h	1998;"	d
SF_Expanded	.\sqliteInt.h	2002;"	d
SF_HasTypeInfo	.\sqliteInt.h	2003;"	d
SF_Resolved	.\sqliteInt.h	1999;"	d
SF_UsesEphemeral	.\sqliteInt.h	2001;"	d
SHARED_FIRST	.\os.h	226;"	d
SHARED_LOCK	.\os.h	160;"	d
SHARED_SIZE	.\os.h	227;"	d
SLOT_2_0	.\util.c	662;"	d	file:
SLOT_4_2_0	.\util.c	663;"	d	file:
SMALLEST_INT64	.\sqliteInt.h	468;"	d
SQLITE3_MUTEX_INITIALIZER	.\mutex_unix.c	51;"	d	file:
SQLITE3_MUTEX_INITIALIZER	.\mutex_unix.c	53;"	d	file:
SQLITE3_MUTEX_INITIALIZER	.\mutex_w32.c	36;"	d	file:
SQLITE3_MUTEX_INITIALIZER	.\mutex_w32.c	38;"	d	file:
SQLITE3_TEXT	.\sqlite3.h	3049;"	d
SQLITE_ABORT	.\sqlite3.h	385;"	d
SQLITE_ACCESS_EXISTS	.\sqlite3.h	915;"	d
SQLITE_ACCESS_READ	.\sqlite3.h	917;"	d
SQLITE_ACCESS_READWRITE	.\sqlite3.h	916;"	d
SQLITE_AFF_INTEGER	.\sqliteInt.h	1121;"	d
SQLITE_AFF_MASK	.\sqliteInt.h	1130;"	d
SQLITE_AFF_NONE	.\sqliteInt.h	1119;"	d
SQLITE_AFF_NUMERIC	.\sqliteInt.h	1120;"	d
SQLITE_AFF_REAL	.\sqliteInt.h	1122;"	d
SQLITE_AFF_TEXT	.\sqliteInt.h	1118;"	d
SQLITE_ALTER_TABLE	.\sqlite3.h	2162;"	d
SQLITE_ANALYZE	.\sqlite3.h	2164;"	d
SQLITE_ANY	.\sqlite3.h	3371;"	d
SQLITE_API	.\sqlite3.h	53;"	d
SQLITE_ASCII	.\sqliteInt.h	378;"	d
SQLITE_ATTACH	.\sqlite3.h	2160;"	d
SQLITE_AUTH	.\sqlite3.h	404;"	d
SQLITE_AutoIndex	.\sqliteInt.h	915;"	d
SQLITE_BIGENDIAN	.\sqliteInt.h	453;"	d
SQLITE_BIGENDIAN	.\sqliteInt.h	457;"	d
SQLITE_BIG_DBL	.\sqliteInt.h	314;"	d
SQLITE_BIG_DBL	.\sqliteInt.h	322;"	d
SQLITE_BLOB	.\sqlite3.h	3042;"	d
SQLITE_BUSY	.\sqlite3.h	386;"	d
SQLITE_BUSY_RECOVERY	.\sqlite3.h	456;"	d
SQLITE_CANTOPEN	.\sqlite3.h	395;"	d
SQLITE_CANTOPEN_BKPT	.\sqliteInt.h	2433;"	d
SQLITE_CANTOPEN_NOTEMPDIR	.\sqlite3.h	457;"	d
SQLITE_COLL_BINARY	.\sqliteInt.h	1093;"	d
SQLITE_COLL_NOCASE	.\sqliteInt.h	1094;"	d
SQLITE_COLL_REVERSE	.\sqliteInt.h	1095;"	d
SQLITE_COLL_USER	.\sqliteInt.h	1096;"	d
SQLITE_CONFIG_GETMALLOC	.\sqlite3.h	1383;"	d
SQLITE_CONFIG_GETMUTEX	.\sqlite3.h	1389;"	d
SQLITE_CONFIG_GETPCACHE	.\sqlite3.h	1393;"	d
SQLITE_CONFIG_HEAP	.\sqlite3.h	1386;"	d
SQLITE_CONFIG_LOG	.\sqlite3.h	1394;"	d
SQLITE_CONFIG_LOOKASIDE	.\sqlite3.h	1391;"	d
SQLITE_CONFIG_MALLOC	.\sqlite3.h	1382;"	d
SQLITE_CONFIG_MEMSTATUS	.\sqlite3.h	1387;"	d
SQLITE_CONFIG_MULTITHREAD	.\sqlite3.h	1380;"	d
SQLITE_CONFIG_MUTEX	.\sqlite3.h	1388;"	d
SQLITE_CONFIG_PAGECACHE	.\sqlite3.h	1385;"	d
SQLITE_CONFIG_PCACHE	.\sqlite3.h	1392;"	d
SQLITE_CONFIG_SCRATCH	.\sqlite3.h	1384;"	d
SQLITE_CONFIG_SERIALIZED	.\sqlite3.h	1381;"	d
SQLITE_CONFIG_SINGLETHREAD	.\sqlite3.h	1379;"	d
SQLITE_CONSTRAINT	.\sqlite3.h	400;"	d
SQLITE_COPY	.\sqlite3.h	2169;"	d
SQLITE_CORE	.\fts3.c	298;"	d	file:
SQLITE_CORE	.\loadext.c	17;"	d	file:
SQLITE_CORRUPT	.\sqlite3.h	392;"	d
SQLITE_CORRUPT_BKPT	.\sqliteInt.h	2431;"	d
SQLITE_CREATE_INDEX	.\sqlite3.h	2137;"	d
SQLITE_CREATE_TABLE	.\sqlite3.h	2138;"	d
SQLITE_CREATE_TEMP_INDEX	.\sqlite3.h	2139;"	d
SQLITE_CREATE_TEMP_TABLE	.\sqlite3.h	2140;"	d
SQLITE_CREATE_TEMP_TRIGGER	.\sqlite3.h	2141;"	d
SQLITE_CREATE_TEMP_VIEW	.\sqlite3.h	2142;"	d
SQLITE_CREATE_TRIGGER	.\sqlite3.h	2143;"	d
SQLITE_CREATE_VIEW	.\sqlite3.h	2144;"	d
SQLITE_CREATE_VTABLE	.\sqlite3.h	2165;"	d
SQLITE_ColumnCache	.\sqliteInt.h	924;"	d
SQLITE_CountRows	.\sqliteInt.h	896;"	d
SQLITE_DBCONFIG_LOOKASIDE	.\sqlite3.h	1428;"	d
SQLITE_DBSTATUS_CACHE_USED	.\sqlite3.h	5293;"	d
SQLITE_DBSTATUS_LOOKASIDE_USED	.\sqlite3.h	5292;"	d
SQLITE_DBSTATUS_MAX	.\sqlite3.h	5296;"	d
SQLITE_DBSTATUS_SCHEMA_USED	.\sqlite3.h	5294;"	d
SQLITE_DBSTATUS_STMT_USED	.\sqlite3.h	5295;"	d
SQLITE_DEFAULT_AUTOVACUUM	.\btree.h	29;"	d
SQLITE_DEFAULT_CACHE_SIZE	.\sqliteLimit.h	105;"	d
SQLITE_DEFAULT_FILE_FORMAT	.\sqliteInt.h	344;"	d
SQLITE_DEFAULT_FILE_PERMISSIONS	.\os_unix.c	157;"	d	file:
SQLITE_DEFAULT_JOURNAL_SIZE_LIMIT	.\pager.h	26;"	d
SQLITE_DEFAULT_MEMSTATUS	.\sqliteInt.h	136;"	d
SQLITE_DEFAULT_PAGE_SIZE	.\sqliteLimit.h	157;"	d
SQLITE_DEFAULT_PAGE_SIZE	.\sqliteLimit.h	160;"	d
SQLITE_DEFAULT_PAGE_SIZE	.\sqliteLimit.h	161;"	d
SQLITE_DEFAULT_PROXYDIR_PERMISSIONS	.\os_unix.c	164;"	d	file:
SQLITE_DEFAULT_RECURSIVE_TRIGGERS	.\sqliteInt.h	352;"	d
SQLITE_DEFAULT_SECTOR_SIZE	.\os.h	114;"	d
SQLITE_DEFAULT_TEMP_CACHE_SIZE	.\sqliteLimit.h	108;"	d
SQLITE_DEFAULT_WAL_AUTOCHECKPOINT	.\sqliteLimit.h	116;"	d
SQLITE_DELETE	.\sqlite3.h	2145;"	d
SQLITE_DENY	.\sqlite3.h	2114;"	d
SQLITE_DEPRECATED	.\sqlite3.h	70;"	d
SQLITE_DETACH	.\sqlite3.h	2161;"	d
SQLITE_DONE	.\sqlite3.h	409;"	d
SQLITE_DROP_INDEX	.\sqlite3.h	2146;"	d
SQLITE_DROP_TABLE	.\sqlite3.h	2147;"	d
SQLITE_DROP_TEMP_INDEX	.\sqlite3.h	2148;"	d
SQLITE_DROP_TEMP_TABLE	.\sqlite3.h	2149;"	d
SQLITE_DROP_TEMP_TRIGGER	.\sqlite3.h	2150;"	d
SQLITE_DROP_TEMP_VIEW	.\sqlite3.h	2151;"	d
SQLITE_DROP_TRIGGER	.\sqlite3.h	2152;"	d
SQLITE_DROP_VIEW	.\sqlite3.h	2153;"	d
SQLITE_DROP_VTABLE	.\sqlite3.h	2166;"	d
SQLITE_DYNAMIC	.\sqliteInt.h	541;"	d
SQLITE_EBCDIC	.\sqliteInt.h	376;"	d
SQLITE_EMPTY	.\sqlite3.h	397;"	d
SQLITE_ENABLE_FTS3	.\sqliteInt.h	2442;"	d
SQLITE_ENABLE_LOCKING_STYLE	.\os_unix.c	68;"	d	file:
SQLITE_ENABLE_LOCKING_STYLE	.\os_unix.c	70;"	d	file:
SQLITE_ENABLE_LOCKING_STYLE	.\pragma.c	778;"	d	file:
SQLITE_ERROR	.\sqlite3.h	382;"	d
SQLITE_EXPERIMENTAL	.\sqlite3.h	71;"	d
SQLITE_EXTENSION_INIT1	.\sqlite3ext.h	375;"	d
SQLITE_EXTENSION_INIT2	.\sqlite3ext.h	376;"	d
SQLITE_EXTERN	.\sqlite3.h	49;"	d
SQLITE_FAULTINJECTOR_COUNT	.\sqliteInt.h	3037;"	d
SQLITE_FAULTINJECTOR_MALLOC	.\sqliteInt.h	3036;"	d
SQLITE_FCNTL_CHUNK_SIZE	.\sqlite3.h	712;"	d
SQLITE_FCNTL_DB_UNCHANGED	.\os.h	247;"	d
SQLITE_FCNTL_LOCKSTATE	.\sqlite3.h	707;"	d
SQLITE_FCNTL_SIZE_HINT	.\sqlite3.h	711;"	d
SQLITE_FILE_HEADER	.\btreeInt.h	247;"	d
SQLITE_FLOAT	.\sqlite3.h	3041;"	d
SQLITE_FORMAT	.\sqlite3.h	405;"	d
SQLITE_FSFLAGS_IS_MSDOS	.\os_unix.c	142;"	d	file:
SQLITE_FTS3_DEFAULT_NEAR_PARAM	.\fts3_expr.c	78;"	d	file:
SQLITE_FULL	.\sqlite3.h	394;"	d
SQLITE_FUNCTION	.\sqlite3.h	2167;"	d
SQLITE_FUNC_CASE	.\sqliteInt.h	965;"	d
SQLITE_FUNC_COALESCE	.\sqliteInt.h	970;"	d
SQLITE_FUNC_COUNT	.\sqliteInt.h	969;"	d
SQLITE_FUNC_EPHEM	.\sqliteInt.h	966;"	d
SQLITE_FUNC_LIKE	.\sqliteInt.h	964;"	d
SQLITE_FUNC_NEEDCOLL	.\sqliteInt.h	967;"	d
SQLITE_FUNC_PRIVATE	.\sqliteInt.h	968;"	d
SQLITE_ForeignKeys	.\sqliteInt.h	914;"	d
SQLITE_FullColNames	.\sqliteInt.h	894;"	d
SQLITE_FullFSync	.\sqliteInt.h	909;"	d
SQLITE_GET_LOCKPROXYFILE	.\sqlite3.h	708;"	d
SQLITE_GroupByOrder	.\sqliteInt.h	928;"	d
SQLITE_HAVE_ISNAN	.\sqliteInt.h	319;"	d
SQLITE_IGNORE	.\sqlite3.h	2115;"	d
SQLITE_INDEX_CONSTRAINT_EQ	.\sqlite3.h	4426;"	d
SQLITE_INDEX_CONSTRAINT_GE	.\sqlite3.h	4430;"	d
SQLITE_INDEX_CONSTRAINT_GT	.\sqlite3.h	4427;"	d
SQLITE_INDEX_CONSTRAINT_LE	.\sqlite3.h	4428;"	d
SQLITE_INDEX_CONSTRAINT_LT	.\sqlite3.h	4429;"	d
SQLITE_INDEX_CONSTRAINT_MATCH	.\sqlite3.h	4431;"	d
SQLITE_INDEX_SAMPLES	.\sqliteInt.h	84;"	d
SQLITE_INSERT	.\sqlite3.h	2154;"	d
SQLITE_INTEGER	.\sqlite3.h	3040;"	d
SQLITE_INTEGRITY_CHECK_ERROR_MAX	.\pragma.c	1062;"	d	file:
SQLITE_INTERNAL	.\sqlite3.h	383;"	d
SQLITE_INTERRUPT	.\sqlite3.h	390;"	d
SQLITE_INT_TO_PTR	.\sqliteInt.h	103;"	d
SQLITE_INT_TO_PTR	.\sqliteInt.h	106;"	d
SQLITE_INT_TO_PTR	.\sqliteInt.h	109;"	d
SQLITE_INT_TO_PTR	.\sqliteInt.h	112;"	d
SQLITE_IOCAP_ATOMIC	.\sqlite3.h	506;"	d
SQLITE_IOCAP_ATOMIC16K	.\sqlite3.h	512;"	d
SQLITE_IOCAP_ATOMIC1K	.\sqlite3.h	508;"	d
SQLITE_IOCAP_ATOMIC2K	.\sqlite3.h	509;"	d
SQLITE_IOCAP_ATOMIC32K	.\sqlite3.h	513;"	d
SQLITE_IOCAP_ATOMIC4K	.\sqlite3.h	510;"	d
SQLITE_IOCAP_ATOMIC512	.\sqlite3.h	507;"	d
SQLITE_IOCAP_ATOMIC64K	.\sqlite3.h	514;"	d
SQLITE_IOCAP_ATOMIC8K	.\sqlite3.h	511;"	d
SQLITE_IOCAP_SAFE_APPEND	.\sqlite3.h	515;"	d
SQLITE_IOCAP_SEQUENTIAL	.\sqlite3.h	516;"	d
SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN	.\sqlite3.h	517;"	d
SQLITE_IOERR	.\sqlite3.h	391;"	d
SQLITE_IOERR_ACCESS	.\sqlite3.h	447;"	d
SQLITE_IOERR_BLOCKED	.\sqlite3.h	445;"	d
SQLITE_IOERR_CHECKRESERVEDLOCK	.\sqlite3.h	448;"	d
SQLITE_IOERR_CLOSE	.\sqlite3.h	450;"	d
SQLITE_IOERR_DELETE	.\sqlite3.h	444;"	d
SQLITE_IOERR_DIR_CLOSE	.\sqlite3.h	451;"	d
SQLITE_IOERR_DIR_FSYNC	.\sqlite3.h	439;"	d
SQLITE_IOERR_FSTAT	.\sqlite3.h	441;"	d
SQLITE_IOERR_FSYNC	.\sqlite3.h	438;"	d
SQLITE_IOERR_LOCK	.\sqlite3.h	449;"	d
SQLITE_IOERR_NOMEM	.\sqlite3.h	446;"	d
SQLITE_IOERR_RDLOCK	.\sqlite3.h	443;"	d
SQLITE_IOERR_READ	.\sqlite3.h	435;"	d
SQLITE_IOERR_SHMLOCK	.\sqlite3.h	454;"	d
SQLITE_IOERR_SHMOPEN	.\sqlite3.h	452;"	d
SQLITE_IOERR_SHMSIZE	.\sqlite3.h	453;"	d
SQLITE_IOERR_SHORT_READ	.\sqlite3.h	436;"	d
SQLITE_IOERR_TRUNCATE	.\sqlite3.h	440;"	d
SQLITE_IOERR_UNLOCK	.\sqlite3.h	442;"	d
SQLITE_IOERR_WRITE	.\sqlite3.h	437;"	d
SQLITE_IgnoreChecks	.\sqliteInt.h	906;"	d
SQLITE_IndexCover	.\sqliteInt.h	927;"	d
SQLITE_IndexSearch	.\sqliteInt.h	926;"	d
SQLITE_IndexSort	.\sqliteInt.h	925;"	d
SQLITE_InternChanges	.\sqliteInt.h	893;"	d
SQLITE_JUMPIFNULL	.\sqliteInt.h	1136;"	d
SQLITE_LAST_ERRNO	.\sqlite3.h	710;"	d
SQLITE_LIMIT_ATTACHED	.\sqlite3.h	2481;"	d
SQLITE_LIMIT_COLUMN	.\sqlite3.h	2476;"	d
SQLITE_LIMIT_COMPOUND_SELECT	.\sqlite3.h	2478;"	d
SQLITE_LIMIT_EXPR_DEPTH	.\sqlite3.h	2477;"	d
SQLITE_LIMIT_FUNCTION_ARG	.\sqlite3.h	2480;"	d
SQLITE_LIMIT_LENGTH	.\sqlite3.h	2474;"	d
SQLITE_LIMIT_LIKE_PATTERN_LENGTH	.\sqlite3.h	2482;"	d
SQLITE_LIMIT_SQL_LENGTH	.\sqlite3.h	2475;"	d
SQLITE_LIMIT_TRIGGER_DEPTH	.\sqlite3.h	2484;"	d
SQLITE_LIMIT_VARIABLE_NUMBER	.\sqlite3.h	2483;"	d
SQLITE_LIMIT_VDBE_OP	.\sqlite3.h	2479;"	d
SQLITE_LITTLEENDIAN	.\sqliteInt.h	454;"	d
SQLITE_LITTLEENDIAN	.\sqliteInt.h	458;"	d
SQLITE_LOCKED	.\sqlite3.h	387;"	d
SQLITE_LOCKED_SHAREDCACHE	.\sqlite3.h	455;"	d
SQLITE_LOCK_EXCLUSIVE	.\sqlite3.h	530;"	d
SQLITE_LOCK_NONE	.\sqlite3.h	526;"	d
SQLITE_LOCK_PENDING	.\sqlite3.h	529;"	d
SQLITE_LOCK_RESERVED	.\sqlite3.h	528;"	d
SQLITE_LOCK_SHARED	.\sqlite3.h	527;"	d
SQLITE_LegacyFileFmt	.\sqliteInt.h	908;"	d
SQLITE_LoadExtension	.\sqliteInt.h	910;"	d
SQLITE_MAGIC_BUSY	.\sqliteInt.h	939;"	d
SQLITE_MAGIC_CLOSED	.\sqliteInt.h	937;"	d
SQLITE_MAGIC_ERROR	.\sqliteInt.h	940;"	d
SQLITE_MAGIC_OPEN	.\sqliteInt.h	936;"	d
SQLITE_MAGIC_SICK	.\sqliteInt.h	938;"	d
SQLITE_MALLOC_SOFT_LIMIT	.\sqliteInt.h	165;"	d
SQLITE_MAX_ATTACHED	.\sqliteLimit.h	125;"	d
SQLITE_MAX_COLUMN	.\sqliteLimit.h	45;"	d
SQLITE_MAX_COMPOUND_SELECT	.\sqliteLimit.h	82;"	d
SQLITE_MAX_DEFAULT_PAGE_SIZE	.\sqliteLimit.h	172;"	d
SQLITE_MAX_DEFAULT_PAGE_SIZE	.\sqliteLimit.h	175;"	d
SQLITE_MAX_DEFAULT_PAGE_SIZE	.\sqliteLimit.h	176;"	d
SQLITE_MAX_EXPR_DEPTH	.\sqliteLimit.h	70;"	d
SQLITE_MAX_FILE_FORMAT	.\sqliteInt.h	342;"	d
SQLITE_MAX_FUNCTION_ARG	.\sqliteLimit.h	97;"	d
SQLITE_MAX_LENGTH	.\sqliteLimit.h	24;"	d
SQLITE_MAX_LIKE_PATTERN_LENGTH	.\sqliteLimit.h	196;"	d
SQLITE_MAX_PAGE_COUNT	.\sqliteLimit.h	188;"	d
SQLITE_MAX_PAGE_SIZE	.\sqliteLimit.h	148;"	d
SQLITE_MAX_PAGE_SIZE	.\sqliteLimit.h	150;"	d
SQLITE_MAX_SQL_LENGTH	.\sqliteLimit.h	56;"	d
SQLITE_MAX_TRIGGER_DEPTH	.\sqliteLimit.h	207;"	d
SQLITE_MAX_U32	.\sqliteInt.h	440;"	d
SQLITE_MAX_VARIABLE_NUMBER	.\sqliteLimit.h	133;"	d
SQLITE_MAX_VDBE_OP	.\sqliteLimit.h	90;"	d
SQLITE_MISMATCH	.\sqlite3.h	401;"	d
SQLITE_MISUSE	.\sqlite3.h	402;"	d
SQLITE_MISUSE_BKPT	.\sqliteInt.h	2432;"	d
SQLITE_MIXED_ENDIAN_64BIT_FLOAT	.\sqliteInt.h	318;"	d
SQLITE_MUTEX_FAST	.\sqlite3.h	5015;"	d
SQLITE_MUTEX_NOOP	.\mutex.h	53;"	d
SQLITE_MUTEX_NREF	.\mutex_unix.c	33;"	d	file:
SQLITE_MUTEX_NREF	.\mutex_unix.c	35;"	d	file:
SQLITE_MUTEX_OMIT	.\mutex.h	43;"	d
SQLITE_MUTEX_OS2	.\mutex.h	51;"	d
SQLITE_MUTEX_PTHREADS	.\mutex.h	47;"	d
SQLITE_MUTEX_RECURSIVE	.\sqlite3.h	5016;"	d
SQLITE_MUTEX_STATIC_LRU	.\sqlite3.h	5022;"	d
SQLITE_MUTEX_STATIC_LRU2	.\sqlite3.h	5023;"	d
SQLITE_MUTEX_STATIC_MASTER	.\sqlite3.h	5017;"	d
SQLITE_MUTEX_STATIC_MEM	.\sqlite3.h	5018;"	d
SQLITE_MUTEX_STATIC_MEM2	.\sqlite3.h	5019;"	d
SQLITE_MUTEX_STATIC_OPEN	.\sqlite3.h	5020;"	d
SQLITE_MUTEX_STATIC_PRNG	.\sqlite3.h	5021;"	d
SQLITE_MUTEX_W32	.\mutex.h	49;"	d
SQLITE_NOLFS	.\sqlite3.h	403;"	d
SQLITE_NOMEM	.\sqlite3.h	388;"	d
SQLITE_NOTADB	.\sqlite3.h	407;"	d
SQLITE_NOTFOUND	.\sqlite3.h	393;"	d
SQLITE_NULL	.\sqlite3.h	3043;"	d
SQLITE_NULLEQ	.\sqliteInt.h	1138;"	d
SQLITE_N_BTREE_META	.\btree.h	22;"	d
SQLITE_N_COLCACHE	.\sqliteInt.h	2058;"	d
SQLITE_N_KEYWORD	.\keywordhash.h	270;"	d
SQLITE_N_LIMIT	.\sqliteInt.h	705;"	d
SQLITE_NoReadlock	.\sqliteInt.h	904;"	d
SQLITE_NullCallback	.\sqliteInt.h	899;"	d
SQLITE_OK	.\sqlite3.h	380;"	d
SQLITE_OMIT_DATETIME_FUNCS	.\sqliteInt.h	316;"	d
SQLITE_OMIT_TRACE	.\sqliteInt.h	317;"	d
SQLITE_OPEN_AUTOPROXY	.\sqlite3.h	472;"	d
SQLITE_OPEN_CREATE	.\sqlite3.h	469;"	d
SQLITE_OPEN_DELETEONCLOSE	.\sqlite3.h	470;"	d
SQLITE_OPEN_EXCLUSIVE	.\sqlite3.h	471;"	d
SQLITE_OPEN_FULLMUTEX	.\sqlite3.h	481;"	d
SQLITE_OPEN_MAIN_DB	.\sqlite3.h	473;"	d
SQLITE_OPEN_MAIN_JOURNAL	.\sqlite3.h	476;"	d
SQLITE_OPEN_MASTER_JOURNAL	.\sqlite3.h	479;"	d
SQLITE_OPEN_NOMUTEX	.\sqlite3.h	480;"	d
SQLITE_OPEN_PRIVATECACHE	.\sqlite3.h	483;"	d
SQLITE_OPEN_READONLY	.\sqlite3.h	467;"	d
SQLITE_OPEN_READWRITE	.\sqlite3.h	468;"	d
SQLITE_OPEN_SHAREDCACHE	.\sqlite3.h	482;"	d
SQLITE_OPEN_SUBJOURNAL	.\sqlite3.h	478;"	d
SQLITE_OPEN_TEMP_DB	.\sqlite3.h	474;"	d
SQLITE_OPEN_TEMP_JOURNAL	.\sqlite3.h	477;"	d
SQLITE_OPEN_TRANSIENT_DB	.\sqlite3.h	475;"	d
SQLITE_OPEN_WAL	.\sqlite3.h	484;"	d
SQLITE_OS2_THREADS	.\os_os2.c	50;"	d	file:
SQLITE_OS_OS2	.\os.h	36;"	d
SQLITE_OS_OS2	.\os.h	37;"	d
SQLITE_OS_OS2	.\os.h	48;"	d
SQLITE_OS_OS2	.\os.h	52;"	d
SQLITE_OS_OS2	.\os.h	56;"	d
SQLITE_OS_OS2	.\os.h	60;"	d
SQLITE_OS_OTHER	.\os.h	39;"	d
SQLITE_OS_OTHER	.\os.h	43;"	d
SQLITE_OS_UNIX	.\os.h	32;"	d
SQLITE_OS_UNIX	.\os.h	33;"	d
SQLITE_OS_UNIX	.\os.h	47;"	d
SQLITE_OS_UNIX	.\os.h	51;"	d
SQLITE_OS_UNIX	.\os.h	55;"	d
SQLITE_OS_UNIX	.\os.h	59;"	d
SQLITE_OS_WIN	.\os.h	34;"	d
SQLITE_OS_WIN	.\os.h	35;"	d
SQLITE_OS_WIN	.\os.h	46;"	d
SQLITE_OS_WIN	.\os.h	50;"	d
SQLITE_OS_WIN	.\os.h	54;"	d
SQLITE_OS_WIN	.\os.h	64;"	d
SQLITE_OS_WINCE	.\os.h	73;"	d
SQLITE_OS_WINCE	.\os.h	75;"	d
SQLITE_OptMask	.\sqliteInt.h	929;"	d
SQLITE_PERM	.\sqlite3.h	384;"	d
SQLITE_PRAGMA	.\sqlite3.h	2155;"	d
SQLITE_PRINT_BUF_SIZE	.\printf.c	194;"	d	file:
SQLITE_PRINT_BUF_SIZE	.\printf.c	196;"	d	file:
SQLITE_PROTOCOL	.\sqlite3.h	396;"	d
SQLITE_PTR_TO_INT	.\sqliteInt.h	104;"	d
SQLITE_PTR_TO_INT	.\sqliteInt.h	107;"	d
SQLITE_PTR_TO_INT	.\sqliteInt.h	110;"	d
SQLITE_PTR_TO_INT	.\sqliteInt.h	113;"	d
SQLITE_PreferBuiltin	.\sqliteInt.h	916;"	d
SQLITE_QueryFlattener	.\sqliteInt.h	923;"	d
SQLITE_RANGE	.\sqlite3.h	406;"	d
SQLITE_READ	.\sqlite3.h	2156;"	d
SQLITE_READONLY	.\sqlite3.h	389;"	d
SQLITE_REINDEX	.\sqlite3.h	2163;"	d
SQLITE_ROW	.\sqlite3.h	408;"	d
SQLITE_ReadUncommitted	.\sqliteInt.h	907;"	d
SQLITE_RecTriggers	.\sqliteInt.h	913;"	d
SQLITE_RecoveryMode	.\sqliteInt.h	911;"	d
SQLITE_ReverseOrder	.\sqliteInt.h	912;"	d
SQLITE_SAVEPOINT	.\sqlite3.h	2168;"	d
SQLITE_SCHEMA	.\sqlite3.h	398;"	d
SQLITE_SELECT	.\sqlite3.h	2157;"	d
SQLITE_SET_LOCKPROXYFILE	.\sqlite3.h	709;"	d
SQLITE_SHM_EXCLUSIVE	.\sqlite3.h	944;"	d
SQLITE_SHM_LOCK	.\sqlite3.h	942;"	d
SQLITE_SHM_NLOCK	.\sqlite3.h	954;"	d
SQLITE_SHM_SHARED	.\sqlite3.h	943;"	d
SQLITE_SHM_UNLOCK	.\sqlite3.h	941;"	d
SQLITE_SKIP_UTF8	.\sqliteInt.h	2415;"	d
SQLITE_SOURCE_ID	.\sqlite3.h	112;"	d
SQLITE_SO_ASC	.\sqliteInt.h	1101;"	d
SQLITE_SO_DESC	.\sqliteInt.h	1102;"	d
SQLITE_STATIC	.\sqlite3.h	3578;"	d
SQLITE_STATUS_MALLOC_COUNT	.\sqlite3.h	5230;"	d
SQLITE_STATUS_MALLOC_SIZE	.\sqlite3.h	5226;"	d
SQLITE_STATUS_MEMORY_USED	.\sqlite3.h	5221;"	d
SQLITE_STATUS_PAGECACHE_OVERFLOW	.\sqlite3.h	5223;"	d
SQLITE_STATUS_PAGECACHE_SIZE	.\sqlite3.h	5228;"	d
SQLITE_STATUS_PAGECACHE_USED	.\sqlite3.h	5222;"	d
SQLITE_STATUS_PARSER_STACK	.\sqlite3.h	5227;"	d
SQLITE_STATUS_SCRATCH_OVERFLOW	.\sqlite3.h	5225;"	d
SQLITE_STATUS_SCRATCH_SIZE	.\sqlite3.h	5229;"	d
SQLITE_STATUS_SCRATCH_USED	.\sqlite3.h	5224;"	d
SQLITE_STMTSTATUS_AUTOINDEX	.\sqlite3.h	5354;"	d
SQLITE_STMTSTATUS_FULLSCAN_STEP	.\sqlite3.h	5352;"	d
SQLITE_STMTSTATUS_SORT	.\sqlite3.h	5353;"	d
SQLITE_STOREP2	.\sqliteInt.h	1137;"	d
SQLITE_SYNC_DATAONLY	.\sqlite3.h	548;"	d
SQLITE_SYNC_FULL	.\sqlite3.h	547;"	d
SQLITE_SYNC_NORMAL	.\sqlite3.h	546;"	d
SQLITE_SYSTEM_MALLOC	.\sqliteInt.h	157;"	d
SQLITE_ShortColNames	.\sqliteInt.h	895;"	d
SQLITE_SqlTrace	.\sqliteInt.h	901;"	d
SQLITE_TCL_NRE	.\tclsqlite.c	1467;"	d	file:
SQLITE_TCL_NRE	.\tclsqlite.c	1483;"	d	file:
SQLITE_TEMPNAME_SIZE	.\os.h	100;"	d
SQLITE_TEMPNAME_SIZE	.\os.h	84;"	d
SQLITE_TEMPNAME_SIZE	.\os.h	98;"	d
SQLITE_TEMP_FILE_PREFIX	.\os.h	139;"	d
SQLITE_TEMP_STORE	.\sqliteInt.h	360;"	d
SQLITE_TESTCTRL_ALWAYS	.\sqlite3.h	5103;"	d
SQLITE_TESTCTRL_ASSERT	.\sqlite3.h	5102;"	d
SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS	.\sqlite3.h	5100;"	d
SQLITE_TESTCTRL_BITVEC_TEST	.\sqlite3.h	5098;"	d
SQLITE_TESTCTRL_FAULT_INSTALL	.\sqlite3.h	5099;"	d
SQLITE_TESTCTRL_FIRST	.\sqlite3.h	5094;"	d
SQLITE_TESTCTRL_ISKEYWORD	.\sqlite3.h	5106;"	d
SQLITE_TESTCTRL_LAST	.\sqlite3.h	5108;"	d
SQLITE_TESTCTRL_OPTIMIZATIONS	.\sqlite3.h	5105;"	d
SQLITE_TESTCTRL_PENDING_BYTE	.\sqlite3.h	5101;"	d
SQLITE_TESTCTRL_PGHDRSZ	.\sqlite3.h	5107;"	d
SQLITE_TESTCTRL_PRNG_RESET	.\sqlite3.h	5097;"	d
SQLITE_TESTCTRL_PRNG_RESTORE	.\sqlite3.h	5096;"	d
SQLITE_TESTCTRL_PRNG_SAVE	.\sqlite3.h	5095;"	d
SQLITE_TESTCTRL_RESERVE	.\sqlite3.h	5104;"	d
SQLITE_TEXT	.\sqlite3.h	3045;"	d
SQLITE_TEXT	.\sqlite3.h	3047;"	d
SQLITE_THREADSAFE	.\sqliteInt.h	123;"	d
SQLITE_THREADSAFE	.\sqliteInt.h	125;"	d
SQLITE_TOOBIG	.\sqlite3.h	399;"	d
SQLITE_TRANSACTION	.\sqlite3.h	2158;"	d
SQLITE_TRANSIENT	.\sqlite3.h	3579;"	d
SQLITE_UNIX_THREADS	.\os_unix.c	150;"	d	file:
SQLITE_UPDATE	.\sqlite3.h	2159;"	d
SQLITE_UTF16	.\sqlite3.h	3370;"	d
SQLITE_UTF16BE	.\sqlite3.h	3369;"	d
SQLITE_UTF16LE	.\sqlite3.h	3368;"	d
SQLITE_UTF16NATIVE	.\sqliteInt.h	455;"	d
SQLITE_UTF16NATIVE	.\sqliteInt.h	459;"	d
SQLITE_UTF16_ALIGNED	.\sqlite3.h	3372;"	d
SQLITE_UTF8	.\sqlite3.h	3367;"	d
SQLITE_VERSION	.\sqlite3.h	110;"	d
SQLITE_VERSION	.\sqlite3.h	77;"	d
SQLITE_VERSION_NUMBER	.\sqlite3.h	111;"	d
SQLITE_VERSION_NUMBER	.\sqlite3.h	80;"	d
SQLITE_VdbeListing	.\sqliteInt.h	902;"	d
SQLITE_VdbeTrace	.\sqliteInt.h	892;"	d
SQLITE_W32_MUTEX_INITIALIZER	.\mutex_w32.c	34;"	d	file:
SQLITE_W32_THREADS	.\os_win.c	55;"	d	file:
SQLITE_WHOLE_FILE_LOCKING	.\os_unix.c	247;"	d	file:
SQLITE_WSD	.\sqliteInt.h	558;"	d
SQLITE_WSD	.\sqliteInt.h	564;"	d
SQLITE_WriteSchema	.\sqliteInt.h	903;"	d
SQL_CONTENT_INSERT	.\fts3_write.c	155;"	d	file:
SQL_DELETE_ALL_CONTENT	.\fts3_write.c	139;"	d	file:
SQL_DELETE_ALL_DOCSIZE	.\fts3_write.c	142;"	d	file:
SQL_DELETE_ALL_SEGDIR	.\fts3_write.c	141;"	d	file:
SQL_DELETE_ALL_SEGMENTS	.\fts3_write.c	140;"	d	file:
SQL_DELETE_ALL_STAT	.\fts3_write.c	143;"	d	file:
SQL_DELETE_CONTENT	.\fts3_write.c	137;"	d	file:
SQL_DELETE_DOCSIZE	.\fts3_write.c	157;"	d	file:
SQL_DELETE_SEGDIR_BY_LEVEL	.\fts3_write.c	153;"	d	file:
SQL_DELETE_SEGMENTS_RANGE	.\fts3_write.c	154;"	d	file:
SQL_GET_BLOCK	.\fts3_write.c	156;"	d	file:
SQL_INSERT_SEGDIR	.\fts3_write.c	148;"	d	file:
SQL_INSERT_SEGMENTS	.\fts3_write.c	146;"	d	file:
SQL_IS_EMPTY	.\fts3_write.c	138;"	d	file:
SQL_NEXT_SEGMENTS_ID	.\fts3_write.c	147;"	d	file:
SQL_NEXT_SEGMENT_INDEX	.\fts3_write.c	145;"	d	file:
SQL_REPLACE_DOCSIZE	.\fts3_write.c	158;"	d	file:
SQL_REPLACE_DOCTOTAL	.\fts3_write.c	161;"	d	file:
SQL_SELECT_ALL_LEVEL	.\fts3_write.c	150;"	d	file:
SQL_SELECT_CONTENT_BY_ROWID	.\fts3_write.c	144;"	d	file:
SQL_SELECT_DOCSIZE	.\fts3_write.c	159;"	d	file:
SQL_SELECT_DOCTOTAL	.\fts3_write.c	160;"	d	file:
SQL_SELECT_LEVEL	.\fts3_write.c	149;"	d	file:
SQL_SELECT_LEVEL_COUNT	.\fts3_write.c	151;"	d	file:
SQL_SELECT_SEGDIR_COUNT_MAX	.\fts3_write.c	152;"	d	file:
SRT_Coroutine	.\sqliteInt.h	2023;"	d
SRT_Discard	.\sqliteInt.h	2013;"	d
SRT_EphemTab	.\sqliteInt.h	2022;"	d
SRT_Except	.\sqliteInt.h	2011;"	d
SRT_Exists	.\sqliteInt.h	2012;"	d
SRT_Mem	.\sqliteInt.h	2019;"	d
SRT_Output	.\sqliteInt.h	2018;"	d
SRT_Set	.\sqliteInt.h	2020;"	d
SRT_Table	.\sqliteInt.h	2021;"	d
SRT_Union	.\sqliteInt.h	2010;"	d
STRICMP	.\build.c	897;"	d	file:
STR_FUNCTION	.\sqliteInt.h	1000;"	d
SWAP	.\where.c	495;"	d	file:
Savepoint	.\sqliteInt.h	/^struct Savepoint {$/;"	s
Savepoint	.\sqliteInt.h	/^typedef struct Savepoint Savepoint;$/;"	t	typeref:struct:Savepoint
Schema	.\sqliteInt.h	/^struct Schema {$/;"	s
Schema	.\sqliteInt.h	/^typedef struct Schema Schema;$/;"	t	typeref:struct:Schema
SegmentNode	.\fts3_write.c	/^struct SegmentNode {$/;"	s	file:
SegmentNode	.\fts3_write.c	/^typedef struct SegmentNode SegmentNode;$/;"	t	typeref:struct:SegmentNode	file:
SegmentWriter	.\fts3_write.c	/^struct SegmentWriter {$/;"	s	file:
SegmentWriter	.\fts3_write.c	/^typedef struct SegmentWriter SegmentWriter;$/;"	t	typeref:struct:SegmentWriter	file:
Select	.\sqliteInt.h	/^struct Select {$/;"	s
Select	.\sqliteInt.h	/^typedef struct Select Select;$/;"	t	typeref:struct:Select
SelectDest	.\sqliteInt.h	/^struct SelectDest {$/;"	s
SelectDest	.\sqliteInt.h	/^typedef struct SelectDest SelectDest;$/;"	t	typeref:struct:SelectDest
Set	.\vdbeInt.h	/^struct Set {$/;"	s
Set	.\vdbeInt.h	/^typedef struct Set Set;$/;"	t	typeref:struct:Set
ShmRegion	.\os_win.c	/^  struct ShmRegion {$/;"	s	struct:winShmNode	file:
SimulateDiskfullError	.\os_common.h	85;"	d
SimulateDiskfullError	.\os_common.h	99;"	d
SimulateIOError	.\os_common.h	76;"	d
SimulateIOError	.\os_common.h	98;"	d
SimulateIOErrorBenign	.\os_common.h	75;"	d
SimulateIOErrorBenign	.\os_common.h	97;"	d
SizeofArray	.\fts3Int.h	48;"	d
SnippetFragment	.\fts3_snippet.c	/^struct SnippetFragment {$/;"	s	file:
SnippetFragment	.\fts3_snippet.c	/^typedef struct SnippetFragment SnippetFragment;$/;"	t	typeref:struct:SnippetFragment	file:
SnippetIter	.\fts3_snippet.c	/^struct SnippetIter {$/;"	s	file:
SnippetIter	.\fts3_snippet.c	/^typedef struct SnippetIter SnippetIter;$/;"	t	typeref:struct:SnippetIter	file:
SnippetPhrase	.\fts3_snippet.c	/^struct SnippetPhrase {$/;"	s	file:
SnippetPhrase	.\fts3_snippet.c	/^typedef struct SnippetPhrase SnippetPhrase;$/;"	t	typeref:struct:SnippetPhrase	file:
SortByDimension	.\rtree.c	/^static void SortByDimension($/;"	f	file:
SortByDistance	.\rtree.c	/^static void SortByDistance($/;"	f	file:
SplitNode	.\rtree.c	/^static int SplitNode($/;"	f	file:
SqlCollate	.\tclsqlite.c	/^struct SqlCollate {$/;"	s	file:
SqlCollate	.\tclsqlite.c	/^typedef struct SqlCollate SqlCollate;$/;"	t	typeref:struct:SqlCollate	file:
SqlFunc	.\tclsqlite.c	/^struct SqlFunc {$/;"	s	file:
SqlFunc	.\tclsqlite.c	/^typedef struct SqlFunc SqlFunc;$/;"	t	typeref:struct:SqlFunc	file:
SqlPreparedStmt	.\tclsqlite.c	/^struct SqlPreparedStmt {$/;"	s	file:
SqlPreparedStmt	.\tclsqlite.c	/^typedef struct SqlPreparedStmt SqlPreparedStmt;$/;"	t	typeref:struct:SqlPreparedStmt	file:
Sqlite3Config	.\sqliteInt.h	/^struct Sqlite3Config {$/;"	s
Sqlite3_Init	.\tclsqlite.c	/^int Sqlite3_Init(Tcl_Interp *interp){$/;"	f
Sqlite3_SafeInit	.\tclsqlite.c	/^int Sqlite3_SafeInit(Tcl_Interp *interp){ return TCL_OK; }$/;"	f
Sqlite3_SafeUnload	.\tclsqlite.c	/^int Sqlite3_SafeUnload(Tcl_Interp *interp, int flags){ return TCL_OK; }$/;"	f
Sqlite3_Unload	.\tclsqlite.c	/^int Sqlite3_Unload(Tcl_Interp *interp, int flags){ return TCL_OK; }$/;"	f
SqliteDb	.\tclsqlite.c	/^struct SqliteDb {$/;"	s	file:
SqliteDb	.\tclsqlite.c	/^typedef struct SqliteDb SqliteDb;$/;"	t	typeref:struct:SqliteDb	file:
Sqlite_Init	.\tclsqlite.c	/^int Sqlite_Init(Tcl_Interp *interp){ return Sqlite3_Init(interp); }$/;"	f
Sqlite_SafeInit	.\tclsqlite.c	/^int Sqlite_SafeInit(Tcl_Interp *interp){ return TCL_OK; }$/;"	f
Sqlite_SafeUnload	.\tclsqlite.c	/^int Sqlite_SafeUnload(Tcl_Interp *interp, int flags){ return TCL_OK; }$/;"	f
Sqlite_Unload	.\tclsqlite.c	/^int Sqlite_Unload(Tcl_Interp *interp, int flags){ return TCL_OK; }$/;"	f
SrcList	.\sqliteInt.h	/^struct SrcList {$/;"	s
SrcList	.\sqliteInt.h	/^typedef struct SrcList SrcList;$/;"	t	typeref:struct:SrcList
SrcList_item	.\sqliteInt.h	/^  struct SrcList_item {$/;"	s	struct:SrcList
StrAccum	.\sqliteInt.h	/^struct StrAccum {$/;"	s
StrAccum	.\sqliteInt.h	/^typedef struct StrAccum StrAccum;$/;"	t	typeref:struct:StrAccum
StrBuffer	.\fts3_snippet.c	/^struct StrBuffer {$/;"	s	file:
StrBuffer	.\fts3_snippet.c	/^typedef struct StrBuffer StrBuffer;$/;"	t	typeref:struct:StrBuffer	file:
Stringify	.\vdbe.c	124;"	d	file:
SubProgram	.\vdbe.h	/^struct SubProgram {$/;"	s
SubProgram	.\vdbe.h	/^typedef struct SubProgram SubProgram;$/;"	t	typeref:struct:SubProgram
SumCtx	.\func.c	/^struct SumCtx {$/;"	s	file:
SumCtx	.\func.c	/^typedef struct SumCtx SumCtx;$/;"	t	typeref:struct:SumCtx	file:
TCLSH_MAIN	.\tclsqlite.c	/^int TCLSH_MAIN(int argc, char **argv){$/;"	f
TCLSH_MAIN	.\tclsqlite.c	3608;"	d	file:
TCL_STORAGE_CLASS	.\tclsqlite.c	49;"	d	file:
TCL_STORAGE_CLASS	.\tclsqlite.c	50;"	d	file:
TEMP_MASTER_NAME	.\sqliteInt.h	519;"	d
TERM_ANDINFO	.\where.c	118;"	d	file:
TERM_CODED	.\where.c	115;"	d	file:
TERM_COPIED	.\where.c	116;"	d	file:
TERM_DYNAMIC	.\where.c	113;"	d	file:
TERM_ORINFO	.\where.c	117;"	d	file:
TERM_OR_OK	.\where.c	119;"	d	file:
TERM_VIRTUAL	.\where.c	114;"	d	file:
TESTBIT	.\bitvec.c	301;"	d	file:
TESTONLY	.\sqliteInt.h	230;"	d
TESTONLY	.\sqliteInt.h	232;"	d
TF_Autoincrement	.\sqliteInt.h	1255;"	d
TF_Ephemeral	.\sqliteInt.h	1253;"	d
TF_HasPrimaryKey	.\sqliteInt.h	1254;"	d
TF_NeedMetadata	.\sqliteInt.h	1257;"	d
TF_Readonly	.\sqliteInt.h	1252;"	d
TF_Virtual	.\sqliteInt.h	1256;"	d
TIMER_ELAPSED	.\os_common.h	55;"	d
TIMER_ELAPSED	.\os_common.h	59;"	d
TIMER_END	.\os_common.h	54;"	d
TIMER_END	.\os_common.h	58;"	d
TIMER_START	.\os_common.h	53;"	d
TIMER_START	.\os_common.h	57;"	d
TK_ABORT	.\parse.h	28;"	d
TK_ACTION	.\parse.h	29;"	d
TK_ADD	.\parse.h	140;"	d
TK_AFTER	.\parse.h	30;"	d
TK_AGG_COLUMN	.\parse.h	154;"	d
TK_AGG_FUNCTION	.\parse.h	153;"	d
TK_ALL	.\parse.h	113;"	d
TK_ALTER	.\parse.h	139;"	d
TK_ANALYZE	.\parse.h	31;"	d
TK_AND	.\parse.h	69;"	d
TK_ANY	.\parse.h	67;"	d
TK_AS	.\parse.h	24;"	d
TK_ASC	.\parse.h	32;"	d
TK_ATTACH	.\parse.h	33;"	d
TK_AUTOINCR	.\parse.h	103;"	d
TK_BEFORE	.\parse.h	34;"	d
TK_BEGIN	.\parse.h	5;"	d
TK_BETWEEN	.\parse.h	71;"	d
TK_BITAND	.\parse.h	82;"	d
TK_BITNOT	.\parse.h	93;"	d
TK_BITOR	.\parse.h	83;"	d
TK_BLOB	.\parse.h	131;"	d
TK_BY	.\parse.h	35;"	d
TK_CASCADE	.\parse.h	36;"	d
TK_CASE	.\parse.h	134;"	d
TK_CAST	.\parse.h	37;"	d
TK_CHECK	.\parse.h	101;"	d
TK_COLLATE	.\parse.h	92;"	d
TK_COLUMN	.\parse.h	152;"	d
TK_COLUMNKW	.\parse.h	38;"	d
TK_COMMA	.\parse.h	25;"	d
TK_COMMIT	.\parse.h	10;"	d
TK_CONCAT	.\parse.h	91;"	d
TK_CONFLICT	.\parse.h	39;"	d
TK_CONSTRAINT	.\parse.h	96;"	d
TK_CONST_FUNC	.\parse.h	155;"	d
TK_CREATE	.\parse.h	17;"	d
TK_CTIME_KW	.\parse.h	66;"	d
TK_DATABASE	.\parse.h	40;"	d
TK_DEFAULT	.\parse.h	97;"	d
TK_DEFERRABLE	.\parse.h	109;"	d
TK_DEFERRED	.\parse.h	7;"	d
TK_DELETE	.\parse.h	106;"	d
TK_DESC	.\parse.h	41;"	d
TK_DETACH	.\parse.h	42;"	d
TK_DISTINCT	.\parse.h	117;"	d
TK_DOT	.\parse.h	118;"	d
TK_DROP	.\parse.h	111;"	d
TK_EACH	.\parse.h	43;"	d
TK_ELSE	.\parse.h	137;"	d
TK_END	.\parse.h	11;"	d
TK_END_OF_FILE	.\parse.h	147;"	d
TK_EQ	.\parse.h	76;"	d
TK_ESCAPE	.\parse.h	81;"	d
TK_EXCEPT	.\parse.h	114;"	d
TK_EXCLUSIVE	.\parse.h	9;"	d
TK_EXISTS	.\parse.h	20;"	d
TK_EXPLAIN	.\parse.h	2;"	d
TK_FAIL	.\parse.h	44;"	d
TK_FLOAT	.\parse.h	130;"	d
TK_FOR	.\parse.h	45;"	d
TK_FOREIGN	.\parse.h	110;"	d
TK_FROM	.\parse.h	119;"	d
TK_FUNCTION	.\parse.h	151;"	d
TK_GE	.\parse.h	80;"	d
TK_GROUP	.\parse.h	123;"	d
TK_GT	.\parse.h	77;"	d
TK_HAVING	.\parse.h	124;"	d
TK_ID	.\parse.h	26;"	d
TK_IF	.\parse.h	18;"	d
TK_IGNORE	.\parse.h	46;"	d
TK_ILLEGAL	.\parse.h	148;"	d
TK_IMMEDIATE	.\parse.h	8;"	d
TK_IN	.\parse.h	72;"	d
TK_INDEX	.\parse.h	138;"	d
TK_INDEXED	.\parse.h	27;"	d
TK_INITIALLY	.\parse.h	47;"	d
TK_INSERT	.\parse.h	105;"	d
TK_INSTEAD	.\parse.h	48;"	d
TK_INTEGER	.\parse.h	129;"	d
TK_INTERSECT	.\parse.h	115;"	d
TK_INTO	.\parse.h	127;"	d
TK_IS	.\parse.h	70;"	d
TK_ISNOT	.\parse.h	146;"	d
TK_ISNULL	.\parse.h	73;"	d
TK_JOIN	.\parse.h	120;"	d
TK_JOIN_KW	.\parse.h	95;"	d
TK_KEY	.\parse.h	52;"	d
TK_LE	.\parse.h	78;"	d
TK_LIKE_KW	.\parse.h	49;"	d
TK_LIMIT	.\parse.h	125;"	d
TK_LP	.\parse.h	22;"	d
TK_LSHIFT	.\parse.h	84;"	d
TK_LT	.\parse.h	79;"	d
TK_MATCH	.\parse.h	50;"	d
TK_MINUS	.\parse.h	87;"	d
TK_NE	.\parse.h	75;"	d
TK_NO	.\parse.h	51;"	d
TK_NOT	.\parse.h	19;"	d
TK_NOTNULL	.\parse.h	74;"	d
TK_NULL	.\parse.h	98;"	d
TK_OF	.\parse.h	53;"	d
TK_OFFSET	.\parse.h	54;"	d
TK_ON	.\parse.h	104;"	d
TK_OR	.\parse.h	68;"	d
TK_ORDER	.\parse.h	122;"	d
TK_PLAN	.\parse.h	4;"	d
TK_PLUS	.\parse.h	86;"	d
TK_PRAGMA	.\parse.h	55;"	d
TK_PRIMARY	.\parse.h	99;"	d
TK_QUERY	.\parse.h	3;"	d
TK_RAISE	.\parse.h	56;"	d
TK_REFERENCES	.\parse.h	102;"	d
TK_REGISTER	.\parse.h	132;"	d
TK_REINDEX	.\parse.h	64;"	d
TK_RELEASE	.\parse.h	14;"	d
TK_REM	.\parse.h	90;"	d
TK_RENAME	.\parse.h	65;"	d
TK_REPLACE	.\parse.h	57;"	d
TK_RESTRICT	.\parse.h	58;"	d
TK_ROLLBACK	.\parse.h	12;"	d
TK_ROW	.\parse.h	59;"	d
TK_RP	.\parse.h	23;"	d
TK_RSHIFT	.\parse.h	85;"	d
TK_SAVEPOINT	.\parse.h	13;"	d
TK_SELECT	.\parse.h	116;"	d
TK_SEMI	.\parse.h	1;"	d
TK_SET	.\parse.h	108;"	d
TK_SLASH	.\parse.h	89;"	d
TK_SPACE	.\parse.h	149;"	d
TK_STAR	.\parse.h	88;"	d
TK_STRING	.\parse.h	94;"	d
TK_TABLE	.\parse.h	16;"	d
TK_TEMP	.\parse.h	21;"	d
TK_THEN	.\parse.h	136;"	d
TK_TO	.\parse.h	15;"	d
TK_TO_BLOB	.\parse.h	142;"	d
TK_TO_INT	.\parse.h	144;"	d
TK_TO_NUMERIC	.\parse.h	143;"	d
TK_TO_REAL	.\parse.h	145;"	d
TK_TO_TEXT	.\parse.h	141;"	d
TK_TRANSACTION	.\parse.h	6;"	d
TK_TRIGGER	.\parse.h	60;"	d
TK_UMINUS	.\parse.h	156;"	d
TK_UNCLOSED_STRING	.\parse.h	150;"	d
TK_UNION	.\parse.h	112;"	d
TK_UNIQUE	.\parse.h	100;"	d
TK_UPDATE	.\parse.h	107;"	d
TK_UPLUS	.\parse.h	157;"	d
TK_USING	.\parse.h	121;"	d
TK_VACUUM	.\parse.h	61;"	d
TK_VALUES	.\parse.h	128;"	d
TK_VARIABLE	.\parse.h	133;"	d
TK_VIEW	.\parse.h	62;"	d
TK_VIRTUAL	.\parse.h	63;"	d
TK_WHEN	.\parse.h	135;"	d
TK_WHERE	.\parse.h	126;"	d
TOKEN	.\parse.c	3653;"	d	file:
TRACE	.\btree.c	32;"	d	file:
TRACE_IDX_INPUTS	.\where.c	/^static void TRACE_IDX_INPUTS(sqlite3_index_info *p){$/;"	f	file:
TRACE_IDX_INPUTS	.\where.c	1550;"	d	file:
TRACE_IDX_OUTPUTS	.\where.c	/^static void TRACE_IDX_OUTPUTS(sqlite3_index_info *p){$/;"	f	file:
TRACE_IDX_OUTPUTS	.\where.c	1551;"	d	file:
TRANS_NONE	.\btreeInt.h	364;"	d
TRANS_READ	.\btreeInt.h	365;"	d
TRANS_WRITE	.\btreeInt.h	366;"	d
TRIGGER_AFTER	.\sqliteInt.h	2251;"	d
TRIGGER_BEFORE	.\sqliteInt.h	2250;"	d
TabResult	.\table.c	/^typedef struct TabResult {$/;"	s	file:
TabResult	.\table.c	/^} TabResult;$/;"	t	typeref:struct:TabResult	file:
Table	.\sqliteInt.h	/^struct Table {$/;"	s
Table	.\sqliteInt.h	/^typedef struct Table Table;$/;"	t	typeref:struct:Table
TableLock	.\build.c	/^struct TableLock {$/;"	s	file:
TableLock	.\sqliteInt.h	/^typedef struct TableLock TableLock;$/;"	t	typeref:struct:TableLock
Tcl_InitStubs	.\tclsqlite.c	2996;"	d	file:
Tcl_InitStubs	.\tclsqlite.c	2997;"	d	file:
Tcl_NRAddCallback	.\tclsqlite.c	1485;"	d	file:
Tcl_NRCreateCommand	.\tclsqlite.c	1487;"	d	file:
Tcl_NREvalObj	.\tclsqlite.c	1486;"	d	file:
Tclsqlite3_Init	.\tclsqlite.c	/^int Tclsqlite3_Init(Tcl_Interp *interp){ return Sqlite3_Init(interp); }$/;"	f
Tclsqlite3_SafeInit	.\tclsqlite.c	/^int Tclsqlite3_SafeInit(Tcl_Interp *interp){ return TCL_OK; }$/;"	f
Tclsqlite3_SafeUnload	.\tclsqlite.c	/^int Tclsqlite3_SafeUnload(Tcl_Interp *interp, int flags){ return TCL_OK;}$/;"	f
Tclsqlite3_Unload	.\tclsqlite.c	/^int Tclsqlite3_Unload(Tcl_Interp *interp, int flags){ return TCL_OK; }$/;"	f
Tclsqlite_Init	.\tclsqlite.c	/^int Tclsqlite_Init(Tcl_Interp *interp){ return Sqlite3_Init(interp); }$/;"	f
Tclsqlite_SafeInit	.\tclsqlite.c	/^int Tclsqlite_SafeInit(Tcl_Interp *interp){ return TCL_OK; }$/;"	f
Tclsqlite_SafeUnload	.\tclsqlite.c	/^int Tclsqlite_SafeUnload(Tcl_Interp *interp, int flags){ return TCL_OK;}$/;"	f
Tclsqlite_Unload	.\tclsqlite.c	/^int Tclsqlite_Unload(Tcl_Interp *interp, int flags){ return TCL_OK; }$/;"	f
TermOffset	.\fts3_snippet.c	/^struct TermOffset {$/;"	s	file:
TermOffset	.\fts3_snippet.c	/^typedef struct TermOffset TermOffset;$/;"	t	typeref:struct:TermOffset	file:
TermOffsetCtx	.\fts3_snippet.c	/^struct TermOffsetCtx {$/;"	s	file:
TermOffsetCtx	.\fts3_snippet.c	/^typedef struct TermOffsetCtx TermOffsetCtx;$/;"	t	typeref:struct:TermOffsetCtx	file:
TermSelect	.\fts3.c	/^struct TermSelect {$/;"	s	file:
TermSelect	.\fts3.c	/^typedef struct TermSelect TermSelect;$/;"	t	typeref:struct:TermSelect	file:
Token	.\sqliteInt.h	/^struct Token {$/;"	s
Token	.\sqliteInt.h	/^typedef struct Token Token;$/;"	t	typeref:struct:Token
TrigEvent	.\parse.c	/^struct TrigEvent { int a; IdList * b; };$/;"	s	file:
Trigger	.\sqliteInt.h	/^struct Trigger {$/;"	s
Trigger	.\sqliteInt.h	/^typedef struct Trigger Trigger;$/;"	t	typeref:struct:Trigger
TriggerPrg	.\sqliteInt.h	/^struct TriggerPrg {$/;"	s
TriggerPrg	.\sqliteInt.h	/^typedef struct TriggerPrg TriggerPrg;$/;"	t	typeref:struct:TriggerPrg
TriggerStep	.\sqliteInt.h	/^struct TriggerStep {$/;"	s
TriggerStep	.\sqliteInt.h	/^typedef struct TriggerStep TriggerStep;$/;"	t	typeref:struct:TriggerStep
UINT16_TYPE	.\sqliteInt.h	397;"	d
UINT16_TYPE	.\sqliteInt.h	399;"	d
UINT32_TYPE	.\sqliteInt.h	390;"	d
UINT32_TYPE	.\sqliteInt.h	392;"	d
UINT8_TYPE	.\sqliteInt.h	411;"	d
UINT8_TYPE	.\sqliteInt.h	413;"	d
UNIXVFS	.\os_unix.c	6231;"	d	file:
UNIX_SHM_BASE	.\os_unix.c	3239;"	d	file:
UNIX_SHM_DMS	.\os_unix.c	3240;"	d	file:
UNKNOWN_LOCK	.\pager.c	407;"	d	file:
UNPACKED_IGNORE_ROWID	.\sqliteInt.h	1390;"	d
UNPACKED_INCRKEY	.\sqliteInt.h	1391;"	d
UNPACKED_NEED_DESTROY	.\sqliteInt.h	1389;"	d
UNPACKED_NEED_FREE	.\sqliteInt.h	1388;"	d
UNPACKED_PREFIX_MATCH	.\sqliteInt.h	1392;"	d
UNPACKED_PREFIX_SEARCH	.\sqliteInt.h	1393;"	d
UNUSED_PARAMETER	.\fts3Int.h	92;"	d
UNUSED_PARAMETER	.\shell.c	196;"	d	file:
UNUSED_PARAMETER	.\sqliteInt.h	585;"	d
UNUSED_PARAMETER2	.\sqliteInt.h	586;"	d
UPDATE_MAX_BLOBSIZE	.\vdbe.c	115;"	d	file:
UPDATE_MAX_BLOBSIZE	.\vdbe.c	117;"	d	file:
UTF_TRANSLATION_NEEDED	.\tclsqlite.c	63;"	d	file:
UnixUnusedFd	.\os_unix.c	/^struct UnixUnusedFd {$/;"	s	file:
UnixUnusedFd	.\os_unix.c	/^typedef struct UnixUnusedFd UnixUnusedFd;     \/* An unused file descriptor *\/$/;"	t	typeref:struct:UnixUnusedFd	file:
UnlockFile	.\os_win.c	336;"	d	file:
UnpackedRecord	.\sqliteInt.h	/^struct UnpackedRecord {$/;"	s
UnpackedRecord	.\sqliteInt.h	/^typedef struct UnpackedRecord UnpackedRecord;$/;"	t	typeref:struct:UnpackedRecord
UpperToLower	.\util.c	213;"	d	file:
VARIANT_GUTTMAN_LINEAR_SPLIT	.\rtree.c	36;"	d	file:
VARIANT_GUTTMAN_QUADRATIC_SPLIT	.\rtree.c	35;"	d	file:
VARIANT_GUTTMAN_SPLIT	.\rtree.c	39;"	d	file:
VARIANT_RSTARTREE_CHOOSESUBTREE	.\rtree.c	29;"	d	file:
VARIANT_RSTARTREE_REINSERT	.\rtree.c	30;"	d	file:
VARIANT_RSTARTREE_SPLIT	.\rtree.c	37;"	d	file:
VDBE_MAGIC_DEAD	.\vdbeInt.h	335;"	d
VDBE_MAGIC_HALT	.\vdbeInt.h	334;"	d
VDBE_MAGIC_INIT	.\vdbeInt.h	332;"	d
VDBE_MAGIC_RUN	.\vdbeInt.h	333;"	d
VTable	.\sqliteInt.h	/^struct VTable {$/;"	s
VTable	.\sqliteInt.h	/^typedef struct VTable VTable;$/;"	t	typeref:struct:VTable
VVA_ONLY	.\sqliteInt.h	244;"	d
VVA_ONLY	.\sqliteInt.h	246;"	d
Vdbe	.\vdbe.h	/^typedef struct Vdbe Vdbe;$/;"	t	typeref:struct:Vdbe
Vdbe	.\vdbeInt.h	/^struct Vdbe {$/;"	s
VdbeComment	.\vdbe.h	222;"	d
VdbeComment	.\vdbe.h	226;"	d
VdbeCursor	.\vdbeInt.h	/^struct VdbeCursor {$/;"	s
VdbeCursor	.\vdbeInt.h	/^typedef struct VdbeCursor VdbeCursor;$/;"	t	typeref:struct:VdbeCursor
VdbeFrame	.\vdbeInt.h	/^struct VdbeFrame {$/;"	s
VdbeFrame	.\vdbeInt.h	/^typedef struct VdbeFrame VdbeFrame;$/;"	t	typeref:struct:VdbeFrame
VdbeFrameMem	.\vdbeInt.h	121;"	d
VdbeFunc	.\vdbe.h	/^typedef struct VdbeFunc VdbeFunc;$/;"	t	typeref:struct:VdbeFunc
VdbeFunc	.\vdbeInt.h	/^struct VdbeFunc {$/;"	s
VdbeNoopComment	.\vdbe.h	224;"	d
VdbeNoopComment	.\vdbe.h	227;"	d
VdbeOp	.\vdbe.h	/^struct VdbeOp {$/;"	s
VdbeOp	.\vdbe.h	/^typedef struct VdbeOp VdbeOp;$/;"	t	typeref:struct:VdbeOp
VdbeOpIter	.\vdbeaux.c	/^struct VdbeOpIter {$/;"	s	file:
VdbeOpIter	.\vdbeaux.c	/^typedef struct VdbeOpIter VdbeOpIter;$/;"	t	typeref:struct:VdbeOpIter	file:
VdbeOpList	.\vdbe.h	/^struct VdbeOpList {$/;"	s
VdbeOpList	.\vdbe.h	/^typedef struct VdbeOpList VdbeOpList;$/;"	t	typeref:struct:VdbeOpList
WALINDEX_HDR_SIZE	.\wal.c	377;"	d	file:
WALINDEX_LOCK_OFFSET	.\wal.c	375;"	d	file:
WALINDEX_LOCK_RESERVED	.\wal.c	376;"	d	file:
WALINDEX_MAX_VERSION	.\wal.c	270;"	d	file:
WALINDEX_PGSZ	.\wal.c	484;"	d	file:
WALTRACE	.\wal.c	251;"	d	file:
WALTRACE	.\wal.c	253;"	d	file:
WAL_ALL_BUT_WRITE	.\wal.c	277;"	d	file:
WAL_CKPT_LOCK	.\wal.c	278;"	d	file:
WAL_FRAME_HDRSIZE	.\wal.c	380;"	d	file:
WAL_HDRSIZE	.\wal.c	384;"	d	file:
WAL_MAGIC	.\wal.c	395;"	d	file:
WAL_MAX_VERSION	.\wal.c	269;"	d	file:
WAL_NREADER	.\wal.c	281;"	d	file:
WAL_READ_LOCK	.\wal.c	280;"	d	file:
WAL_RECOVER_LOCK	.\wal.c	279;"	d	file:
WAL_RETRY	.\wal.c	1828;"	d	file:
WAL_SAVEPOINT_NDATA	.\wal.h	40;"	d
WAL_WRITE_LOCK	.\wal.c	276;"	d	file:
WHERETRACE	.\where.c	28;"	d	file:
WHERETRACE	.\where.c	30;"	d	file:
WHERE_BTM_LIMIT	.\where.c	241;"	d	file:
WHERE_COLUMN_EQ	.\where.c	233;"	d	file:
WHERE_COLUMN_IN	.\where.c	235;"	d	file:
WHERE_COLUMN_NULL	.\where.c	236;"	d	file:
WHERE_COLUMN_RANGE	.\where.c	234;"	d	file:
WHERE_DUPLICATES_OK	.\sqliteInt.h	1892;"	d
WHERE_FORCE_TABLE	.\sqliteInt.h	1895;"	d
WHERE_IDX_ONLY	.\where.c	242;"	d	file:
WHERE_INDEXED	.\where.c	237;"	d	file:
WHERE_IN_ABLE	.\where.c	239;"	d	file:
WHERE_MULTI_OR	.\where.c	247;"	d	file:
WHERE_NOT_FULLSCAN	.\where.c	238;"	d	file:
WHERE_OMIT_CLOSE	.\sqliteInt.h	1894;"	d
WHERE_OMIT_OPEN	.\sqliteInt.h	1893;"	d
WHERE_ONEPASS_DESIRED	.\sqliteInt.h	1891;"	d
WHERE_ONETABLE_ONLY	.\sqliteInt.h	1896;"	d
WHERE_ORDERBY	.\where.c	243;"	d	file:
WHERE_ORDERBY_MAX	.\sqliteInt.h	1890;"	d
WHERE_ORDERBY_MIN	.\sqliteInt.h	1889;"	d
WHERE_ORDERBY_NORMAL	.\sqliteInt.h	1888;"	d
WHERE_REVERSE	.\where.c	244;"	d	file:
WHERE_ROWID_EQ	.\where.c	231;"	d	file:
WHERE_ROWID_RANGE	.\where.c	232;"	d	file:
WHERE_TEMP_INDEX	.\where.c	248;"	d	file:
WHERE_TOP_LIMIT	.\where.c	240;"	d	file:
WHERE_UNIQUE	.\where.c	245;"	d	file:
WHERE_VIRTUALTABLE	.\where.c	246;"	d	file:
WINCE_DELETION_ATTEMPTS	.\os_win.c	683;"	d	file:
WIN_SHM_BASE	.\os_win.c	1318;"	d	file:
WIN_SHM_DMS	.\os_win.c	1319;"	d	file:
WO_ALL	.\where.c	215;"	d	file:
WO_AND	.\where.c	213;"	d	file:
WO_EQ	.\where.c	205;"	d	file:
WO_GE	.\where.c	209;"	d	file:
WO_GT	.\where.c	208;"	d	file:
WO_IN	.\where.c	204;"	d	file:
WO_ISNULL	.\where.c	211;"	d	file:
WO_LE	.\where.c	207;"	d	file:
WO_LT	.\where.c	206;"	d	file:
WO_MATCH	.\where.c	210;"	d	file:
WO_OR	.\where.c	212;"	d	file:
WO_SINGLE	.\where.c	216;"	d	file:
WRC_Abort	.\sqliteInt.h	2409;"	d
WRC_Continue	.\sqliteInt.h	2407;"	d
WRC_Prune	.\sqliteInt.h	2408;"	d
WRITE_LOCK	.\btreeInt.h	319;"	d
WRITE_UTF16BE	.\utf.c	96;"	d	file:
WRITE_UTF16LE	.\utf.c	84;"	d	file:
WRITE_UTF8	.\utf.c	64;"	d	file:
Wal	.\wal.c	/^struct Wal {$/;"	s	file:
Wal	.\wal.h	/^typedef struct Wal Wal;$/;"	t	typeref:struct:Wal
WalCkptInfo	.\wal.c	/^struct WalCkptInfo {$/;"	s	file:
WalCkptInfo	.\wal.c	/^typedef struct WalCkptInfo WalCkptInfo;$/;"	t	typeref:struct:WalCkptInfo	file:
WalIndexHdr	.\wal.c	/^struct WalIndexHdr {$/;"	s	file:
WalIndexHdr	.\wal.c	/^typedef struct WalIndexHdr WalIndexHdr;$/;"	t	typeref:struct:WalIndexHdr	file:
WalIterator	.\wal.c	/^struct WalIterator {$/;"	s	file:
WalIterator	.\wal.c	/^typedef struct WalIterator WalIterator;$/;"	t	typeref:struct:WalIterator	file:
WalSegment	.\wal.c	/^  struct WalSegment {$/;"	s	struct:WalIterator	file:
Walker	.\sqliteInt.h	/^struct Walker {$/;"	s
Walker	.\sqliteInt.h	/^typedef struct Walker Walker;$/;"	t	typeref:struct:Walker
WhereAndInfo	.\where.c	/^struct WhereAndInfo {$/;"	s	file:
WhereAndInfo	.\where.c	/^typedef struct WhereAndInfo WhereAndInfo;$/;"	t	typeref:struct:WhereAndInfo	file:
WhereClause	.\where.c	/^struct WhereClause {$/;"	s	file:
WhereClause	.\where.c	/^typedef struct WhereClause WhereClause;$/;"	t	typeref:struct:WhereClause	file:
WhereCost	.\where.c	/^struct WhereCost {$/;"	s	file:
WhereCost	.\where.c	/^typedef struct WhereCost WhereCost;$/;"	t	typeref:struct:WhereCost	file:
WhereInfo	.\sqliteInt.h	/^struct WhereInfo {$/;"	s
WhereInfo	.\sqliteInt.h	/^typedef struct WhereInfo WhereInfo;$/;"	t	typeref:struct:WhereInfo
WhereLevel	.\sqliteInt.h	/^struct WhereLevel {$/;"	s
WhereLevel	.\sqliteInt.h	/^typedef struct WhereLevel WhereLevel;$/;"	t	typeref:struct:WhereLevel
WhereMaskSet	.\where.c	/^struct WhereMaskSet {$/;"	s	file:
WhereMaskSet	.\where.c	/^typedef struct WhereMaskSet WhereMaskSet;$/;"	t	typeref:struct:WhereMaskSet	file:
WhereOrInfo	.\where.c	/^struct WhereOrInfo {$/;"	s	file:
WhereOrInfo	.\where.c	/^typedef struct WhereOrInfo WhereOrInfo;$/;"	t	typeref:struct:WhereOrInfo	file:
WherePlan	.\sqliteInt.h	/^struct WherePlan {$/;"	s
WherePlan	.\sqliteInt.h	/^typedef struct WherePlan WherePlan;$/;"	t	typeref:struct:WherePlan
WhereTerm	.\where.c	/^struct WhereTerm {$/;"	s	file:
WhereTerm	.\where.c	/^typedef struct WhereTerm WhereTerm;$/;"	t	typeref:struct:WhereTerm	file:
Y	.\date.c	/^  int Y, M, D;       \/* Year, month, and day *\/$/;"	m	struct:DateTime	file:
YYACTIONTYPE	.\parse.c	192;"	d	file:
YYCODETYPE	.\parse.c	190;"	d	file:
YYFALLBACK	.\parse.c	221;"	d	file:
YYMINORTYPE	.\parse.c	/^} YYMINORTYPE;$/;"	t	typeref:union:__anon6	file:
YYNOCODE	.\parse.c	191;"	d	file:
YYNOERRORRECOVERY	.\parse.c	21;"	d	file:
YYNRULE	.\parse.c	220;"	d	file:
YYNSTATE	.\parse.c	219;"	d	file:
YYSTACKDEPTH	.\parse.c	213;"	d	file:
YYWILDCARD	.\parse.c	193;"	d	file:
YY_ACCEPT_ACTION	.\parse.c	223;"	d	file:
YY_ACTTAB_COUNT	.\parse.c	290;"	d	file:
YY_ERROR_ACTION	.\parse.c	224;"	d	file:
YY_NO_ACTION	.\parse.c	222;"	d	file:
YY_REDUCE_COUNT	.\parse.c	656;"	d	file:
YY_REDUCE_MAX	.\parse.c	658;"	d	file:
YY_REDUCE_MIN	.\parse.c	657;"	d	file:
YY_REDUCE_USE_DFLT	.\parse.c	655;"	d	file:
YY_SHIFT_COUNT	.\parse.c	608;"	d	file:
YY_SHIFT_MAX	.\parse.c	610;"	d	file:
YY_SHIFT_MIN	.\parse.c	609;"	d	file:
YY_SHIFT_USE_DFLT	.\parse.c	607;"	d	file:
_BTREE_H_	.\btree.h	17;"	d
_CRT_SECURE_NO_WARNINGS	.\shell.c	17;"	d	file:
_FILE_OFFSET_BITS	.\os_unix.c	107;"	d	file:
_FILE_OFFSET_BITS	.\sqliteInt.h	40;"	d
_FTS3_HASH_H_	.\fts3_hash.h	18;"	d
_FTS3_TOKENIZER_H_	.\fts3_tokenizer.h	21;"	d
_FTSINT_H	.\fts3Int.h	16;"	d
_GNU_SOURCE	.\sqliteInt.h	66;"	d
_HWTIME_H_	.\hwtime.h	17;"	d
_LARGEFILE_SOURCE	.\os_unix.c	109;"	d	file:
_LARGEFILE_SOURCE	.\sqliteInt.h	42;"	d
_LARGE_FILE	.\os_unix.c	105;"	d	file:
_LARGE_FILE	.\sqliteInt.h	38;"	d
_OS_COMMON_H_	.\os_common.h	21;"	d
_OvflCell	.\btreeInt.h	/^  struct _OvflCell {   \/* Cells that will not fit on aData[] *\/$/;"	s	struct:MemPage
_PAGER_H_	.\pager.h	18;"	d
_SHM_RDLCK	.\os_win.c	1325;"	d	file:
_SHM_UNLCK	.\os_win.c	1324;"	d	file:
_SHM_WRLCK	.\os_win.c	1326;"	d	file:
_SQLITE3EXT_H_	.\sqlite3ext.h	19;"	d
_SQLITE3_H_	.\sqlite3.h	34;"	d
_SQLITEINT_H_	.\sqliteInt.h	16;"	d
_SQLITE_HASH_H_	.\hash.h	16;"	d
_SQLITE_OS_C_	.\os.c	16;"	d	file:
_SQLITE_OS_C_	.\os.c	18;"	d	file:
_SQLITE_OS_H_	.\os.h	21;"	d
_SQLITE_VDBE_H_	.\vdbe.h	19;"	d
_VDBEINT_H_	.\vdbeInt.h	19;"	d
_WAL_H_	.\wal.h	18;"	d
_XOPEN_SOURCE	.\sqliteInt.h	182;"	d
_all_whitespace	.\shell.c	/^static int _all_whitespace(const char *z){$/;"	f	file:
_contains_semicolon	.\shell.c	/^static int _contains_semicolon(const char *z, int N){$/;"	f	file:
_fts3ht	.\fts3_hash.h	/^  struct _fts3ht {        \/* the hash table *\/$/;"	s	struct:Fts3Hash
_ht	.\hash.h	/^  struct _ht {              \/* the hash table *\/$/;"	s	struct:Hash
_is_command_terminator	.\shell.c	/^static int _is_command_terminator(const char *zLine){$/;"	f	file:
_is_complete	.\shell.c	/^static int _is_complete(char *zSql, int nSql){$/;"	f	file:
_posixUnlock	.\os_unix.c	/^static int _posixUnlock(sqlite3_file *id, int eFileLock, int handleNFSUnlock){$/;"	f	file:
a	.\parse.c	/^struct TrigEvent { int a; IdList * b; };$/;"	m	struct:TrigEvent	file:
a	.\sqliteInt.h	/^  FuncDef *a[23];       \/* Hash table for functions *\/$/;"	m	struct:FuncDefHash
a	.\sqliteInt.h	/^  WhereLevel a[1];               \/* Information about each nest loop in WHERE *\/$/;"	m	struct:WhereInfo
a	.\sqliteInt.h	/^  } *a;                  \/* One entry for each expression *\/$/;"	m	struct:ExprList	typeref:struct:ExprList::ExprList_item
a	.\sqliteInt.h	/^  } *a;$/;"	m	struct:IdList	typeref:struct:IdList::IdList_item
a	.\sqliteInt.h	/^  } a[1];             \/* One entry for each identifier on the list *\/$/;"	m	struct:SrcList	typeref:struct:SrcList::SrcList_item
a	.\where.c	/^  WhereTerm *a;            \/* Each a[] describes a term of the WHERE cluase *\/$/;"	m	struct:WhereClause	file:
aAction	.\sqliteInt.h	/^  u8 aAction[2];          \/* ON DELETE and ON UPDATE actions, respectively *\/$/;"	m	struct:FKey
aAlias	.\sqliteInt.h	/^  int *aAlias;         \/* Register used to hold aliased result *\/$/;"	m	struct:Parse
aBitmap	.\bitvec.c	/^    BITVEC_TELEM aBitmap[BITVEC_NELEM];    \/* Bitmap representation *\/$/;"	m	union:Bitvec::__anon1	file:
aBtree	.\btree.h	/^  Btree *aBtree[SQLITE_MAX_ATTACHED+1];$/;"	m	struct:BtreeMutexArray
aChar	.\fts3_icu.c	/^  UChar *aChar;               \/* Copy of input using utf-16 encoding *\/$/;"	m	struct:IcuCursor	file:
aCksum	.\wal.c	/^  u32 aCksum[2];                  \/* Checksum over all prior fields *\/$/;"	m	struct:WalIndexHdr	file:
aCol	.\sqliteInt.h	/^  Column *aCol;        \/* Information about each column *\/$/;"	m	struct:Table
aCol	.\sqliteInt.h	/^  } *aCol;$/;"	m	struct:AggInfo	typeref:struct:AggInfo::AggInfo_col
aCol	.\sqliteInt.h	/^  } aCol[1];        \/* One entry for each of nCol column s *\/$/;"	m	struct:FKey	typeref:struct:FKey::sColMap
aColCache	.\sqliteInt.h	/^  } aColCache[SQLITE_N_COLCACHE];  \/* One for each column cache entry *\/$/;"	m	struct:Parse	typeref:struct:Parse::yColCache
aColName	.\vdbeInt.h	/^  Mem *aColName;          \/* Column names to return *\/$/;"	m	struct:Vdbe
aColl	.\sqliteInt.h	/^  CollSeq *aColl[1];  \/* Collating sequence for each term of the key *\/$/;"	m	struct:KeyInfo
aCollSeq	.\sqliteInt.h	/^  Hash aCollSeq;                \/* All collating sequences *\/$/;"	m	struct:sqlite3
aColmask	.\sqliteInt.h	/^  u32 aColmask[2];        \/* Masks of old.*, new.* columns accessed *\/$/;"	m	struct:TriggerPrg
aConstraint	.\rtree.c	/^  RtreeConstraint *aConstraint;     \/* Search constraints. *\/$/;"	m	struct:RtreeCursor	file:
aConstraint	.\sqlite3.h	/^  } *aConstraint;            \/* Table of WHERE clause constraints *\/$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_constraint
aConstraintUsage	.\sqlite3.h	/^  } *aConstraintUsage;$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_constraint_usage
aCoord	.\rtree.c	/^  RtreeCoord aCoord[RTREE_MAX_DIMENSIONS*2];$/;"	m	struct:RtreeCell	file:
aCounter	.\vdbeInt.h	/^  int aCounter[3];        \/* Counters used by sqlite3_stmt_status() *\/$/;"	m	struct:Vdbe
aCtrl	.\mem5.c	/^  u8 *aCtrl;$/;"	m	struct:Mem5Global	file:
aData	.\btreeInt.h	/^  u8 *aData;           \/* Pointer to disk image of the page data *\/$/;"	m	struct:MemPage
aData	.\fts3_write.c	/^  char *aData;                    \/* Node data *\/$/;"	m	struct:SegmentNode	file:
aData	.\fts3_write.c	/^  char *aData;                    \/* Pointer to block from malloc() *\/$/;"	m	struct:SegmentWriter	file:
aData	.\fts3_write.c	/^  char *aData;$/;"	m	struct:PendingList	file:
aDb	.\sqliteInt.h	/^  Db *aDb;                      \/* All backends *\/$/;"	m	struct:sqlite3
aDbStatic	.\sqliteInt.h	/^  Db aDbStatic[2];              \/* Static space for the 2 default backends *\/$/;"	m	struct:sqlite3
aDigits	.\printf.c	/^static const char aDigits[] = "0123456789ABCDEF0123456789abcdef";$/;"	v	file:
aDoclist	.\fts3Int.h	/^  char *aDoclist;                 \/* List of docids for full-text queries *\/$/;"	m	struct:Fts3Cursor
aDoclist	.\fts3Int.h	/^  char *aDoclist;            \/* Buffer containing doclist *\/$/;"	m	struct:Fts3Expr
aDoclist	.\fts3_write.c	/^  char *aDoclist;                 \/* Pointer to doclist of current entry *\/$/;"	m	struct:Fts3SegReader	file:
aEntry	.\rowset.c	/^  struct RowSetEntry aEntry[ROWSET_ENTRY_PER_CHUNK]; \/* Allocated entries *\/$/;"	m	struct:RowSetChunk	typeref:struct:RowSetChunk::RowSetEntry	file:
aExt	.\loadext.c	/^  void (**aExt)(void);   \/* Pointers to the extension init functions *\/$/;"	m	struct:sqlite3AutoExtList	file:
aExtension	.\sqliteInt.h	/^  void **aExtension;            \/* Array of shared library handles *\/$/;"	m	struct:sqlite3
aFrameCksum	.\wal.c	/^  u32 aFrameCksum[2];             \/* Checksum of last frame in log *\/$/;"	m	struct:WalIndexHdr	file:
aFunc	.\sqliteInt.h	/^  FuncDefHash aFunc;            \/* Hash table of connection functions *\/$/;"	m	struct:sqlite3
aFunc	.\sqliteInt.h	/^  } *aFunc;$/;"	m	struct:AggInfo	typeref:struct:AggInfo::AggInfo_func
aHardLimit	.\main.c	/^static const int aHardLimit[] = {$/;"	v	file:
aHash	.\bitvec.c	/^    u32 aHash[BITVEC_NINT];      \/* Hash table representation *\/$/;"	m	union:Bitvec::__anon1	file:
aHash	.\rtree.c	/^  RtreeNode *aHash[HASHSIZE]; \/* Hash table of in-memory nodes. *\/ $/;"	m	struct:Rtree	file:
aInLoop	.\sqliteInt.h	/^      } *aInLoop;           \/* Information about each nested IN operator *\/$/;"	m	struct:WhereLevel::__anon14::__anon15	typeref:struct:WhereLevel::__anon14::__anon15::InLoop
aIndex	.\wal.c	/^    ht_slot *aIndex;              \/* i0, i1, i2... such that aPgno[iN] ascend *\/$/;"	m	struct:WalIterator::WalSegment	file:
aJournalMagic	.\pager.c	/^static const unsigned char aJournalMagic[] = {$/;"	v	file:
aLabel	.\vdbeInt.h	/^  int *aLabel;            \/* Space to hold the labels *\/$/;"	m	struct:Vdbe
aLeavesStmt	.\fts3Int.h	/^  sqlite3_stmt **aLeavesStmt;     \/* Array of prepared zSelectLeaves stmts *\/$/;"	m	struct:Fts3Table
aLimit	.\sqliteInt.h	/^  int aLimit[SQLITE_N_LIMIT];   \/* Limits *\/$/;"	m	struct:sqlite3
aMatchinfo	.\fts3Int.h	/^  u32 *aMatchinfo;                \/* Information about most recent match *\/$/;"	m	struct:Fts3Cursor
aMatchinfo	.\fts3_snippet.c	/^  u32 *aMatchinfo;                \/* Pre-allocated buffer *\/$/;"	m	struct:MatchInfo	file:
aMem	.\sqliteInt.h	/^  Mem *aMem;          \/* Values *\/$/;"	m	struct:UnpackedRecord
aMem	.\vdbeInt.h	/^  Mem *aMem;              \/* Array of memory cells *\/$/;"	m	struct:VdbeFrame
aMem	.\vdbeInt.h	/^  Mem *aMem;              \/* The memory locations *\/$/;"	m	struct:Vdbe
aModule	.\sqliteInt.h	/^  Hash aModule;                 \/* populated by sqlite3_create_module() *\/$/;"	m	struct:sqlite3
aMutex	.\vdbeInt.h	/^  BtreeMutexArray aMutex; \/* An array of Btree used here and needing locks *\/$/;"	m	struct:Vdbe
aNode	.\fts3_write.c	/^  char *aNode;                    \/* Pointer to node data (or NULL) *\/$/;"	m	struct:Fts3SegReader	file:
aOffset	.\fts3_icu.c	/^  int *aOffset;               \/* Offsets of each character in utf-8 input *\/$/;"	m	struct:IcuCursor	file:
aOffset	.\vdbeInt.h	/^  u32 *aOffset;         \/* Cached offsets to the start of each columns data *\/$/;"	m	struct:VdbeCursor
aOp	.\vdbe.h	/^  VdbeOp *aOp;                  \/* Array of opcodes for sub-program *\/$/;"	m	struct:SubProgram
aOp	.\vdbeInt.h	/^  Op *aOp;                \/* Program instructions *\/$/;"	m	struct:VdbeFrame
aOp	.\vdbeInt.h	/^  Op *aOp;                \/* Space to hold the virtual machine's program *\/$/;"	m	struct:Vdbe
aOrderBy	.\sqlite3.h	/^  } *aOrderBy;               \/* The ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_orderby
aOverflow	.\btreeInt.h	/^  Pgno *aOverflow;          \/* Cache of overflow page locations *\/$/;"	m	struct:BtCursor
aOvfl	.\btreeInt.h	/^  } aOvfl[5];$/;"	m	struct:MemPage	typeref:struct:MemPage::_OvflCell
aPadding	.\os_unix.c	/^  char aPadding[32];$/;"	m	struct:unixFile	file:
aPageFree	.\malloc.c	/^  u32 *aPageFree;$/;"	m	struct:Mem0Global	file:
aPgno	.\wal.c	/^    u32 *aPgno;                   \/* Array of page numbers. *\/$/;"	m	struct:WalIterator::WalSegment	file:
aPhrase	.\fts3_snippet.c	/^  SnippetPhrase *aPhrase;         \/* Array of size nPhrase *\/$/;"	m	struct:SnippetIter	file:
aPool	.\mem3.c	/^  Mem3Block *aPool;$/;"	m	struct:Mem3Global	file:
aPrefix	.\printf.c	/^static const char aPrefix[] = "-x0\\000X0";$/;"	v	file:
aReadMark	.\wal.c	/^  u32 aReadMark[WAL_NREADER];     \/* Reader marks *\/$/;"	m	struct:WalCkptInfo	file:
aRegion	.\os_win.c	/^  } *aRegion;$/;"	m	struct:winShmNode	typeref:struct:winShmNode::ShmRegion	file:
aRow	.\vdbeInt.h	/^  u8 *aRow;             \/* Data for the current row, if all on one page *\/$/;"	m	struct:VdbeCursor
aSalt	.\wal.c	/^  u32 aSalt[2];                   \/* Two salt values copied from WAL header *\/$/;"	m	struct:WalIndexHdr	file:
aSample	.\sqliteInt.h	/^  IndexSample *aSample;    \/* Array of SQLITE_INDEX_SAMPLES samples *\/$/;"	m	struct:Index
aSavepoint	.\pager.c	/^  PagerSavepoint *aSavepoint; \/* Array of active savepoints *\/$/;"	m	struct:Pager	file:
aScratchFree	.\malloc.c	/^  u32 *aScratchFree;$/;"	m	struct:Mem0Global	file:
aSegment	.\wal.c	/^  } aSegment[1];                  \/* One for every 32KB page in the WAL *\/$/;"	m	struct:WalIterator	typeref:struct:WalIterator::WalSegment	file:
aSemName	.\os_unix.c	/^  char aSemName[MAX_PATHNAME+2];  \/* Name of that semaphore *\/$/;"	m	struct:unixInodeInfo	file:
aSortOrder	.\sqliteInt.h	/^  u8 *aSortOrder;     \/* Sort order for each column.  May be NULL *\/$/;"	m	struct:KeyInfo
aSortOrder	.\sqliteInt.h	/^  u8 *aSortOrder;  \/* Array of size Index.nColumn. True==DESC, False==ASC *\/$/;"	m	struct:Index
aStatic	.\where.c	/^  WhereTerm aStatic[1];    \/* Initial static space for a[] *\/$/;"	m	struct:WhereClause	file:
aStatic	.\where.c	/^  WhereTerm aStatic[8];    \/* Initial static space for a[] *\/$/;"	m	struct:WhereClause	file:
aStmt	.\fts3Int.h	/^  sqlite3_stmt *aStmt[25];$/;"	m	struct:Fts3Table
aTableLock	.\sqliteInt.h	/^  TableLock *aTableLock; \/* Required table locks for shared-cache mode *\/$/;"	m	struct:Parse
aTempReg	.\sqliteInt.h	/^  int aTempReg[8];     \/* Holding area for temporary registers *\/$/;"	m	struct:Parse
aTerm	.\fts3_snippet.c	/^  TermOffset *aTerm;$/;"	m	struct:TermOffsetCtx	file:
aToken	.\fts3Int.h	/^  } aToken[1];               \/* One entry for each token in the phrase *\/$/;"	m	struct:Fts3Phrase	typeref:struct:Fts3Phrase::PhraseToken
aType	.\vdbeInt.h	/^  u32 *aType;           \/* Type values for all entries in the record *\/$/;"	m	struct:VdbeCursor
aVTrans	.\sqliteInt.h	/^  VTable **aVTrans;             \/* Virtual tables with open transactions *\/$/;"	m	struct:sqlite3
aVar	.\vdbeInt.h	/^  Mem *aVar;              \/* Values for the OP_Variable opcode. *\/$/;"	m	struct:Vdbe
aWalData	.\pager.c	/^  u32 aWalData[WAL_SAVEPOINT_NDATA];        \/* WAL savepoint context *\/$/;"	m	struct:PagerSavepoint	file:
aaOutput	.\fts3.c	/^  char *aaOutput[16];             \/* Malloc'd output buffer *\/$/;"	m	struct:TermSelect	file:
absFunc	.\func.c	/^static void absFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
access	.\shell.c	55;"	d	file:
accessPayload	.\btree.c	/^static int accessPayload($/;"	f	file:
actionName	.\pragma.c	/^static const char *actionName(u8 action){$/;"	f	file:
activeVdbeCnt	.\sqliteInt.h	/^  int activeVdbeCnt;            \/* Number of VDBEs currently executing *\/$/;"	m	struct:sqlite3
actualWidth	.\shell.c	/^  int actualWidth[100];  \/* Actual width of each column *\/$/;"	m	struct:callback_data	file:
addAggInfoColumn	.\expr.c	/^static int addAggInfoColumn(sqlite3 *db, AggInfo *pInfo){$/;"	f	file:
addAggInfoFunc	.\expr.c	/^static int addAggInfoFunc(sqlite3 *db, AggInfo *pInfo){$/;"	f	file:
addArgumentToVtab	.\vtab.c	/^static void addArgumentToVtab(Parse *pParse){$/;"	f	file:
addColOffset	.\sqliteInt.h	/^  int addColOffset;    \/* Offset in CREATE TABLE stmt to add a new column *\/$/;"	m	struct:Table
addModuleArgument	.\vtab.c	/^static void addModuleArgument(sqlite3 *db, Table *pTable, char *zArg){$/;"	f	file:
addToBlockedList	.\notify.c	/^static void addToBlockedList(sqlite3 *db){$/;"	f	file:
addToSavepointBitvecs	.\pager.c	/^static int addToSavepointBitvecs(Pager *pPager, Pgno pgno){$/;"	f	file:
addToVTrans	.\vtab.c	/^static int addToVTrans(sqlite3 *db, VTable *pVTab){$/;"	f	file:
addWhereTerm	.\select.c	/^static void addWhereTerm($/;"	f	file:
add_history	.\shell.c	46;"	d	file:
addrBrk	.\sqliteInt.h	/^  int addrBrk;          \/* Jump here to break out of the loop *\/$/;"	m	struct:WhereLevel
addrCont	.\sqliteInt.h	/^  int addrCont;         \/* Jump here to continue with the next loop cycle *\/$/;"	m	struct:WhereLevel
addrFirst	.\sqliteInt.h	/^  int addrFirst;        \/* First instruction of interior of the loop *\/$/;"	m	struct:WhereLevel
addrInTop	.\sqliteInt.h	/^        int addrInTop;         \/* Top of the IN loop *\/$/;"	m	struct:WhereLevel::__anon14::__anon15::InLoop
addrNxt	.\sqliteInt.h	/^  int addrNxt;          \/* Jump here to start the next IN combination *\/$/;"	m	struct:WhereLevel
addrOpenEphm	.\sqliteInt.h	/^  int addrOpenEphm[3];   \/* OP_OpenEphem opcodes related to this select *\/$/;"	m	struct:Select
adjustStats	.\mem2.c	/^static void adjustStats(int iSize, int increment){$/;"	f	file:
affinity	.\sqliteInt.h	/^  char affinity;         \/* MakeRecord with this affinity for SRT_Set *\/$/;"	m	struct:Select
affinity	.\sqliteInt.h	/^  char affinity;         \/* The affinity of the column or 0 if not a column *\/$/;"	m	struct:Expr
affinity	.\sqliteInt.h	/^  char affinity;   \/* One of the SQLITE_AFF_... values *\/$/;"	m	struct:Column
affinity	.\sqliteInt.h	/^  u8 affinity;      \/* Affinity used when eDest==SRT_Set *\/$/;"	m	struct:SelectDest
afpCheckReservedLock	.\os_unix.c	/^static int afpCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
afpClose	.\os_unix.c	/^static int afpClose(sqlite3_file *id) {$/;"	f	file:
afpLock	.\os_unix.c	/^static int afpLock(sqlite3_file *id, int eFileLock){$/;"	f	file:
afpLockingContext	.\os_unix.c	/^struct afpLockingContext {$/;"	s	file:
afpLockingContext	.\os_unix.c	/^typedef struct afpLockingContext afpLockingContext;$/;"	t	typeref:struct:afpLockingContext	file:
afpSetLock	.\os_unix.c	/^static int afpSetLock($/;"	f	file:
afpUnlock	.\os_unix.c	/^static int afpUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
afpfsByteRangeLock2FSCTL	.\os_unix.c	2117;"	d	file:
aggregate_context	.\sqlite3ext.h	/^  void * (*aggregate_context)(sqlite3_context*,int nBytes);$/;"	m	struct:sqlite3_api_routines
aggregate_count	.\sqlite3ext.h	/^  int  (*aggregate_count)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines
ai	.\vdbe.h	/^    int *ai;               \/* Used when p4type is P4_INTARRAY *\/$/;"	m	union:VdbeOp::__anon18
aiColumn	.\sqliteInt.h	/^  int *aiColumn;   \/* Which columns are used by this index.  1st is 0 *\/$/;"	m	struct:Index
aiFreelist	.\mem5.c	/^  int aiFreelist[LOGMAX+1];$/;"	m	struct:Mem5Global	file:
aiHash	.\mem3.c	/^  u32 aiHash[N_HASH];        \/* For sizes MX_SMALL+1 and larger *\/$/;"	m	struct:Mem3Global	file:
aiIdx	.\btreeInt.h	/^  u16 aiIdx[BTCURSOR_MAX_DEPTH];        \/* Current index in apPage[i] *\/$/;"	m	struct:BtCursor
aiRowEst	.\sqliteInt.h	/^  unsigned *aiRowEst; \/* Result of ANALYZE: Est. rows selected by each column *\/$/;"	m	struct:Index
aiSmall	.\mem3.c	/^  u32 aiSmall[MX_SMALL-1];   \/* For sizes 2 through MX_SMALL, inclusive *\/$/;"	m	struct:Mem3Global	file:
alarmArg	.\malloc.c	/^  void *alarmArg;$/;"	m	struct:Mem0Global	file:
alarmBusy	.\mem3.c	/^  int alarmBusy;$/;"	m	struct:Mem3Global	file:
alarmCallback	.\malloc.c	/^  void (*alarmCallback)(void*, sqlite3_int64,int);$/;"	m	struct:Mem0Global	file:
alarmThreshold	.\malloc.c	/^  sqlite3_int64 alarmThreshold;$/;"	m	struct:Mem0Global	file:
allSpaces	.\main.c	/^static int allSpaces(const char *z, int n){$/;"	f	file:
allocSpace	.\vdbeaux.c	/^static void *allocSpace($/;"	f	file:
allocateBtreePage	.\btree.c	/^static int allocateBtreePage($/;"	f	file:
allocateCursor	.\vdbe.c	/^static VdbeCursor *allocateCursor($/;"	f	file:
allocateIndexInfo	.\where.c	/^static sqlite3_index_info *allocateIndexInfo($/;"	f	file:
allocateSpace	.\btree.c	/^static int allocateSpace(MemPage *pPage, int nByte, int *pIdx){$/;"	f	file:
allocateTempSpace	.\btree.c	/^static void allocateTempSpace(BtShared *pBt){$/;"	f	file:
allowAgg	.\sqliteInt.h	/^  u8 allowAgg;         \/* Aggregate functions allowed here *\/$/;"	m	struct:NameContext
allowedOp	.\where.c	/^static int allowedOp(int op){$/;"	f	file:
anOutput	.\fts3.c	/^  int anOutput[16];               \/* Size of output in bytes *\/$/;"	m	struct:TermSelect	file:
anRef	.\btreeInt.h	/^  int *anRef;       \/* Number of times each page is referenced *\/$/;"	m	struct:IntegrityCk
analysisInfo	.\analyze.c	/^struct analysisInfo {$/;"	s	file:
analysisInfo	.\analyze.c	/^typedef struct analysisInfo analysisInfo;$/;"	t	typeref:struct:analysisInfo	file:
analysisLoader	.\analyze.c	/^static int analysisLoader(void *pData, int argc, char **argv, char **NotUsed){$/;"	f	file:
analyzeAggregate	.\expr.c	/^static int analyzeAggregate(Walker *pWalker, Expr *pExpr){$/;"	f	file:
analyzeAggregatesInSelect	.\expr.c	/^static int analyzeAggregatesInSelect(Walker *pWalker, Select *pSelect){$/;"	f	file:
analyzeDatabase	.\analyze.c	/^static void analyzeDatabase(Parse *pParse, int iDb){$/;"	f	file:
analyzeOneTable	.\analyze.c	/^static void analyzeOneTable($/;"	f	file:
analyzeTable	.\analyze.c	/^static void analyzeTable(Parse *pParse, Table *pTab){$/;"	f	file:
apArg	.\vdbeInt.h	/^  Mem **apArg;            \/* Arguments to currently executing user function *\/$/;"	m	struct:Vdbe
apAux	.\vdbeInt.h	/^  } apAux[1];                   \/* One slot for each function argument *\/$/;"	m	struct:VdbeFunc	typeref:struct:VdbeFunc::AuxData
apColName	.\tclsqlite.c	/^  Tcl_Obj **apColName;            \/* Array of column names *\/$/;"	m	struct:DbEvalContext	file:
apCsr	.\vdbeInt.h	/^  VdbeCursor **apCsr;     \/* Element of Vdbe cursors *\/$/;"	m	struct:VdbeFrame
apCsr	.\vdbeInt.h	/^  VdbeCursor **apCsr;     \/* One element of this array for each open cursor *\/$/;"	m	struct:Vdbe
apHash	.\pcache1.c	/^  PgHdr1 **apHash;                    \/* Hash table for fast lookup by key *\/$/;"	m	struct:PCache1	file:
apPage	.\btreeInt.h	/^  MemPage *apPage[BTCURSOR_MAX_DEPTH];  \/* Pages from root to current page *\/$/;"	m	struct:BtCursor
apParm	.\tclsqlite.c	/^  Tcl_Obj **apParm;        \/* Array of referenced object pointers *\/$/;"	m	struct:SqlPreparedStmt	file:
apRegion	.\os_unix.c	/^  char **apRegion;           \/* Array of mapped shared-memory regions *\/$/;"	m	struct:unixShmNode	file:
apSub	.\bitvec.c	/^    Bitvec *apSub[BITVEC_NPTR];  \/* Recursive representation *\/$/;"	m	union:Bitvec::__anon1	file:
apSub	.\vdbeaux.c	/^  SubProgram **apSub;        \/* Array of subprograms *\/$/;"	m	struct:VdbeOpIter	file:
apTrigger	.\sqliteInt.h	/^  Trigger *apTrigger[2];  \/* Triggers for aAction[] actions *\/$/;"	m	struct:FKey
apVarExpr	.\sqliteInt.h	/^  Expr **apVarExpr;    \/* Pointers to :aaa and $aaaa wildcard expressions *\/$/;"	m	struct:Parse
apVtabLock	.\sqliteInt.h	/^  Table **apVtabLock;        \/* Pointer to virtual tables needing locking *\/$/;"	m	struct:Parse
apWiData	.\wal.c	/^  volatile u32 **apWiData;   \/* Pointer to wal-index content in memory *\/$/;"	m	struct:Wal	file:
appendSpace	.\printf.c	/^static void appendSpace(StrAccum *pAccum, int N){$/;"	f	file:
appendText	.\shell.c	/^static char *appendText(char *zIn, char const *zAppend, char quote){$/;"	f	file:
applyAffinity	.\vdbe.c	/^static void applyAffinity($/;"	f	file:
applyNumericAffinity	.\vdbe.c	/^static void applyNumericAffinity(Mem *pRec){$/;"	f	file:
approx	.\func.c	/^  u8 approx;        \/* True if non-integer value was input to the sum *\/$/;"	m	struct:SumCtx	file:
argvIndex	.\sqlite3.h	/^    int argvIndex;           \/* if >0, constraint is part of argv to xFilter *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage
assemblePage	.\btree.c	/^static void assemblePage($/;"	f	file:
assertCellInfo	.\btree.c	/^  static void assertCellInfo(BtCursor *pCur){$/;"	f	file:
assertCellInfo	.\btree.c	3558;"	d	file:
assertMutexHeld	.\notify.c	31;"	d	file:
assertParentIndex	.\btree.c	/^static void assertParentIndex(MemPage *pParent, int iIdx, Pgno iChild){$/;"	f	file:
assertParentIndex	.\btree.c	4098;"	d	file:
assertTruncateConstraint	.\pager.c	/^static void assertTruncateConstraint(Pager *pPager){$/;"	f	file:
assertTruncateConstraint	.\pager.c	3590;"	d	file:
assertTruncateConstraintCb	.\pager.c	/^static void assertTruncateConstraintCb(PgHdr *pPg){$/;"	f	file:
assert_pager_state	.\pager.c	/^static int assert_pager_state(Pager *p){$/;"	f	file:
atFirst	.\vdbeInt.h	/^  Bool atFirst;         \/* True if pointing to first entry *\/$/;"	m	struct:VdbeCursor
atLast	.\btreeInt.h	/^  u8 atLast;                \/* Cursor pointing to the last entry *\/$/;"	m	struct:BtCursor
attachBackupObject	.\backup.c	/^static void attachBackupObject(sqlite3_backup *p){$/;"	f	file:
attachFunc	.\attach.c	/^static void attachFunc($/;"	f	file:
auth_callback	.\tclsqlite.c	/^static int auth_callback($/;"	f	file:
autoCommit	.\sqliteInt.h	/^  u8 autoCommit;                \/* The auto-commit flag. *\/$/;"	m	struct:sqlite3
autoIncBegin	.\insert.c	/^static int autoIncBegin($/;"	f	file:
autoIncBegin	.\insert.c	315;"	d	file:
autoIncStep	.\insert.c	/^static void autoIncStep(Parse *pParse, int memId, int regRowid){$/;"	f	file:
autoIncStep	.\insert.c	316;"	d	file:
autoIndex	.\sqliteInt.h	/^  u8 autoIndex;    \/* True if is automatically created (ex: by UNIQUE) *\/$/;"	m	struct:Index
autoVacuum	.\btreeInt.h	/^  u8 autoVacuum;        \/* True if auto-vacuum is enabled *\/$/;"	m	struct:BtShared
autoVacuumCommit	.\btree.c	/^static int autoVacuumCommit(BtShared *pBt){$/;"	f	file:
autolockIoFinder	.\os_unix.c	/^  *(*const autolockIoFinder)(const char*,unixFile*) = autolockIoFinderImpl;$/;"	v	file:
autolockIoFinderImpl	.\os_unix.c	/^static const sqlite3_io_methods *autolockIoFinderImpl($/;"	f	file:
avgFinalize	.\func.c	/^static void avgFinalize(sqlite3_context *context){$/;"	f	file:
azCol	.\fts3_expr.c	/^  const char **azCol;                 \/* Array of column names for fts3 table *\/$/;"	m	struct:ParseContext	file:
azColl	.\sqliteInt.h	/^  char **azColl;   \/* Array of collation sequence names for index *\/$/;"	m	struct:Index
azColumn	.\fts3Int.h	/^  char **azColumn;                \/* column names.  malloced *\/$/;"	m	struct:Fts3Table
azCompileOpt	.\ctime.c	/^static const char * const azCompileOpt[] = {$/;"	v	file:
azFileLock	.\os_unix.c	/^static const char *azFileLock(int eFileLock){$/;"	f	file:
azModuleArg	.\sqliteInt.h	/^  char **azModuleArg;  \/* Text of all module args. [0] is module name *\/$/;"	m	struct:Table
azResult	.\table.c	/^  char **azResult;   \/* Accumulated output *\/$/;"	m	struct:TabResult	file:
azVar	.\vdbeInt.h	/^  char **azVar;           \/* Name of variables *\/$/;"	m	struct:Vdbe
b	.\parse.c	/^struct TrigEvent { int a; IdList * b; };$/;"	m	struct:TrigEvent	file:
bCoreMutex	.\sqliteInt.h	/^  int bCoreMutex;                   \/* True to enable core mutexing *\/$/;"	m	struct:Sqlite3Config
bDestLocked	.\backup.c	/^  int bDestLocked;         \/* True once a write-transaction is open on pDest *\/$/;"	m	struct:sqlite3_backup	file:
bEnabled	.\sqliteInt.h	/^  u8 bEnabled;            \/* False to disable new lookaside allocations *\/$/;"	m	struct:Lookaside
bExclusive	.\os_win.c	/^  BOOL bExclusive;    \/* Indicates an exclusive lock has been obtained *\/$/;"	m	struct:winceLock	file:
bFullMutex	.\sqliteInt.h	/^  int bFullMutex;                   \/* True to enable full mutexing *\/$/;"	m	struct:Sqlite3Config
bHasContent	.\fts3Int.h	/^  u8 bHasContent;                 \/* True if %_content table exists *\/$/;"	m	struct:Fts3Table
bHasDocsize	.\fts3Int.h	/^  u8 bHasDocsize;                 \/* True if %_docsize table exists *\/$/;"	m	struct:Fts3Table
bMalloced	.\sqliteInt.h	/^  u8 bMalloced;           \/* True if pStart obtained from sqlite3_malloc() *\/$/;"	m	struct:Lookaside
bMemstat	.\sqliteInt.h	/^  int bMemstat;                     \/* True to enable memory status *\/$/;"	m	struct:Sqlite3Config
bPending	.\os_win.c	/^  BOOL bPending;      \/* Indicates a pending lock has been obtained *\/$/;"	m	struct:winceLock	file:
bPurgeable	.\pcache.c	/^  int bPurgeable;                     \/* True if pages are on backing store *\/$/;"	m	struct:PCache	file:
bPurgeable	.\pcache1.c	/^  int bPurgeable;                     \/* True if cache is purgeable *\/$/;"	m	struct:PCache1	file:
bReserved	.\os_win.c	/^  BOOL bReserved;     \/* Indicates a reserved lock has been obtained *\/$/;"	m	struct:winceLock	file:
backtrace	.\mem2.c	37;"	d	file:
backtrace_symbols_fd	.\mem2.c	38;"	d	file:
backupOnePage	.\backup.c	/^static int backupOnePage(sqlite3_backup *p, Pgno iSrcPg, const u8 *zSrcData){$/;"	f	file:
backupTruncateFile	.\backup.c	/^static int backupTruncateFile(sqlite3_file *pFile, i64 iSize){$/;"	f	file:
bail_on_error	.\shell.c	/^static int bail_on_error = 0;$/;"	v	file:
balance	.\btree.c	/^static int balance(BtCursor *pCur){$/;"	f	file:
balance_deeper	.\btree.c	/^static int balance_deeper(MemPage *pRoot, MemPage **ppChild){$/;"	f	file:
balance_nonroot	.\btree.c	/^static int balance_nonroot($/;"	f	file:
balance_quick	.\btree.c	/^static int balance_quick(MemPage *pParent, MemPage *pPage, u8 *pSpace){$/;"	f	file:
base	.\fts3Int.h	/^  sqlite3_vtab base;              \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3Table
base	.\fts3Int.h	/^  sqlite3_vtab_cursor base;       \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3Cursor
base	.\fts3_icu.c	/^  sqlite3_tokenizer base;$/;"	m	struct:IcuTokenizer	file:
base	.\fts3_icu.c	/^  sqlite3_tokenizer_cursor base;$/;"	m	struct:IcuCursor	file:
base	.\fts3_porter.c	/^  sqlite3_tokenizer base;      \/* Base class *\/$/;"	m	struct:porter_tokenizer	file:
base	.\fts3_porter.c	/^  sqlite3_tokenizer_cursor base;$/;"	m	struct:porter_tokenizer_cursor	file:
base	.\fts3_tokenizer1.c	/^  sqlite3_tokenizer base;$/;"	m	struct:simple_tokenizer	file:
base	.\fts3_tokenizer1.c	/^  sqlite3_tokenizer_cursor base;$/;"	m	struct:simple_tokenizer_cursor	file:
base	.\printf.c	/^  etByte base;             \/* The base for radix conversion *\/$/;"	m	struct:et_info	file:
base	.\rtree.c	/^  sqlite3_vtab base;$/;"	m	struct:Rtree	file:
base	.\rtree.c	/^  sqlite3_vtab_cursor base;$/;"	m	struct:RtreeCursor	file:
beginTimer	.\shell.c	/^static void beginTimer(void){$/;"	f	file:
bestAutomaticIndex	.\where.c	/^static void bestAutomaticIndex($/;"	f	file:
bestAutomaticIndex	.\where.c	1732;"	d	file:
bestBtreeIndex	.\where.c	/^static void bestBtreeIndex($/;"	f	file:
bestIndex	.\where.c	/^static void bestIndex($/;"	f	file:
bestOrClauseIndex	.\where.c	/^static void bestOrClauseIndex($/;"	f	file:
bestVirtualIndex	.\where.c	/^static void bestVirtualIndex($/;"	f	file:
bigEndCksum	.\wal.c	/^  u8 bigEndCksum;                 \/* True if checksums in WAL are big-endian *\/$/;"	m	struct:WalIndexHdr	file:
binCollFunc	.\main.c	/^static int binCollFunc($/;"	f	file:
binaryCompareP5	.\expr.c	/^static u8 binaryCompareP5(Expr *pExpr1, Expr *pExpr2, int jumpIfNull){$/;"	f	file:
binaryToUnaryIfNull	.\parse.c	/^  static void binaryToUnaryIfNull(Parse *pParse, Expr *pY, Expr *pA, int op){$/;"	f	file:
bindText	.\vdbeapi.c	/^static int bindText($/;"	f	file:
bind_blob	.\sqlite3ext.h	/^  int  (*bind_blob)(sqlite3_stmt*,int,const void*,int n,void(*)(void*));$/;"	m	struct:sqlite3_api_routines
bind_double	.\sqlite3ext.h	/^  int  (*bind_double)(sqlite3_stmt*,int,double);$/;"	m	struct:sqlite3_api_routines
bind_int	.\sqlite3ext.h	/^  int  (*bind_int)(sqlite3_stmt*,int,int);$/;"	m	struct:sqlite3_api_routines
bind_int64	.\sqlite3ext.h	/^  int  (*bind_int64)(sqlite3_stmt*,int,sqlite_int64);$/;"	m	struct:sqlite3_api_routines
bind_null	.\sqlite3ext.h	/^  int  (*bind_null)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines
bind_parameter_count	.\sqlite3ext.h	/^  int  (*bind_parameter_count)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines
bind_parameter_index	.\sqlite3ext.h	/^  int  (*bind_parameter_index)(sqlite3_stmt*,const char*zName);$/;"	m	struct:sqlite3_api_routines
bind_parameter_name	.\sqlite3ext.h	/^  const char * (*bind_parameter_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines
bind_text	.\sqlite3ext.h	/^  int  (*bind_text)(sqlite3_stmt*,int,const char*,int n,void(*)(void*));$/;"	m	struct:sqlite3_api_routines
bind_text16	.\sqlite3ext.h	/^  int  (*bind_text16)(sqlite3_stmt*,int,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines
bind_value	.\sqlite3ext.h	/^  int  (*bind_value)(sqlite3_stmt*,int,const sqlite3_value*);$/;"	m	struct:sqlite3_api_routines
bind_zeroblob	.\sqlite3ext.h	/^  int (*bind_zeroblob)(sqlite3_stmt*,int,int);$/;"	m	struct:sqlite3_api_routines
bits	.\tclsqlite.c	/^  uint32 bits[2];$/;"	m	struct:MD5Context	file:
blobReadWrite	.\vdbeblob.c	/^static int blobReadWrite($/;"	f	file:
blob_bytes	.\sqlite3ext.h	/^  int (*blob_bytes)(sqlite3_blob*);$/;"	m	struct:sqlite3_api_routines
blob_close	.\sqlite3ext.h	/^  int (*blob_close)(sqlite3_blob*);$/;"	m	struct:sqlite3_api_routines
blob_open	.\sqlite3ext.h	/^  int (*blob_open)(sqlite3*,const char*,const char*,const char*,sqlite3_int64,int,sqlite3_blob**);$/;"	m	struct:sqlite3_api_routines
blob_read	.\sqlite3ext.h	/^  int (*blob_read)(sqlite3_blob*,void*,int,int);$/;"	m	struct:sqlite3_api_routines
blob_write	.\sqlite3ext.h	/^  int (*blob_write)(sqlite3_blob*,const void*,int,int);$/;"	m	struct:sqlite3_api_routines
booleanValue	.\shell.c	/^static int booleanValue(char *zArg){$/;"	f	file:
btreeClearHasContent	.\btree.c	/^static void btreeClearHasContent(BtShared *pBt){$/;"	f	file:
btreeCreateTable	.\btree.c	/^static int btreeCreateTable(Btree *p, int *piTable, int flags){$/;"	f	file:
btreeCursor	.\btree.c	/^static int btreeCursor($/;"	f	file:
btreeDropTable	.\btree.c	/^static int btreeDropTable(Btree *p, Pgno iTable, int *piMoved){$/;"	f	file:
btreeEndTransaction	.\btree.c	/^static void btreeEndTransaction(Btree *p){$/;"	f	file:
btreeGetHasContent	.\btree.c	/^static int btreeGetHasContent(BtShared *pBt, Pgno pgno){$/;"	f	file:
btreeGetPage	.\btree.c	/^static int btreeGetPage($/;"	f	file:
btreeInitPage	.\btree.c	/^static int btreeInitPage(MemPage *pPage){$/;"	f	file:
btreeIntegrity	.\btreeInt.h	601;"	d
btreeInvokeBusyHandler	.\btree.c	/^static int btreeInvokeBusyHandler(void *pArg){$/;"	f	file:
btreeMask	.\vdbeInt.h	/^  int btreeMask;          \/* Bitmask of db->aDb[] entries referenced *\/$/;"	m	struct:Vdbe
btreeMoveto	.\btree.c	/^static int btreeMoveto($/;"	f	file:
btreePageFromDbPage	.\btree.c	/^static MemPage *btreePageFromDbPage(DbPage *pDbPage, Pgno pgno, BtShared *pBt){$/;"	f	file:
btreePageLookup	.\btree.c	/^static MemPage *btreePageLookup(BtShared *pBt, Pgno pgno){$/;"	f	file:
btreePagecount	.\btree.c	/^static Pgno btreePagecount(BtShared *pBt){$/;"	f	file:
btreeParseCell	.\btree.c	/^static void btreeParseCell($/;"	f	file:
btreeParseCellPtr	.\btree.c	/^static void btreeParseCellPtr($/;"	f	file:
btreeRestoreCursorPosition	.\btree.c	/^static int btreeRestoreCursorPosition(BtCursor *pCur){$/;"	f	file:
btreeSetHasContent	.\btree.c	/^static int btreeSetHasContent(BtShared *pBt, Pgno pgno){$/;"	f	file:
buf	.\tclsqlite.c	/^  uint32 buf[4];$/;"	m	struct:MD5Context	file:
busy	.\sqliteInt.h	/^    u8 busy;                    \/* TRUE if currently initializing *\/$/;"	m	struct:sqlite3::sqlite3InitInfo
busyHandler	.\sqliteInt.h	/^  BusyHandler busyHandler;      \/* Busy callback *\/$/;"	m	struct:sqlite3
busyTimeout	.\sqliteInt.h	/^  int busyTimeout;              \/* Busy handler timeout, in msec *\/$/;"	m	struct:sqlite3
busy_handler	.\sqlite3ext.h	/^  int  (*busy_handler)(sqlite3*,int(*)(void*,int),void*);$/;"	m	struct:sqlite3_api_routines
busy_timeout	.\sqlite3ext.h	/^  int  (*busy_timeout)(sqlite3*,int ms);$/;"	m	struct:sqlite3_api_routines
byteReverse	.\tclsqlite.c	/^static void byteReverse (unsigned char *buf, unsigned longs){$/;"	f	file:
cType	.\fts3_porter.c	/^static const char cType[] = {$/;"	v	file:
cacheCtr	.\vdbeInt.h	/^  u32 cacheCtr;           \/* VdbeCursor row cache generation counter *\/$/;"	m	struct:Vdbe
cacheEntryClear	.\expr.c	/^static void cacheEntryClear(Parse *pParse, struct yColCache *p){$/;"	f	file:
cacheStatus	.\vdbeInt.h	/^  u32 cacheStatus;      \/* Cache is valid if this matches Vdbe.cacheCtr *\/$/;"	m	struct:VdbeCursor
cache_size	.\sqliteInt.h	/^  int cache_size;      \/* Number of pages to use in the cache *\/$/;"	m	struct:Schema
cachedRowid	.\btreeInt.h	/^  sqlite3_int64 cachedRowid; \/* Next rowid cache.  0 means not valid *\/$/;"	m	struct:BtCursor
callCollNeeded	.\callback.c	/^static void callCollNeeded(sqlite3 *db, int enc, const char *zName){$/;"	f	file:
callFinaliser	.\vtab.c	/^static void callFinaliser(sqlite3 *db, int offset){$/;"	f	file:
callback	.\shell.c	/^static int callback(void *pArg, int nArg, char **azArg, char **azCol){$/;"	f	file:
callback_data	.\shell.c	/^struct callback_data {$/;"	s	file:
cdateFunc	.\date.c	/^static void cdateFunc($/;"	f	file:
cellArea	.\rtree.c	/^static float cellArea(Rtree *pRtree, RtreeCell *p){$/;"	f	file:
cellContains	.\rtree.c	/^static int cellContains(Rtree *pRtree, RtreeCell *p1, RtreeCell *p2){$/;"	f	file:
cellGrowth	.\rtree.c	/^static float cellGrowth(Rtree *pRtree, RtreeCell *p, RtreeCell *pCell){$/;"	f	file:
cellMargin	.\rtree.c	/^static float cellMargin(Rtree *pRtree, RtreeCell *p){$/;"	f	file:
cellOffset	.\btreeInt.h	/^  u16 cellOffset;      \/* Index in aData of first cell pointer *\/$/;"	m	struct:MemPage
cellOverlap	.\rtree.c	/^static float cellOverlap($/;"	f	file:
cellOverlapEnlargement	.\rtree.c	/^static float cellOverlapEnlargement($/;"	f	file:
cellSize	.\btree.c	/^static u16 cellSize(MemPage *pPage, int iCell){$/;"	f	file:
cellSizePtr	.\btree.c	/^static u16 cellSizePtr(MemPage *pPage, u8 *pCell){$/;"	f	file:
cellUnion	.\rtree.c	/^static void cellUnion(Rtree *pRtree, RtreeCell *p1, RtreeCell *p2){$/;"	f	file:
chain	.\fts3_hash.h	/^    Fts3HashElem *chain;     \/* Pointer to first entry with this hash *\/$/;"	m	struct:Fts3Hash::_fts3ht
chain	.\hash.h	/^    HashElem *chain;           \/* Pointer to first entry with this hash *\/$/;"	m	struct:Hash::_ht
changeCntOn	.\vdbeInt.h	/^  u8 changeCntOn;         \/* True to update the change-counter *\/$/;"	m	struct:Vdbe
changeCountDone	.\pager.c	/^  u8 changeCountDone;         \/* Set after incrementing the change-counter *\/$/;"	m	struct:Pager	file:
changeTempStorage	.\pragma.c	/^static int changeTempStorage(Parse *pParse, const char *zStorageType){$/;"	f	file:
changes	.\func.c	/^static void changes($/;"	f	file:
changes	.\sqlite3ext.h	/^  int  (*changes)(sqlite3*);$/;"	m	struct:sqlite3_api_routines
channel	.\tclsqlite.c	/^  Tcl_Channel channel;      \/* Channel identifier *\/$/;"	m	struct:IncrblobChannel	file:
charMap	.\tokenize.c	29;"	d	file:
charMap	.\tokenize.c	32;"	d	file:
charset	.\printf.c	/^  etByte charset;          \/* Offset into aDigits[] of the digits string *\/$/;"	m	struct:et_info	file:
checkActiveVdbeCnt	.\vdbeaux.c	/^static void checkActiveVdbeCnt(sqlite3 *db){$/;"	f	file:
checkActiveVdbeCnt	.\vdbeaux.c	1873;"	d	file:
checkAppendMsg	.\btree.c	/^static void checkAppendMsg($/;"	f	file:
checkColumnOverlap	.\trigger.c	/^static int checkColumnOverlap(IdList *pIdList, ExprList *pEList){$/;"	f	file:
checkForMultiColumnSelectError	.\select.c	/^static int checkForMultiColumnSelectError($/;"	f	file:
checkList	.\btree.c	/^static void checkList($/;"	f	file:
checkListProperties	.\notify.c	/^static void checkListProperties(sqlite3 *db){$/;"	f	file:
checkListProperties	.\notify.c	76;"	d	file:
checkPage	.\pager.c	/^static void checkPage(PgHdr *pPg){$/;"	f	file:
checkPtrmap	.\btree.c	/^static void checkPtrmap($/;"	f	file:
checkRef	.\btree.c	/^static int checkRef(IntegrityCk *pCheck, Pgno iPage, char *zContext){$/;"	f	file:
checkSavepointCount	.\vdbe.c	/^static int checkSavepointCount(sqlite3 *db){$/;"	f	file:
checkSchema	.\sqliteInt.h	/^  u8 checkSchema;      \/* Causes schema cookie check after an error *\/$/;"	m	struct:Parse
checkTreePage	.\btree.c	/^static int checkTreePage($/;"	f	file:
childPtrSize	.\btreeInt.h	/^  u8 childPtrSize;     \/* 0 if leaf==1.  4 if leaf==0 *\/$/;"	m	struct:MemPage
ckBase	.\sqliteInt.h	/^  int ckBase;          \/* Base register of data during check constraints *\/$/;"	m	struct:Parse
ckptLock	.\wal.c	/^  u8 ckptLock;               \/* True if holding a checkpoint lock *\/$/;"	m	struct:Wal	file:
cksumInit	.\pager.c	/^  u32 cksumInit;              \/* Quasi-random value added to every checksum *\/$/;"	m	struct:Pager	file:
clearAllSharedCacheTableLocks	.\btree.c	/^static void clearAllSharedCacheTableLocks(Btree *p){$/;"	f	file:
clearAllSharedCacheTableLocks	.\btree.c	90;"	d	file:
clearCell	.\btree.c	/^static int clearCell(MemPage *pPage, unsigned char *pCell){$/;"	f	file:
clearDatabasePage	.\btree.c	/^static int clearDatabasePage($/;"	f	file:
clearSelect	.\select.c	/^static void clearSelect(sqlite3 *db, Select *p){$/;"	f	file:
clearYMD_HMS_TZ	.\date.c	/^static void clearYMD_HMS_TZ(DateTime *p){$/;"	f	file:
clear_bindings	.\sqlite3ext.h	/^  int (*clear_bindings)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines
close	.\sqlite3ext.h	/^  int  (*close)(sqlite3*);$/;"	m	struct:sqlite3_api_routines
closeAllCursors	.\vdbeaux.c	/^static void closeAllCursors(Vdbe *p){$/;"	f	file:
closeIncrblobChannels	.\tclsqlite.c	/^static void closeIncrblobChannels(SqliteDb *pDb){$/;"	f	file:
closeIncrblobChannels	.\tclsqlite.c	377;"	d	file:
closePendingFds	.\os_unix.c	/^static int closePendingFds(unixFile *pFile){$/;"	f	file:
closeUnixFile	.\os_unix.c	/^static int closeUnixFile(sqlite3_file *id){$/;"	f	file:
cnt	.\func.c	/^  i64 cnt;          \/* Number of elements summed *\/$/;"	m	struct:SumCtx	file:
cnt	.\mutex_noop.c	/^  int cnt;    \/* Number of entries without a matching leave *\/$/;"	m	struct:sqlite3_debug_mutex	file:
cnt	.\shell.c	/^  int cnt;               \/* Number of records displayed so far *\/$/;"	m	struct:callback_data	file:
cnt	.\vdbe.h	/^  int cnt;                 \/* Number of times this instruction was executed *\/$/;"	m	struct:VdbeOp
codeAlias	.\expr.c	/^static int codeAlias(Parse *pParse, int iAlias, Expr *pExpr, int target){$/;"	f	file:
codeAllEqualityTerms	.\where.c	/^static int codeAllEqualityTerms($/;"	f	file:
codeApplyAffinity	.\where.c	/^static void codeApplyAffinity(Parse *pParse, int base, int n, char *zAff){$/;"	f	file:
codeAttach	.\attach.c	/^static void codeAttach($/;"	f	file:
codeCompare	.\expr.c	/^static int codeCompare($/;"	f	file:
codeDistinct	.\select.c	/^static void codeDistinct($/;"	f	file:
codeEqualityTerm	.\where.c	/^static int codeEqualityTerm($/;"	f	file:
codeInteger	.\expr.c	/^static void codeInteger(Parse *pParse, Expr *pExpr, int negFlag, int iMem){$/;"	f	file:
codeOffset	.\select.c	/^static void codeOffset($/;"	f	file:
codeOneLoopStart	.\where.c	/^static Bitmask codeOneLoopStart($/;"	f	file:
codeReal	.\expr.c	/^static void codeReal(Vdbe *v, const char *z, int negateFlag, int iMem){$/;"	f	file:
codeRowTrigger	.\trigger.c	/^static TriggerPrg *codeRowTrigger($/;"	f	file:
codeTableLocks	.\build.c	/^static void codeTableLocks(Parse *pParse){$/;"	f	file:
codeTableLocks	.\build.c	113;"	d	file:
codeTriggerProgram	.\trigger.c	/^static int codeTriggerProgram($/;"	f	file:
colNamesSet	.\sqliteInt.h	/^  u8 colNamesSet;      \/* TRUE after OP_ColumnName has been issued to pVdbe *\/$/;"	m	struct:Parse
colUsed	.\sqliteInt.h	/^    Bitmask colUsed;  \/* Bit N (1<<N) set if column N of pTab is used *\/$/;"	m	struct:SrcList::SrcList_item
colWidth	.\shell.c	/^  int colWidth[100];     \/* Requested width of each column when in column mode*\/$/;"	m	struct:callback_data	file:
colWidth	.\shell.c	/^  int colWidth[100];$/;"	m	struct:previous_mode_data	file:
collationMatch	.\build.c	/^static int collationMatch(const char *zColl, Index *pIndex){$/;"	f	file:
collation_needed	.\sqlite3ext.h	/^  int  (*collation_needed)(sqlite3*,void*,void(*)(void*,sqlite3*,int eTextRep,const char*));$/;"	m	struct:sqlite3_api_routines
collation_needed16	.\sqlite3ext.h	/^  int  (*collation_needed16)(sqlite3*,void*,void(*)(void*,sqlite3*,int eTextRep,const void*));$/;"	m	struct:sqlite3_api_routines
columnIndex	.\select.c	/^static int columnIndex(Table *pTab, const char *zCol){$/;"	f	file:
columnMallocFailure	.\vdbeapi.c	/^static void columnMallocFailure(sqlite3_stmt *pStmt)$/;"	f	file:
columnMem	.\vdbeapi.c	/^static Mem *columnMem(sqlite3_stmt *pStmt, int i){$/;"	f	file:
columnName	.\vdbeapi.c	/^static const void *columnName($/;"	f	file:
columnType	.\select.c	/^static const char *columnType($/;"	f	file:
column_blob	.\sqlite3ext.h	/^  const void * (*column_blob)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines
column_bytes	.\sqlite3ext.h	/^  int  (*column_bytes)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines
column_bytes16	.\sqlite3ext.h	/^  int  (*column_bytes16)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines
column_count	.\sqlite3ext.h	/^  int  (*column_count)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines
column_database_name	.\sqlite3ext.h	/^  const char * (*column_database_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines
column_database_name16	.\sqlite3ext.h	/^  const void * (*column_database_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines
column_decltype	.\sqlite3ext.h	/^  const char * (*column_decltype)(sqlite3_stmt*,int i);$/;"	m	struct:sqlite3_api_routines
column_decltype16	.\sqlite3ext.h	/^  const void * (*column_decltype16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines
column_double	.\sqlite3ext.h	/^  double  (*column_double)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines
column_int	.\sqlite3ext.h	/^  int  (*column_int)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines
column_int64	.\sqlite3ext.h	/^  sqlite_int64  (*column_int64)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines
column_name	.\sqlite3ext.h	/^  const char * (*column_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines
column_name16	.\sqlite3ext.h	/^  const void * (*column_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines
column_origin_name	.\sqlite3ext.h	/^  const char * (*column_origin_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines
column_origin_name16	.\sqlite3ext.h	/^  const void * (*column_origin_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines
column_table_name	.\sqlite3ext.h	/^  const char * (*column_table_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines
column_table_name16	.\sqlite3ext.h	/^  const void * (*column_table_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines
column_text	.\sqlite3ext.h	/^  const unsigned char * (*column_text)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines
column_text16	.\sqlite3ext.h	/^  const void * (*column_text16)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines
column_type	.\sqlite3ext.h	/^  int  (*column_type)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines
column_value	.\sqlite3ext.h	/^  sqlite3_value* (*column_value)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines
commit_hook	.\sqlite3ext.h	/^  void * (*commit_hook)(sqlite3*,int(*)(void*),void*);$/;"	m	struct:sqlite3_api_routines
compare2pow63	.\util.c	/^static int compare2pow63(const char *zNum){$/;"	f	file:
compareInfo	.\func.c	/^struct compareInfo {$/;"	s	file:
comparisonAffinity	.\expr.c	/^static char comparisonAffinity(Expr *pExpr){$/;"	f	file:
compileoptiongetFunc	.\func.c	/^static void compileoptiongetFunc($/;"	f	file:
compileoptionusedFunc	.\func.c	/^static void compileoptionusedFunc($/;"	f	file:
complete	.\sqlite3ext.h	/^  int  (*complete)(const char*sql);$/;"	m	struct:sqlite3_api_routines
complete16	.\sqlite3ext.h	/^  int  (*complete16)(const void*sql);$/;"	m	struct:sqlite3_api_routines
computeHMS	.\date.c	/^static void computeHMS(DateTime *p){$/;"	f	file:
computeJD	.\date.c	/^static void computeJD(DateTime *p){$/;"	f	file:
computeLimitRegisters	.\select.c	/^static void computeLimitRegisters(Parse *pParse, Select *p, int iBreak){$/;"	f	file:
computeYMD	.\date.c	/^static void computeYMD(DateTime *p){$/;"	f	file:
computeYMD_HMS	.\date.c	/^static void computeYMD_HMS(DateTime *p){$/;"	f	file:
conchFile	.\os_unix.c	/^  unixFile *conchFile;         \/* Open conch file *\/$/;"	m	struct:proxyLockingContext	file:
conchFilePath	.\os_unix.c	/^  char *conchFilePath;         \/* Name of the conch file *\/$/;"	m	struct:proxyLockingContext	file:
conchHeld	.\os_unix.c	/^  int conchHeld;               \/* 1 if the conch is held, -1 if lockless *\/$/;"	m	struct:proxyLockingContext	file:
constructAutomaticIndex	.\where.c	/^static void constructAutomaticIndex($/;"	f	file:
contextMalloc	.\func.c	/^static void *contextMalloc(sqlite3_context *context, i64 nByte){$/;"	f	file:
context_db_handle	.\sqlite3ext.h	/^  sqlite3 *(*context_db_handle)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines
continuePrompt	.\shell.c	/^static char continuePrompt[20]; \/* Continuation prompt. default: "   ...> " *\/$/;"	v	file:
convertCpPathToUtf8	.\os_os2.c	/^char *convertCpPathToUtf8( const char *in ){$/;"	f
convertUtf8Filename	.\os_win.c	/^static void *convertUtf8Filename(const char *zFilename){$/;"	f	file:
convertUtf8PathToCp	.\os_os2.c	/^static char *convertUtf8PathToCp( const char *in ){$/;"	f	file:
cookieGoto	.\sqliteInt.h	/^  int cookieGoto;      \/* Address of OP_Goto to cookie verifier subroutine *\/$/;"	m	struct:Parse
cookieMask	.\sqliteInt.h	/^  u32 cookieMask;      \/* Bitmask of schema verified databases *\/$/;"	m	struct:Parse
cookieValue	.\sqliteInt.h	/^  int cookieValue[SQLITE_MAX_ATTACHED+2];  \/* Values of cookies to verify *\/$/;"	m	struct:Parse
copyKey	.\fts3_hash.h	/^  char copyKey;           \/* True if copy of key made on insert *\/$/;"	m	struct:Fts3Hash
copyNodeContent	.\btree.c	/^static void copyNodeContent(MemPage *pFrom, MemPage *pTo, int *pRC){$/;"	f	file:
copyPayload	.\btree.c	/^static int copyPayload($/;"	f	file:
copy_stemmer	.\fts3_porter.c	/^static void copy_stemmer(const char *zIn, int nIn, char *zOut, int *pnOut){$/;"	f	file:
corruptSchema	.\prepare.c	/^static void corruptSchema($/;"	f	file:
count	.\fts3_hash.h	/^    int count;               \/* Number of entries with this hash *\/$/;"	m	struct:Fts3Hash::_fts3ht
count	.\fts3_hash.h	/^  int count;              \/* Number of entries in this table *\/$/;"	m	struct:Fts3Hash
count	.\hash.h	/^    int count;                 \/* Number of entries with this hash *\/$/;"	m	struct:Hash::_ht
count	.\hash.h	/^  unsigned int count;       \/* Number of entries in this table *\/$/;"	m	struct:Hash
countFinalize	.\func.c	/^static void countFinalize(sqlite3_context *context){$/;"	f	file:
countStep	.\func.c	/^static void countStep(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
countWriteCursors	.\btree.c	/^static int countWriteCursors(BtShared *pBt){$/;"	f	file:
covered	.\fts3_snippet.c	/^  u64 covered;                    \/* Mask of query phrases covered *\/$/;"	m	struct:SnippetFragment	file:
createCollation	.\main.c	/^static int createCollation($/;"	f	file:
createFile	.\journal.c	/^static int createFile(JournalFile *p){$/;"	f	file:
createIncrblobChannel	.\tclsqlite.c	/^static int createIncrblobChannel($/;"	f	file:
createMask	.\where.c	/^static void createMask(WhereMaskSet *pMaskSet, int iCursor){$/;"	f	file:
createModule	.\vtab.c	/^static int createModule($/;"	f	file:
createTableStmt	.\build.c	/^static char *createTableStmt(sqlite3 *db, Table *p){$/;"	f	file:
createVarMap	.\vdbeapi.c	/^static void createVarMap(Vdbe *p){$/;"	f	file:
create_collation	.\sqlite3ext.h	/^  int  (*create_collation)(sqlite3*,const char*,int,void*,int(*)(void*,int,const void*,int,const void*));$/;"	m	struct:sqlite3_api_routines
create_collation16	.\sqlite3ext.h	/^  int  (*create_collation16)(sqlite3*,const void*,int,void*,int(*)(void*,int,const void*,int,const void*));$/;"	m	struct:sqlite3_api_routines
create_collation_v2	.\sqlite3ext.h	/^  int (*create_collation_v2)(sqlite3*,const char*,int,void*,int(*)(void*,int,const void*,int,const void*),void(*)(void*));$/;"	m	struct:sqlite3_api_routines
create_function	.\sqlite3ext.h	/^  int  (*create_function)(sqlite3*,const char*,int,int,void*,void (*xFunc)(sqlite3_context*,int,sqlite3_value**),void (*xStep)(sqlite3_context*,int,sqlite3_value**),void (*xFinal)(sqlite3_context*));$/;"	m	struct:sqlite3_api_routines
create_function16	.\sqlite3ext.h	/^  int  (*create_function16)(sqlite3*,const void*,int,int,void*,void (*xFunc)(sqlite3_context*,int,sqlite3_value**),void (*xStep)(sqlite3_context*,int,sqlite3_value**),void (*xFinal)(sqlite3_context*));$/;"	m	struct:sqlite3_api_routines
create_module	.\sqlite3ext.h	/^  int (*create_module)(sqlite3*,const char*,const sqlite3_module*,void*);$/;"	m	struct:sqlite3_api_routines
create_module_v2	.\sqlite3ext.h	/^  int (*create_module_v2)(sqlite3*,const char*,const sqlite3_module*,void*,void (*xDestroy)(void *));$/;"	m	struct:sqlite3_api_routines
ctimeFunc	.\date.c	/^static void ctimeFunc($/;"	f	file:
ctimestampFunc	.\date.c	/^static void ctimestampFunc($/;"	f	file:
currentCount	.\mem5.c	/^  u32 currentCount;   \/* Current number of distinct checkouts *\/$/;"	m	struct:Mem5Global	file:
currentOut	.\mem5.c	/^  u32 currentOut;     \/* Current checkout, including internal fragmentation *\/$/;"	m	struct:Mem5Global	file:
currentTimeFunc	.\date.c	/^static void currentTimeFunc($/;"	f	file:
cursorHoldsMutex	.\btree.c	/^static int cursorHoldsMutex(BtCursor *p){$/;"	f	file:
cycles	.\vdbe.h	/^  u64 cycles;              \/* Total time spent executing this instruction *\/$/;"	m	struct:VdbeOp
data	.\fts3_hash.h	/^  void *data;                \/* Data associated with this element *\/$/;"	m	struct:Fts3HashElem
data	.\hash.h	/^  void *data;                  \/* Data associated with this element *\/$/;"	m	struct:HashElem
data_count	.\sqlite3ext.h	/^  int  (*data_count)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines
dateFunc	.\date.c	/^static void dateFunc($/;"	f	file:
datetimeFunc	.\date.c	/^static void datetimeFunc($/;"	f	file:
db	.\analyze.c	/^  sqlite3 *db;$/;"	m	struct:analysisInfo	file:
db	.\btreeInt.h	/^  sqlite3 *db;          \/* Database connection currently using this Btree *\/$/;"	m	struct:BtShared
db	.\btreeInt.h	/^  sqlite3 *db;       \/* The database connection holding this btree *\/$/;"	m	struct:Btree
db	.\fts3Int.h	/^  sqlite3 *db;                    \/* The database connection *\/$/;"	m	struct:Fts3Table
db	.\rowset.c	/^  sqlite3 *db;                   \/* The database connection *\/$/;"	m	struct:RowSet	file:
db	.\rtree.c	/^  sqlite3 *db;                \/* Host database connection *\/$/;"	m	struct:Rtree	file:
db	.\shell.c	/^  sqlite3 *db;           \/* The database *\/$/;"	m	struct:callback_data	file:
db	.\shell.c	/^static sqlite3 *db = 0;$/;"	v	file:
db	.\sqliteInt.h	/^  sqlite3 *db;              \/* Database connection associated with this table *\/$/;"	m	struct:VTable
db	.\sqliteInt.h	/^  sqlite3 *db;         \/* Optional database for lookaside.  Can be NULL *\/$/;"	m	struct:StrAccum
db	.\sqliteInt.h	/^  sqlite3 *db;         \/* The main database structure *\/$/;"	m	struct:Parse
db	.\sqliteInt.h	/^  sqlite3 *db;        \/* The database being initialized *\/$/;"	m	struct:__anon16
db	.\sqliteInt.h	/^  sqlite3 *db;        \/* The database connection *\/$/;"	m	struct:KeyInfo
db	.\tclsqlite.c	/^  sqlite3 *db;               \/* The "real" database structure. MUST BE FIRST *\/$/;"	m	struct:SqliteDb	file:
db	.\vdbeInt.h	/^  sqlite3 *db;            \/* The database connection that owns this statement *\/$/;"	m	struct:Vdbe
db	.\vdbeInt.h	/^  sqlite3 *db;        \/* The associated database connection *\/$/;"	m	struct:Mem
db	.\vdbeblob.c	/^  sqlite3 *db;            \/* The associated database *\/$/;"	m	struct:Incrblob	file:
dbEvalColumnValue	.\tclsqlite.c	/^static Tcl_Obj *dbEvalColumnValue(DbEvalContext *p, int iCol){$/;"	f	file:
dbEvalFinalize	.\tclsqlite.c	/^static void dbEvalFinalize(DbEvalContext *p){$/;"	f	file:
dbEvalInit	.\tclsqlite.c	/^static void dbEvalInit($/;"	f	file:
dbEvalRowInfo	.\tclsqlite.c	/^static void dbEvalRowInfo($/;"	f	file:
dbEvalStep	.\tclsqlite.c	/^static int dbEvalStep(DbEvalContext *p){$/;"	f	file:
dbFileSize	.\pager.c	/^  Pgno dbFileSize;            \/* Number of pages in the database file *\/$/;"	m	struct:Pager	file:
dbFileVers	.\pager.c	/^  char dbFileVers[16];        \/* Changes whenever database file changes *\/$/;"	m	struct:Pager	file:
dbHintSize	.\pager.c	/^  Pgno dbHintSize;            \/* Value passed to FCNTL_SIZE_HINT call *\/$/;"	m	struct:Pager	file:
dbOrigSize	.\pager.c	/^  Pgno dbOrigSize;            \/* dbSize before the current transaction *\/$/;"	m	struct:Pager	file:
dbPath	.\os_unix.c	/^  char *dbPath;                \/* Name of the open file *\/$/;"	m	struct:proxyLockingContext	file:
dbPath	.\os_unix.c	/^  const char *dbPath;             \/* Name of the open file *\/$/;"	m	struct:afpLockingContext	file:
dbPrepareAndBind	.\tclsqlite.c	/^static int dbPrepareAndBind($/;"	f	file:
dbReleaseColumnNames	.\tclsqlite.c	/^static void dbReleaseColumnNames(DbEvalContext *p){$/;"	f	file:
dbReleaseStmt	.\tclsqlite.c	/^static void dbReleaseStmt($/;"	f	file:
dbSize	.\pager.c	/^  Pgno dbSize;                \/* Number of pages in the database *\/$/;"	m	struct:Pager	file:
dbTextToObj	.\tclsqlite.c	/^static Tcl_Obj *dbTextToObj(char const *zText){$/;"	f	file:
dbUpdate	.\os_unix.c	/^  unsigned char dbUpdate;        \/* True if any part of database file changed *\/$/;"	m	struct:unixFile	file:
db_handle	.\sqlite3ext.h	/^  sqlite3 * (*db_handle)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines
debugMutexAlloc	.\mutex_noop.c	/^static sqlite3_mutex *debugMutexAlloc(int id){$/;"	f	file:
debugMutexEnd	.\mutex_noop.c	/^static int debugMutexEnd(void){ return SQLITE_OK; }$/;"	f	file:
debugMutexEnter	.\mutex_noop.c	/^static void debugMutexEnter(sqlite3_mutex *pX){$/;"	f	file:
debugMutexFree	.\mutex_noop.c	/^static void debugMutexFree(sqlite3_mutex *pX){$/;"	f	file:
debugMutexHeld	.\mutex_noop.c	/^static int debugMutexHeld(sqlite3_mutex *pX){$/;"	f	file:
debugMutexInit	.\mutex_noop.c	/^static int debugMutexInit(void){ return SQLITE_OK; }$/;"	f	file:
debugMutexLeave	.\mutex_noop.c	/^static void debugMutexLeave(sqlite3_mutex *pX){$/;"	f	file:
debugMutexNotheld	.\mutex_noop.c	/^static int debugMutexNotheld(sqlite3_mutex *pX){$/;"	f	file:
debugMutexTry	.\mutex_noop.c	/^static int debugMutexTry(sqlite3_mutex *pX){$/;"	f	file:
declareVtab	.\sqliteInt.h	/^  u8 declareVtab;            \/* True if inside sqlite3_declare_vtab() *\/$/;"	m	struct:Parse
declare_vtab	.\sqlite3ext.h	/^  int (*declare_vtab)(sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines
decodeFlags	.\btree.c	/^static int decodeFlags(MemPage *pPage, int flagByte){$/;"	f	file:
deferredMoveto	.\vdbeInt.h	/^  Bool deferredMoveto;  \/* A call to sqlite3BtreeMoveto() is needed *\/$/;"	m	struct:VdbeCursor
defragmentPage	.\btree.c	/^static int defragmentPage(MemPage *pPage){$/;"	f	file:
deleteCell	.\rtree.c	/^static int deleteCell(Rtree *pRtree, RtreeNode *pNode, int iCell, int iHeight){$/;"	f	file:
delim	.\fts3_tokenizer1.c	/^  char delim[128];             \/* flag ASCII delimiters *\/$/;"	m	struct:simple_tokenizer	file:
desc	.\sqlite3.h	/^     unsigned char desc;       \/* True for DESC.  False for ASC. *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby
descendToCell	.\rtree.c	/^static int descendToCell($/;"	f	file:
destroyRootPage	.\build.c	/^static void destroyRootPage(Parse *pParse, int iTable, int iDb){$/;"	f	file:
destroyTable	.\build.c	/^static void destroyTable(Parse *pParse, Table *pTab){$/;"	f	file:
detachFunc	.\attach.c	/^static void detachFunc($/;"	f	file:
dev	.\os_unix.c	/^  dev_t dev;                  \/* Device number *\/$/;"	m	struct:unixFileId	file:
dfltLockMode	.\sqliteInt.h	/^  u8 dfltLockMode;              \/* Default locking-mode for attached dbs *\/$/;"	m	struct:sqlite3
directMode	.\sqliteInt.h	/^  u8 directMode;          \/* Direct rendering mode means take data directly$/;"	m	struct:AggInfo
dirfd	.\os_unix.c	/^  int dirfd;                          \/* File descriptor for the directory *\/$/;"	m	struct:unixFile	file:
disableAuth	.\tclsqlite.c	/^  int disableAuth;           \/* Disable the authorizer if it exists *\/$/;"	m	struct:SqliteDb	file:
disableTerm	.\where.c	/^static void disableTerm(WhereLevel *pLevel, WhereTerm *pTerm){$/;"	f	file:
disableTriggers	.\sqliteInt.h	/^  u8 disableTriggers;  \/* True to disable triggers *\/$/;"	m	struct:Parse
disable_simulated_io_errors	.\pager.c	/^void disable_simulated_io_errors(void){$/;"	f
disable_simulated_io_errors	.\pager.c	3473;"	d	file:
disable_simulated_io_errors	.\pager.h	176;"	d
disallow	.\mem2.c	/^  int disallow; \/* Do not allow memory allocation *\/$/;"	m	struct:__anon2	file:
displayP4	.\vdbeaux.c	/^static char *displayP4(Op *pOp, char *zTemp, int nTemp){$/;"	f	file:
display_stats	.\shell.c	/^static int display_stats($/;"	f	file:
doNotSpill	.\pager.c	/^  u8 doNotSpill;              \/* Do not spill the cache when non-zero *\/$/;"	m	struct:Pager	file:
doNotSyncSpill	.\pager.c	/^  u8 doNotSyncSpill;          \/* Do not do a spill that requires jrnl sync *\/$/;"	m	struct:Pager	file:
doNotUseWAL	.\btreeInt.h	/^  u8 doNotUseWAL;       \/* If true, do not open write-ahead-log file *\/$/;"	m	struct:BtShared
doWalCallbacks	.\vdbeapi.c	/^static int doWalCallbacks(sqlite3 *db){$/;"	f	file:
do_meta_command	.\shell.c	/^static int do_meta_command(char *zLine, struct callback_data *p){$/;"	f	file:
done	.\sqliteInt.h	/^    u8 done;               \/* A flag to indicate when processing is finished *\/$/;"	m	struct:ExprList::ExprList_item
dotlockCheckReservedLock	.\os_unix.c	/^static int dotlockCheckReservedLock(sqlite3_file *id, int *pResOut) {$/;"	f	file:
dotlockClose	.\os_unix.c	/^static int dotlockClose(sqlite3_file *id) {$/;"	f	file:
dotlockLock	.\os_unix.c	/^static int dotlockLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
dotlockUnlock	.\os_unix.c	/^static int dotlockUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
double	.\sqlite3.h	263;"	d
double	.\sqlite3.h	5956;"	d
double	.\sqliteInt.h	310;"	d
doubleConsonant	.\fts3_porter.c	/^static int doubleConsonant(const char *z){$/;"	f	file:
doubleToInt64	.\vdbemem.c	/^static i64 doubleToInt64(double r){$/;"	f	file:
downgradeAllSharedCacheTableLocks	.\btree.c	/^static void downgradeAllSharedCacheTableLocks(Btree *p){$/;"	f	file:
downgradeAllSharedCacheTableLocks	.\btree.c	91;"	d	file:
dropCell	.\btree.c	/^static void dropCell(MemPage *pPage, int idx, int sz, int *pRC){$/;"	f	file:
dump_callback	.\shell.c	/^static int dump_callback(void *pArg, int nArg, char **azArg, char **azCol){$/;"	f	file:
dup8bytes	.\expr.c	/^static char *dup8bytes(Vdbe *v, const char *in){$/;"	f	file:
dupedExprNodeSize	.\expr.c	/^static int dupedExprNodeSize(Expr *p, int flags){$/;"	f	file:
dupedExprSize	.\expr.c	/^static int dupedExprSize(Expr *p, int flags){$/;"	f	file:
dupedExprStructSize	.\expr.c	/^static int dupedExprStructSize(Expr *p, int flags){$/;"	f	file:
eCoordType	.\rtree.c	/^  int eCoordType;$/;"	m	struct:Rtree	file:
eDest	.\sqliteInt.h	/^  u8 eDest;         \/* How to dispose of the results *\/$/;"	m	struct:SelectDest
eFileLock	.\os_unix.c	/^  int eFileLock;                  \/* One of SHARED_LOCK, RESERVED_LOCK etc. *\/$/;"	m	struct:unixInodeInfo	file:
eFileLock	.\os_unix.c	/^  unsigned char eFileLock;            \/* The type of lock held on this fd *\/$/;"	m	struct:unixFile	file:
eLock	.\btreeInt.h	/^  u8 eLock;             \/* READ_LOCK or WRITE_LOCK *\/$/;"	m	struct:BtLock
eLock	.\pager.c	/^  u8 eLock;                   \/* Current lock held on database file *\/$/;"	m	struct:Pager	file:
eOperator	.\parse.c	/^  Token eOperator;  \/* "like" or "glob" or "regexp" *\/$/;"	m	struct:LikeOp	file:
eOperator	.\where.c	/^  u16 eOperator;          \/* A WO_xx value describing <op> *\/$/;"	m	struct:WhereTerm	file:
eOrconf	.\sqliteInt.h	/^  u8 eOrconf;          \/* Default ON CONFLICT policy for trigger steps *\/$/;"	m	struct:Parse
eSearch	.\fts3Int.h	/^  i16 eSearch;                    \/* Search strategy (see below) *\/$/;"	m	struct:Fts3Cursor
eState	.\btreeInt.h	/^  u8 eState;                \/* One of the CURSOR_XXX constants (see below) *\/$/;"	m	struct:BtCursor
eState	.\pager.c	/^  u8 eState;                  \/* Pager state (OPEN, READER, WRITER_LOCKED..) *\/$/;"	m	struct:Pager	file:
eTriggerOp	.\sqliteInt.h	/^  u8 eTriggerOp;       \/* TK_UPDATE, TK_INSERT or TK_DELETE *\/$/;"	m	struct:Parse
eType	.\fts3Int.h	/^  int eType;                 \/* One of the FTSQUERY_XXX values defined below *\/$/;"	m	struct:Fts3Expr
eType	.\mem2.c	/^  u8 eType;                           \/* Allocation type code *\/$/;"	m	struct:MemBlockHdr	file:
eType	.\sqliteInt.h	/^  u8 eType;         \/* SQLITE_NULL, SQLITE_INTEGER ... etc. *\/$/;"	m	struct:IndexSample
ebcdicToAscii	.\tokenize.c	/^const unsigned char ebcdicToAscii[] = {$/;"	v
echoOn	.\shell.c	/^  int echoOn;            \/* True to echo input commands *\/$/;"	m	struct:callback_data	file:
enableTimer	.\shell.c	/^static int enableTimer = 0;$/;"	v	file:
enable_shared_cache	.\sqlite3ext.h	/^  int  (*enable_shared_cache)(int);$/;"	m	struct:sqlite3_api_routines
enable_simulated_io_errors	.\pager.c	/^void enable_simulated_io_errors(void){$/;"	f
enable_simulated_io_errors	.\pager.c	3474;"	d	file:
enable_simulated_io_errors	.\pager.h	177;"	d
enc	.\sqliteInt.h	/^  u8 enc;               \/* Text encoding handled by xCmp() *\/$/;"	m	struct:CollSeq
enc	.\sqliteInt.h	/^  u8 enc;              \/* Text encoding used by this database *\/$/;"	m	struct:Schema
enc	.\sqliteInt.h	/^  u8 enc;             \/* Text encoding - one of the SQLITE_UTF* values *\/$/;"	m	struct:KeyInfo
enc	.\vdbeInt.h	/^  u8  enc;            \/* SQLITE_UTF8, SQLITE_UTF16BE, SQLITE_UTF16LE *\/$/;"	m	struct:Mem
endTimer	.\shell.c	/^static void endTimer(void){$/;"	f	file:
endpoint	.\memjournal.c	/^  FilePoint endpoint;             \/* Pointer to the end of the file *\/$/;"	m	struct:MemJournal	file:
enterMutex	.\notify.c	/^static void enterMutex(void){$/;"	f	file:
errCode	.\pager.c	/^  int errCode;                \/* One of several kinds of errors *\/$/;"	m	struct:Pager	file:
errCode	.\sqliteInt.h	/^  int errCode;                  \/* Most recent error code (SQLITE_*) *\/$/;"	m	struct:sqlite3
errMask	.\sqliteInt.h	/^  int errMask;                  \/* & result codes with this before returning *\/$/;"	m	struct:sqlite3
errMsg	.\btreeInt.h	/^  StrAccum errMsg;  \/* Accumulate the error message text here *\/$/;"	m	struct:IntegrityCk
errcode	.\sqlite3ext.h	/^  int  (*errcode)(sqlite3*db);$/;"	m	struct:sqlite3_api_routines
errmsg	.\sqlite3ext.h	/^  const char * (*errmsg)(sqlite3*);$/;"	m	struct:sqlite3_api_routines
errmsg16	.\sqlite3ext.h	/^  const void * (*errmsg16)(sqlite3*);$/;"	m	struct:sqlite3_api_routines
errorAction	.\vdbeInt.h	/^  u8 errorAction;         \/* Recovery action to do in case of an error *\/$/;"	m	struct:Vdbe
estLog	.\where.c	/^static double estLog(double N){$/;"	f	file:
estimatedCost	.\sqlite3.h	/^  double estimatedCost;      \/* Estimated cost of using this index *\/$/;"	m	struct:sqlite3_index_info
etBUFSIZE	.\printf.c	199;"	d	file:
etByte	.\printf.c	/^typedef unsigned char etByte;$/;"	t	file:
etCHARX	.\printf.c	67;"	d	file:
etDYNSTRING	.\printf.c	65;"	d	file:
etEXP	.\printf.c	61;"	d	file:
etFLOAT	.\printf.c	60;"	d	file:
etGENERIC	.\printf.c	62;"	d	file:
etINVALID	.\printf.c	78;"	d	file:
etORDINAL	.\printf.c	76;"	d	file:
etPERCENT	.\printf.c	66;"	d	file:
etPOINTER	.\printf.c	74;"	d	file:
etRADIX	.\printf.c	59;"	d	file:
etSIZE	.\printf.c	63;"	d	file:
etSQLESCAPE	.\printf.c	69;"	d	file:
etSQLESCAPE2	.\printf.c	70;"	d	file:
etSQLESCAPE3	.\printf.c	75;"	d	file:
etSRCLIST	.\printf.c	73;"	d	file:
etSTRING	.\printf.c	64;"	d	file:
etTOKEN	.\printf.c	72;"	d	file:
et_getdigit	.\printf.c	/^static char et_getdigit(LONGDOUBLE_TYPE *val, int *cnt){$/;"	f	file:
et_info	.\printf.c	/^typedef struct et_info {   \/* Information about each format field *\/$/;"	s	file:
et_info	.\printf.c	/^} et_info;$/;"	t	typeref:struct:et_info	file:
evalConstExpr	.\expr.c	/^static int evalConstExpr(Walker *pWalker, Expr *pExpr){$/;"	f	file:
evalFts3Expr	.\fts3.c	/^static int evalFts3Expr($/;"	f	file:
exclMask	.\os_unix.c	/^  u16 exclMask;              \/* Mask of exclusive locks held *\/$/;"	m	struct:unixShm	file:
exclMask	.\os_unix.c	/^  u8 exclMask;               \/* Mask of exclusive locks held *\/$/;"	m	struct:unixShmNode	file:
exclMask	.\os_win.c	/^  u16 exclMask;              \/* Mask of exclusive locks held *\/$/;"	m	struct:winShm	file:
exclusiveMode	.\pager.c	/^  u8 exclusiveMode;           \/* Boolean. True if locking_mode==EXCLUSIVE *\/$/;"	m	struct:Pager	file:
exclusiveMode	.\wal.c	/^  u8 exclusiveMode;          \/* Non-zero if connection is in exclusive mode *\/$/;"	m	struct:Wal	file:
exec	.\sqlite3ext.h	/^  int  (*exec)(sqlite3*,const char*,sqlite3_callback,void*,char**);$/;"	m	struct:sqlite3_api_routines
execExecSql	.\vacuum.c	/^static int execExecSql(sqlite3 *db, char **pzErrMsg, const char *zSql){$/;"	f	file:
execSql	.\vacuum.c	/^static int execSql(sqlite3 *db, char **pzErrMsg, const char *zSql){$/;"	f	file:
expandBlob	.\vdbemem.c	25;"	d	file:
expensive_assert	.\pcache.c	40;"	d	file:
expensive_assert	.\pcache.c	42;"	d	file:
expired	.\sqlite3ext.h	/^  int  (*expired)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines
expired	.\vdbeInt.h	/^  u8 expired;             \/* True if the VM needs to be recompiled *\/$/;"	m	struct:Vdbe
explain	.\sqliteInt.h	/^  u8 explain;          \/* True if the EXPLAIN flag is found on the query *\/$/;"	m	struct:Parse
explain	.\vdbeInt.h	/^  u8 explain;             \/* True if EXPLAIN present on SQL command *\/$/;"	m	struct:Vdbe
explainPrev	.\shell.c	/^  struct previous_mode_data explainPrev;$/;"	m	struct:callback_data	typeref:struct:callback_data::previous_mode_data	file:
expmask	.\vdbeInt.h	/^  u32 expmask;            \/* Binding to these vars invalidates VM *\/$/;"	m	struct:Vdbe
exprAnalyze	.\where.c	/^static void exprAnalyze($/;"	f	file:
exprAnalyzeAll	.\where.c	/^static void exprAnalyzeAll($/;"	f	file:
exprAnalyzeOrTerm	.\where.c	/^static void exprAnalyzeOrTerm($/;"	f	file:
exprCodeBetween	.\expr.c	/^static void exprCodeBetween($/;"	f	file:
exprCommute	.\where.c	/^static void exprCommute(Parse *pParse, Expr *pExpr){$/;"	f	file:
exprDup	.\expr.c	/^static Expr *exprDup(sqlite3 *db, Expr *p, int flags, u8 **pzBuffer){$/;"	f	file:
exprIsConst	.\expr.c	/^static int exprIsConst(Expr *p, int initFlag){$/;"	f	file:
exprListTableUsage	.\where.c	/^static Bitmask exprListTableUsage(WhereMaskSet *pMaskSet, ExprList *pList){$/;"	f	file:
exprNodeIsConstant	.\expr.c	/^static int exprNodeIsConstant(Walker *pWalker, Expr *pExpr){$/;"	f	file:
exprSelectTableUsage	.\where.c	/^static Bitmask exprSelectTableUsage(WhereMaskSet *pMaskSet, Select *pS){$/;"	f	file:
exprSetHeight	.\expr.c	/^static void exprSetHeight(Expr *p){$/;"	f	file:
exprSetHeight	.\expr.c	355;"	d	file:
exprStructSize	.\expr.c	/^static int exprStructSize(Expr *p){$/;"	f	file:
exprTableUsage	.\where.c	/^static Bitmask exprTableUsage(WhereMaskSet *pMaskSet, Expr *p){$/;"	f	file:
exprToString	.\fts3_expr.c	/^static void exprToString(Fts3Expr *pExpr, char *zBuf){$/;"	f	file:
exprWalkNoop	.\select.c	/^static int exprWalkNoop(Walker *NotUsed, Expr *NotUsed2){$/;"	f	file:
extended_result_codes	.\sqlite3ext.h	/^  int (*extended_result_codes)(sqlite3*,int);$/;"	m	struct:sqlite3_api_routines
f	.\rtree.c	/^  float f;$/;"	m	union:RtreeCoord	file:
fcntl	.\os_unix.c	278;"	d	file:
fcntl	.\os_unix.c	393;"	d	file:
fcntlSizeHint	.\os_unix.c	/^static int fcntlSizeHint(unixFile *pFile, i64 nByte){$/;"	f	file:
fd	.\os_unix.c	/^  int fd;                           \/* file desc to assoc this lock with *\/$/;"	m	struct:ByteRangeLockPB2	file:
fd	.\os_unix.c	/^  int fd;                   \/* File descriptor to close *\/$/;"	m	struct:UnixUnusedFd	file:
fd	.\pager.c	/^  sqlite3_file *fd;           \/* File descriptor for database *\/$/;"	m	struct:Pager	file:
fdatasync	.\os_unix.c	2797;"	d	file:
fetchPayload	.\btree.c	/^static const unsigned char *fetchPayload($/;"	f	file:
fileFlags	.\os_unix.c	/^  int fileFlags;                      \/* Miscellanous flags *\/$/;"	m	struct:unixFile	file:
fileId	.\os_unix.c	/^  struct unixFileId fileId;       \/* The lookup key *\/$/;"	m	struct:unixInodeInfo	typeref:struct:unixInodeInfo::unixFileId	file:
file_control	.\sqlite3ext.h	/^  int (*file_control)(sqlite3*,const char*,int,void*);$/;"	m	struct:sqlite3_api_routines
file_format	.\sqliteInt.h	/^  u8 file_format;      \/* Schema format version for this file *\/$/;"	m	struct:Schema
fillInCell	.\btree.c	/^static int fillInCell($/;"	f	file:
fillInUnixFile	.\os_unix.c	/^static int fillInUnixFile($/;"	f	file:
finalize	.\sqlite3ext.h	/^  int  (*finalize)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines
finalizeAggFunctions	.\select.c	/^static void finalizeAggFunctions(Parse *pParse, AggInfo *pAggInfo){$/;"	f	file:
findBtree	.\backup.c	/^static Btree *findBtree(sqlite3 *pErrorDb, sqlite3 *pDb, const char *zDb){$/;"	f	file:
findCell	.\btree.c	852;"	d	file:
findCollSeqEntry	.\callback.c	/^static CollSeq *findCollSeqEntry($/;"	f	file:
findCreateFileMode	.\os_unix.c	/^static int findCreateFileMode($/;"	f	file:
findElementGivenHash	.\hash.c	/^static HashElem *findElementGivenHash($/;"	f	file:
findInodeInfo	.\os_unix.c	/^static int findInodeInfo($/;"	f	file:
findLeafNode	.\rtree.c	/^static int findLeafNode(Rtree *pRtree, i64 iRowid, RtreeNode **ppLeaf){$/;"	f	file:
findNextHostParameter	.\vdbetrace.c	/^static int findNextHostParameter(const char *zSql, int *pnToken){$/;"	f	file:
findOverflowCell	.\btree.c	/^static u8 *findOverflowCell(MemPage *pPage, int iCell){$/;"	f	file:
findReusableFd	.\os_unix.c	/^static UnixUnusedFd *findReusableFd(const char *zPath, int flags){$/;"	f	file:
findSqlFunc	.\tclsqlite.c	/^static SqlFunc *findSqlFunc(SqliteDb *pDb, const char *zName){$/;"	f	file:
findTerm	.\where.c	/^static WhereTerm *findTerm($/;"	f	file:
find_home_dir	.\shell.c	/^static char *find_home_dir(void){$/;"	f	file:
finder_type	.\os_unix.c	/^typedef const sqlite3_io_methods *(*finder_type)(const char*,unixFile*);$/;"	t	file:
first	.\fts3_hash.h	/^  Fts3HashElem *first;    \/* The first element of the array *\/$/;"	m	struct:Fts3Hash
first	.\hash.h	/^  HashElem *first;          \/* The first element of the array *\/$/;"	m	struct:Hash
fixBoundingBox	.\rtree.c	/^static void fixBoundingBox(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
fixLeafParent	.\rtree.c	/^static int fixLeafParent(Rtree *pRtree, RtreeNode *pLeaf){$/;"	f	file:
fkActionTrigger	.\fkey.c	/^static Trigger *fkActionTrigger($/;"	f	file:
fkLookupParent	.\fkey.c	/^static void fkLookupParent($/;"	f	file:
fkScanChildren	.\fkey.c	/^static void fkScanChildren($/;"	f	file:
fkTriggerDelete	.\fkey.c	/^static void fkTriggerDelete(sqlite3 *dbMem, Trigger *p){$/;"	f	file:
fkeyHash	.\sqliteInt.h	/^  Hash fkeyHash;       \/* All foreign keys by referenced table name *\/$/;"	m	struct:Schema
flagPragma	.\pragma.c	/^static int flagPragma(Parse *pParse, const char *zLeft, const char *zRight){$/;"	f	file:
flags	.\fts3Int.h	/^  int flags;$/;"	m	struct:Fts3SegFilter
flags	.\journal.c	/^  int flags;                      \/* xOpen flags *\/$/;"	m	struct:JournalFile	file:
flags	.\os_unix.c	/^  int flags;                \/* Flags this file descriptor was opened with *\/$/;"	m	struct:UnixUnusedFd	file:
flags	.\pcache.h	/^  u16 flags;                     \/* PGHDR flags defined below *\/$/;"	m	struct:PgHdr
flags	.\printf.c	/^  etByte flags;            \/* One or more of FLAG_ constants below *\/$/;"	m	struct:et_info	file:
flags	.\sqliteInt.h	/^  int flags;                    \/* Miscellaneous flags. See below *\/$/;"	m	struct:sqlite3
flags	.\sqliteInt.h	/^  u16 flags;             \/* Various flags.  EP_* See below *\/$/;"	m	struct:Expr
flags	.\sqliteInt.h	/^  u16 flags;           \/* Flags associated with this schema *\/$/;"	m	struct:Schema
flags	.\sqliteInt.h	/^  u16 flags;          \/* Boolean settings.  UNPACKED_... below *\/$/;"	m	struct:UnpackedRecord
flags	.\sqliteInt.h	/^  u8 flags;            \/* Some combination of SQLITE_FUNC_* *\/$/;"	m	struct:FuncDef
flags	.\vdbeInt.h	/^  u16 flags;          \/* Some combination of MEM_Null, MEM_Str, MEM_Dyn, etc. *\/$/;"	m	struct:Mem
flags	.\vdbeblob.c	/^  int flags;              \/* Copy of "flags" passed to sqlite3_blob_open() *\/$/;"	m	struct:Incrblob	file:
flags2	.\sqliteInt.h	/^  u8 flags2;             \/* Second set of flags.  EP2_... *\/$/;"	m	struct:Expr
flattenSubquery	.\select.c	/^static int flattenSubquery($/;"	f	file:
float	.\sqliteInt.h	311;"	d
floatSwap	.\vdbeaux.c	/^static u64 floatSwap(u64 in){$/;"	f	file:
flockCheckReservedLock	.\os_unix.c	/^static int flockCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
flockClose	.\os_unix.c	/^static int flockClose(sqlite3_file *id) {$/;"	f	file:
flockLock	.\os_unix.c	/^static int flockLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
flockUnlock	.\os_unix.c	/^static int flockUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
flushStmtCache	.\tclsqlite.c	/^static void flushStmtCache( SqliteDb *pDb ){$/;"	f	file:
fmtinfo	.\printf.c	/^static const et_info fmtinfo[] = {$/;"	v	file:
fmttype	.\printf.c	/^  char fmttype;            \/* The format field code letter *\/$/;"	m	struct:et_info	file:
free	.\sqlite3ext.h	/^  void  (*free)(void*);$/;"	m	struct:sqlite3_api_routines
freeEphemeralFunction	.\vdbeaux.c	/^static void freeEphemeralFunction(sqlite3 *db, FuncDef *pDef){$/;"	f	file:
freeIndex	.\build.c	/^static void freeIndex(sqlite3 *db, Index *p){$/;"	f	file:
freeP4	.\vdbeaux.c	/^static void freeP4(sqlite3 *db, int p4type, void *p4){$/;"	f	file:
freePage	.\btree.c	/^static void freePage(MemPage *pPage, int *pRC){$/;"	f	file:
freePage2	.\btree.c	/^static int freePage2(BtShared *pBt, MemPage *pMemPage, Pgno iPage){$/;"	f	file:
freeSpace	.\btree.c	/^static int freeSpace(MemPage *pPage, int start, int size){$/;"	f	file:
freeTempSpace	.\btree.c	/^static void freeTempSpace(BtShared *pBt){$/;"	f	file:
freeUconvObjects	.\os_os2.c	/^static void freeUconvObjects( void ){$/;"	f	file:
free_table	.\sqlite3ext.h	/^  void  (*free_table)(char**result);$/;"	m	struct:sqlite3_api_routines
fsFlags	.\os_unix.c	/^  unsigned fsFlags;                   \/* cached details from statfs() *\/$/;"	m	struct:unixFile	file:
ftKernelBegin	.\shell.c	/^static FILETIME ftKernelBegin;$/;"	v	file:
ftUserBegin	.\shell.c	/^static FILETIME ftUserBegin;$/;"	v	file:
fts3AllocateSegdirIdx	.\fts3_write.c	/^static int fts3AllocateSegdirIdx(Fts3Table *p, int iLevel, int *piIdx){$/;"	f	file:
fts3BeginMethod	.\fts3.c	/^static int fts3BeginMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3BestIndexMethod	.\fts3.c	/^static int fts3BestIndexMethod(sqlite3_vtab *pVTab, sqlite3_index_info *pInfo){$/;"	f	file:
fts3BestSnippet	.\fts3_snippet.c	/^static int fts3BestSnippet($/;"	f	file:
fts3BinCompare	.\fts3_hash.c	/^static int fts3BinCompare(const void *pKey1, int n1, const void *pKey2, int n2){$/;"	f	file:
fts3BinHash	.\fts3_hash.c	/^static int fts3BinHash(const void *pKey, int nKey){$/;"	f	file:
fts3ColumnFilter	.\fts3_write.c	/^static void fts3ColumnFilter($/;"	f	file:
fts3ColumnMethod	.\fts3.c	/^static int fts3ColumnMethod($/;"	f	file:
fts3ColumnlistCopy	.\fts3.c	/^static void fts3ColumnlistCopy(char **pp, char **ppPoslist){$/;"	f	file:
fts3ColumnlistCount	.\fts3_snippet.c	/^static int fts3ColumnlistCount(char **ppCollist){$/;"	f	file:
fts3CommitMethod	.\fts3.c	/^static int fts3CommitMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3CompareElemByTerm	.\fts3_write.c	/^static int fts3CompareElemByTerm(const void *lhs, const void *rhs){$/;"	f	file:
fts3ConnectMethod	.\fts3.c	/^static int fts3ConnectMethod($/;"	f	file:
fts3CreateMethod	.\fts3.c	/^static int fts3CreateMethod($/;"	f	file:
fts3CreateTables	.\fts3.c	/^static int fts3CreateTables(Fts3Table *p){$/;"	f	file:
fts3CursorSeek	.\fts3.c	/^static int fts3CursorSeek(sqlite3_context *pContext, Fts3Cursor *pCsr){$/;"	f	file:
fts3DbExec	.\fts3.c	/^static void fts3DbExec($/;"	f	file:
fts3DeclareVtab	.\fts3.c	/^static int fts3DeclareVtab(Fts3Table *p){$/;"	f	file:
fts3DecodeIntArray	.\fts3_write.c	/^static void fts3DecodeIntArray($/;"	f	file:
fts3DeleteAll	.\fts3_write.c	/^static int fts3DeleteAll(Fts3Table *p){$/;"	f	file:
fts3DeleteSegdir	.\fts3_write.c	/^static int fts3DeleteSegdir($/;"	f	file:
fts3DeleteTerms	.\fts3_write.c	/^static void fts3DeleteTerms($/;"	f	file:
fts3DestroyMethod	.\fts3.c	/^static int fts3DestroyMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3DisconnectMethod	.\fts3.c	/^static int fts3DisconnectMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3DoclistMerge	.\fts3.c	/^static int fts3DoclistMerge($/;"	f	file:
fts3EncodeIntArray	.\fts3_write.c	/^static void fts3EncodeIntArray($/;"	f	file:
fts3EofMethod	.\fts3.c	/^static int fts3EofMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3ExprGlobalMatchinfoCb	.\fts3_snippet.c	/^static int fts3ExprGlobalMatchinfoCb($/;"	f	file:
fts3ExprIterate	.\fts3_snippet.c	/^static int fts3ExprIterate($/;"	f	file:
fts3ExprIterate2	.\fts3_snippet.c	/^static int fts3ExprIterate2($/;"	f	file:
fts3ExprLoadDoclists	.\fts3_snippet.c	/^static int fts3ExprLoadDoclists($/;"	f	file:
fts3ExprLoadDoclistsCb1	.\fts3_snippet.c	/^static int fts3ExprLoadDoclistsCb1(Fts3Expr *pExpr, int iPhrase, void *ctx){$/;"	f	file:
fts3ExprLoadDoclistsCb2	.\fts3_snippet.c	/^static int fts3ExprLoadDoclistsCb2(Fts3Expr *pExpr, int iPhrase, void *ctx){$/;"	f	file:
fts3ExprLocalMatchinfoCb	.\fts3_snippet.c	/^static int fts3ExprLocalMatchinfoCb($/;"	f	file:
fts3ExprNearTrim	.\fts3_snippet.c	/^static int fts3ExprNearTrim(Fts3Expr *pExpr){$/;"	f	file:
fts3ExprParse	.\fts3_expr.c	/^static int fts3ExprParse($/;"	f	file:
fts3ExprTermOffsetInit	.\fts3_snippet.c	/^static int fts3ExprTermOffsetInit(Fts3Expr *pExpr, int iPhrase, void *ctx){$/;"	f	file:
fts3ExprTest	.\fts3_expr.c	/^static void fts3ExprTest($/;"	f	file:
fts3FilterMethod	.\fts3.c	/^static int fts3FilterMethod($/;"	f	file:
fts3FindElementByHash	.\fts3_hash.c	/^static Fts3HashElem *fts3FindElementByHash($/;"	f	file:
fts3FindFunctionMethod	.\fts3.c	/^static int fts3FindFunctionMethod($/;"	f	file:
fts3FlushCallback	.\fts3_write.c	/^static int fts3FlushCallback($/;"	f	file:
fts3FunctionArg	.\fts3.c	/^static int fts3FunctionArg($/;"	f	file:
fts3GetDeltaPosition	.\fts3_snippet.c	/^static void fts3GetDeltaPosition(char **pp, int *piPos){$/;"	f	file:
fts3GetDeltaVarint	.\fts3.c	/^static void fts3GetDeltaVarint(char **pp, sqlite3_int64 *pVal){$/;"	f	file:
fts3GetDeltaVarint2	.\fts3.c	/^static void fts3GetDeltaVarint2(char **pp, char *pEnd, sqlite3_int64 *pVal){$/;"	f	file:
fts3GetMatchinfo	.\fts3_snippet.c	/^static int fts3GetMatchinfo(Fts3Cursor *pCsr){$/;"	f	file:
fts3HashClear	.\fts3_hash.h	86;"	d
fts3HashCount	.\fts3_hash.h	110;"	d
fts3HashData	.\fts3_hash.h	103;"	d
fts3HashFind	.\fts3_hash.h	85;"	d
fts3HashFindElem	.\fts3_hash.h	87;"	d
fts3HashFirst	.\fts3_hash.h	101;"	d
fts3HashFree	.\fts3_hash.c	/^static void fts3HashFree(void *p){$/;"	f	file:
fts3HashInit	.\fts3_hash.h	83;"	d
fts3HashInsert	.\fts3_hash.h	84;"	d
fts3HashInsertElement	.\fts3_hash.c	/^static void fts3HashInsertElement($/;"	f	file:
fts3HashKey	.\fts3_hash.h	104;"	d
fts3HashKeysize	.\fts3_hash.h	105;"	d
fts3HashMalloc	.\fts3_hash.c	/^static void *fts3HashMalloc(int n){$/;"	f	file:
fts3HashNext	.\fts3_hash.h	102;"	d
fts3InitVtab	.\fts3.c	/^static int fts3InitVtab($/;"	f	file:
fts3InsertData	.\fts3_write.c	/^static int fts3InsertData($/;"	f	file:
fts3InsertDocsize	.\fts3_write.c	/^static void fts3InsertDocsize($/;"	f	file:
fts3InsertTerms	.\fts3_write.c	/^static int fts3InsertTerms(Fts3Table *p, sqlite3_value **apVal, u32 *aSz){$/;"	f	file:
fts3IsEmpty	.\fts3_write.c	/^static int fts3IsEmpty(Fts3Table *p, sqlite3_value **apVal, int *pisEmpty){$/;"	f	file:
fts3IsIdChar	.\fts3_tokenizer.c	/^static int fts3IsIdChar(char c){$/;"	f	file:
fts3LoadColumnlistCounts	.\fts3_snippet.c	/^static void fts3LoadColumnlistCounts(char **pp, u32 *aOut, int isGlobal){$/;"	f	file:
fts3MatchinfoFunc	.\fts3.c	/^static void fts3MatchinfoFunc($/;"	f	file:
fts3MergeCallback	.\fts3_write.c	/^static int fts3MergeCallback($/;"	f	file:
fts3Module	.\fts3.c	/^static const sqlite3_module fts3Module = {$/;"	v	file:
fts3NearMerge	.\fts3.c	/^static int fts3NearMerge($/;"	f	file:
fts3NextMethod	.\fts3.c	/^static int fts3NextMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3NodeAddTerm	.\fts3_write.c	/^static int fts3NodeAddTerm($/;"	f	file:
fts3NodeFree	.\fts3_write.c	/^static void fts3NodeFree(SegmentNode *pTree){$/;"	f	file:
fts3NodeWrite	.\fts3_write.c	/^static int fts3NodeWrite($/;"	f	file:
fts3OffsetsFunc	.\fts3.c	/^static void fts3OffsetsFunc($/;"	f	file:
fts3OpenMethod	.\fts3.c	/^static int fts3OpenMethod(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr){$/;"	f	file:
fts3OptimizeFunc	.\fts3.c	/^static void fts3OptimizeFunc($/;"	f	file:
fts3PendingListAppend	.\fts3_write.c	/^static int fts3PendingListAppend($/;"	f	file:
fts3PendingListAppendVarint	.\fts3_write.c	/^static int fts3PendingListAppendVarint($/;"	f	file:
fts3PendingTermsAdd	.\fts3_write.c	/^static int fts3PendingTermsAdd($/;"	f	file:
fts3PendingTermsDocid	.\fts3_write.c	/^static int fts3PendingTermsDocid(Fts3Table *p, sqlite_int64 iDocid){$/;"	f	file:
fts3PhraseSelect	.\fts3.c	/^static int fts3PhraseSelect($/;"	f	file:
fts3PoslistCopy	.\fts3.c	/^static void fts3PoslistCopy(char **pp, char **ppPoslist){$/;"	f	file:
fts3PoslistMerge	.\fts3.c	/^static void fts3PoslistMerge($/;"	f	file:
fts3PoslistNearMerge	.\fts3.c	/^static int fts3PoslistNearMerge($/;"	f	file:
fts3PoslistPhraseMerge	.\fts3.c	/^static int fts3PoslistPhraseMerge($/;"	f	file:
fts3PrefixCompress	.\fts3_write.c	/^static int fts3PrefixCompress($/;"	f	file:
fts3PutColNumber	.\fts3.c	/^static int fts3PutColNumber(char **pp, int iCol){$/;"	f	file:
fts3PutDeltaVarint	.\fts3.c	/^static void fts3PutDeltaVarint($/;"	f	file:
fts3ReadNextPos	.\fts3.c	/^static void fts3ReadNextPos($/;"	f	file:
fts3ReallocOrFree	.\fts3_expr.c	/^static void *fts3ReallocOrFree(void *pOrig, int nNew){$/;"	f	file:
fts3Rehash	.\fts3_hash.c	/^static int fts3Rehash(Fts3Hash *pH, int new_size){$/;"	f	file:
fts3RemoveElementByHash	.\fts3_hash.c	/^static void fts3RemoveElementByHash($/;"	f	file:
fts3RenameMethod	.\fts3.c	/^static int fts3RenameMethod($/;"	f	file:
fts3RollbackMethod	.\fts3.c	/^static int fts3RollbackMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3RowidMethod	.\fts3.c	/^static int fts3RowidMethod(sqlite3_vtab_cursor *pCursor, sqlite_int64 *pRowid){$/;"	f	file:
fts3SegReaderCmp	.\fts3_write.c	/^static int fts3SegReaderCmp(Fts3SegReader *pLhs, Fts3SegReader *pRhs){$/;"	f	file:
fts3SegReaderDoclistCmp	.\fts3_write.c	/^static int fts3SegReaderDoclistCmp(Fts3SegReader *pLhs, Fts3SegReader *pRhs){$/;"	f	file:
fts3SegReaderFirstDocid	.\fts3_write.c	/^static void fts3SegReaderFirstDocid(Fts3SegReader *pReader){$/;"	f	file:
fts3SegReaderIsPending	.\fts3_write.c	87;"	d	file:
fts3SegReaderNew	.\fts3_write.c	/^static int fts3SegReaderNew($/;"	f	file:
fts3SegReaderNext	.\fts3_write.c	/^static int fts3SegReaderNext(Fts3SegReader *pReader){$/;"	f	file:
fts3SegReaderNextDocid	.\fts3_write.c	/^static void fts3SegReaderNextDocid($/;"	f	file:
fts3SegReaderSort	.\fts3_write.c	/^static void fts3SegReaderSort($/;"	f	file:
fts3SegReaderTermCmp	.\fts3_write.c	/^static int fts3SegReaderTermCmp($/;"	f	file:
fts3SegWriterAdd	.\fts3_write.c	/^static int fts3SegWriterAdd($/;"	f	file:
fts3SegWriterFlush	.\fts3_write.c	/^static int fts3SegWriterFlush($/;"	f	file:
fts3SegWriterFree	.\fts3_write.c	/^static void fts3SegWriterFree(SegmentWriter *pWriter){$/;"	f	file:
fts3SegmentCount	.\fts3_write.c	/^static int fts3SegmentCount(Fts3Table *p, int iLevel, int *pnSegment){$/;"	f	file:
fts3SegmentCountMax	.\fts3_write.c	/^static int fts3SegmentCountMax(Fts3Table *p, int *pnSegment, int *pnMax){$/;"	f	file:
fts3SegmentMerge	.\fts3_write.c	/^static int fts3SegmentMerge(Fts3Table *p, int iLevel){$/;"	f	file:
fts3SelectLeaf	.\fts3.c	/^static int fts3SelectLeaf($/;"	f	file:
fts3SnippetAdvance	.\fts3_snippet.c	/^static void fts3SnippetAdvance(char **ppIter, int *piIter, int iNext){$/;"	f	file:
fts3SnippetDetails	.\fts3_snippet.c	/^static void fts3SnippetDetails($/;"	f	file:
fts3SnippetFindPositions	.\fts3_snippet.c	/^static int fts3SnippetFindPositions(Fts3Expr *pExpr, int iPhrase, void *ctx){$/;"	f	file:
fts3SnippetFunc	.\fts3.c	/^static void fts3SnippetFunc($/;"	f	file:
fts3SnippetNextCandidate	.\fts3_snippet.c	/^static int fts3SnippetNextCandidate(SnippetIter *pIter){$/;"	f	file:
fts3SnippetShift	.\fts3_snippet.c	/^static int fts3SnippetShift($/;"	f	file:
fts3SnippetText	.\fts3_snippet.c	/^static int fts3SnippetText($/;"	f	file:
fts3SpecialInsert	.\fts3_write.c	/^static int fts3SpecialInsert(Fts3Table *p, sqlite3_value *pVal){$/;"	f	file:
fts3SqlExec	.\fts3_write.c	/^static void fts3SqlExec($/;"	f	file:
fts3SqlStmt	.\fts3_write.c	/^static int fts3SqlStmt($/;"	f	file:
fts3StrCompare	.\fts3_hash.c	/^static int fts3StrCompare(const void *pKey1, int n1, const void *pKey2, int n2){$/;"	f	file:
fts3StrHash	.\fts3_hash.c	/^static int fts3StrHash(const void *pKey, int nKey){$/;"	f	file:
fts3StringAppend	.\fts3_snippet.c	/^static int fts3StringAppend($/;"	f	file:
fts3SyncMethod	.\fts3.c	/^static int fts3SyncMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3TableExists	.\fts3.c	/^static void fts3TableExists($/;"	f	file:
fts3TableExistsCallback	.\fts3.c	/^static int fts3TableExistsCallback(void *pArg, int n, char **pp1, char **pp2){$/;"	f	file:
fts3TermSelect	.\fts3.c	/^static int fts3TermSelect($/;"	f	file:
fts3TermSelectCb	.\fts3.c	/^static int fts3TermSelectCb($/;"	f	file:
fts3TermSelectMerge	.\fts3.c	/^static int fts3TermSelectMerge(TermSelect *pTS){$/;"	f	file:
fts3TreeFinishNode	.\fts3_write.c	/^static int fts3TreeFinishNode($/;"	f	file:
fts3UpdateDocTotals	.\fts3_write.c	/^static void fts3UpdateDocTotals($/;"	f	file:
fts3UpdateMethod	.\fts3.c	/^static int fts3UpdateMethod($/;"	f	file:
fts3WriteSegdir	.\fts3_write.c	/^static int fts3WriteSegdir($/;"	f	file:
fts3WriteSegment	.\fts3_write.c	/^static int fts3WriteSegment($/;"	f	file:
fts3_isalnum	.\fts3_tokenizer1.c	/^static int fts3_isalnum(int x){$/;"	f	file:
fts3isspace	.\fts3_expr.c	/^static int fts3isspace(char c){$/;"	f	file:
ftsCompareFunction	.\fts3_hash.c	/^static int (*ftsCompareFunction(int keyClass))(const void*,int,const void*,int){$/;"	f	file:
ftsHashFunction	.\fts3_hash.c	/^static int (*ftsHashFunction(int keyClass))(const void*,int){$/;"	f	file:
fullSync	.\pager.c	/^  u8 fullSync;                \/* Do extra syncs of the journal for robustness *\/$/;"	m	struct:Pager	file:
full_fsync	.\os_unix.c	/^static int full_fsync(int fd, int fullSync, int dataOnly){$/;"	f	file:
fulltextClose	.\fts3.c	/^static int fulltextClose(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
functionSearch	.\callback.c	/^static FuncDef *functionSearch($/;"	f	file:
g_elapsed	.\os_common.h	/^static sqlite_uint64 g_elapsed;$/;"	v
g_start	.\os_common.h	/^static sqlite_uint64 g_start;$/;"	v
generateColumnNames	.\select.c	/^static void generateColumnNames($/;"	f	file:
generateColumnTypes	.\select.c	/^static void generateColumnTypes($/;"	f	file:
generateOutputSubroutine	.\select.c	/^static int generateOutputSubroutine($/;"	f	file:
generateSortTail	.\select.c	/^static void generateSortTail($/;"	f	file:
get2byte	.\btreeInt.h	639;"	d
get2byteNotZero	.\btree.c	44;"	d	file:
get4byte	.\btreeInt.h	641;"	d
getAndInitPage	.\btree.c	/^static int getAndInitPage($/;"	f	file:
getAutoVacuum	.\pragma.c	/^static int getAutoVacuum(const char *z){$/;"	f	file:
getBoolean	.\pragma.c	/^static u8 getBoolean(const char *z){$/;"	f	file:
getCellInfo	.\btree.c	/^  static void getCellInfo(BtCursor *pCur){$/;"	f	file:
getCellInfo	.\btree.c	3573;"	d	file:
getDigits	.\date.c	/^static int getDigits(const char *zDate, ...){$/;"	f	file:
getIntFromStmt	.\rtree.c	/^static int getIntFromStmt(sqlite3 *db, const char *zSql, int *piVal){$/;"	f	file:
getLastErrorMsg	.\os_win.c	/^static int getLastErrorMsg(int nBuf, char *zBuf){$/;"	f	file:
getLockingMode	.\pragma.c	/^static int getLockingMode(const char *z){$/;"	f	file:
getMask	.\where.c	/^static Bitmask getMask(WhereMaskSet *pMaskSet, int iCursor){$/;"	f	file:
getNextNode	.\fts3_expr.c	/^static int getNextNode($/;"	f	file:
getNextString	.\fts3_expr.c	/^static int getNextString($/;"	f	file:
getNextToken	.\fts3_expr.c	/^static int getNextToken($/;"	f	file:
getNodeSize	.\rtree.c	/^static int getNodeSize($/;"	f	file:
getOverflowPage	.\btree.c	/^static int getOverflowPage($/;"	f	file:
getProcessTimesAddr	.\shell.c	/^static GETPROCTIMES getProcessTimesAddr = NULL;$/;"	v	file:
getReadLock	.\os_os2.c	/^static int getReadLock( os2File *pFile ){$/;"	f	file:
getReadLock	.\os_win.c	/^static int getReadLock(winFile *pFile){$/;"	f	file:
getRowTrigger	.\trigger.c	/^static TriggerPrg *getRowTrigger($/;"	f	file:
getSafetyLevel	.\pragma.c	/^static u8 getSafetyLevel(const char *z){$/;"	f	file:
getSectorSize	.\os_win.c	/^static int getSectorSize($/;"	f	file:
getTempStore	.\pragma.c	/^static int getTempStore(const char *z){$/;"	f	file:
getTempname	.\os_os2.c	/^static int getTempname(int nBuf, char *zBuf ){$/;"	f	file:
getTempname	.\os_win.c	/^static int getTempname(int nBuf, char *zBuf){$/;"	f	file:
getValue	.\date.c	140;"	d	file:
getVarint	.\sqliteInt.h	2843;"	d
getVarint32	.\sqliteInt.h	2841;"	d
get_autocommit	.\sqlite3ext.h	/^  int  (*get_autocommit)(sqlite3*);$/;"	m	struct:sqlite3_api_routines
get_auxdata	.\sqlite3ext.h	/^  void * (*get_auxdata)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines
get_table	.\sqlite3ext.h	/^  int  (*get_table)(sqlite3*,const char*,char***,int*,int*,char**);$/;"	m	struct:sqlite3_api_routines
globInfo	.\func.c	/^static const struct compareInfo globInfo = { '*', '?', '[', 0 };$/;"	v	typeref:struct:compareInfo	file:
global_recover	.\sqlite3ext.h	/^  int  (*global_recover)(void);$/;"	m	struct:sqlite3_api_routines
groupConcatFinalize	.\func.c	/^static void groupConcatFinalize(sqlite3_context *context){$/;"	f	file:
groupConcatStep	.\func.c	/^static void groupConcatStep($/;"	f	file:
growOpArray	.\vdbeaux.c	/^static int growOpArray(Vdbe *p){$/;"	f	file:
h	.\date.c	/^  int h, m;          \/* Hour and minutes *\/$/;"	m	struct:DateTime	file:
h	.\os_os2.c	/^  HFILE h;                  \/* Handle for accessing the file *\/$/;"	m	struct:os2File	file:
h	.\os_unix.c	/^  int h;                              \/* The file descriptor *\/$/;"	m	struct:unixFile	file:
h	.\os_unix.c	/^  int h;                     \/* Open file descriptor *\/$/;"	m	struct:unixShmNode	file:
h	.\os_win.c	/^  HANDLE h;               \/* Handle for accessing the file *\/$/;"	m	struct:winFile	file:
hFile	.\os_win.c	/^  winFile hFile;             \/* File handle from winOpen *\/$/;"	m	struct:winShmNode	file:
hMap	.\os_win.c	/^    HANDLE hMap;             \/* File handle from CreateFileMapping *\/$/;"	m	struct:winShmNode::ShmRegion	file:
hMutex	.\os_win.c	/^  HANDLE hMutex;          \/* Mutex used to control access to shared lock *\/  $/;"	m	struct:winFile	file:
hProcess	.\shell.c	/^static HANDLE hProcess;$/;"	v	file:
hShared	.\os_win.c	/^  HANDLE hShared;         \/* Shared memory segment used for locking *\/$/;"	m	struct:winFile	file:
hasAgg	.\sqliteInt.h	/^  u8 hasAgg;           \/* True if aggregates are seen *\/$/;"	m	struct:NameContext
hasData	.\btreeInt.h	/^  u8 hasData;          \/* True if this page stores data *\/$/;"	m	struct:MemPage
hasHotJournal	.\pager.c	/^static int hasHotJournal(Pager *pPager, int *pExists){$/;"	f	file:
hasMutex	.\os_unix.c	/^  u8 hasMutex;               \/* True if holding the unixShmNode mutex *\/$/;"	m	struct:unixShm	file:
hasMutex	.\os_win.c	/^  u8 hasMutex;               \/* True if holding the winShmNode mutex *\/$/;"	m	struct:winShm	file:
hasReadConflicts	.\btree.c	/^static int hasReadConflicts(Btree *pBtree, Pgno iRoot){$/;"	f	file:
hasReadConflicts	.\btree.c	93;"	d	file:
hasSharedCacheTableLock	.\btree.c	/^static int hasSharedCacheTableLock($/;"	f	file:
hasSharedCacheTableLock	.\btree.c	92;"	d	file:
hasTimer	.\shell.c	/^static int hasTimer(void){$/;"	f	file:
hasVowel	.\fts3_porter.c	/^static int hasVowel(const char *z){$/;"	f	file:
hash	.\vdbeInt.h	/^  Hash hash;             \/* A set is just a hash table *\/$/;"	m	struct:Set
hashDestroy	.\fts3.c	/^static void hashDestroy(void *p){$/;"	f	file:
hashIsEmpty	.\rtree.c	/^static int hashIsEmpty(Rtree *pRtree){$/;"	f	file:
hdr	.\mem3.c	/^    } hdr;$/;"	m	union:Mem3Block::__anon3	typeref:struct:Mem3Block::__anon3::__anon4	file:
hdr	.\wal.c	/^  WalIndexHdr hdr;           \/* Wal-index header for current transaction *\/$/;"	m	struct:Wal	file:
hdrOffset	.\btreeInt.h	/^  u8 hdrOffset;        \/* 100 for page 1.  0 otherwise *\/$/;"	m	struct:MemPage
heightOfExpr	.\expr.c	/^static void heightOfExpr(Expr *p, int *pnHeight){$/;"	f	file:
heightOfExprList	.\expr.c	/^static void heightOfExprList(ExprList *p, int *pnHeight){$/;"	f	file:
heightOfSelect	.\expr.c	/^static void heightOfSelect(Select *p, int *pnHeight){$/;"	f	file:
hexFunc	.\func.c	/^static void hexFunc($/;"	f	file:
hexToInt	.\util.c	/^static u8 hexToInt(int h){$/;"	f	file:
hexdigits	.\func.c	/^static const char hexdigits[] = {$/;"	v	file:
hlmask	.\fts3_snippet.c	/^  u64 hlmask;                     \/* Mask of snippet terms to highlight *\/$/;"	m	struct:SnippetFragment	file:
ht	.\fts3_hash.h	/^  } *ht;$/;"	m	struct:Fts3Hash	typeref:struct:Fts3Hash::_fts3ht
ht	.\hash.h	/^  } *ht;$/;"	m	struct:Hash	typeref:struct:Hash::_ht
ht_slot	.\wal.c	/^typedef u16 ht_slot;$/;"	t	file:
htsize	.\fts3_hash.h	/^  int htsize;             \/* Number of buckets in the hash table *\/$/;"	m	struct:Fts3Hash
htsize	.\hash.h	/^  unsigned int htsize;      \/* Number of buckets in the hash table *\/$/;"	m	struct:Hash
i	.\random.c	/^  unsigned char i, j;            \/* State variables *\/$/;"	m	struct:sqlite3PrngType	file:
i	.\rtree.c	/^  int i;$/;"	m	union:RtreeCoord	file:
i	.\sqliteInt.h	/^    int i;                                     \/* Integer value *\/$/;"	m	union:Walker::__anon17
i	.\vdbe.h	/^    int i;                 \/* Integer value if p4type==P4_INT32 *\/$/;"	m	union:VdbeOp::__anon18
i	.\vdbeInt.h	/^    i64 i;              \/* Integer value. *\/$/;"	m	union:Mem::__anon19
i16	.\fts3Int.h	/^typedef short int i16;            \/* 2-byte (or larger) signed integer *\/$/;"	t
i16	.\sqliteInt.h	/^typedef INT16_TYPE i16;            \/* 2-byte signed integer *\/$/;"	t
i64	.\rtree.c	/^typedef sqlite3_int64 i64;$/;"	t	file:
i64	.\sqliteInt.h	/^typedef sqlite_int64 i64;          \/* 8-byte signed integer *\/$/;"	t
i8	.\sqliteInt.h	/^typedef INT8_TYPE i8;              \/* 1-byte signed integer *\/$/;"	t
iAddr	.\vdbeaux.c	/^  int iAddr;                 \/* Address of next instruction to return *\/$/;"	m	struct:VdbeOpIter	file:
iAgg	.\sqliteInt.h	/^  i16 iAgg;              \/* Which entry in pAggInfo->aCol[] or ->aFunc[] *\/$/;"	m	struct:Expr
iAlias	.\sqliteInt.h	/^    u16 iAlias;            \/* Index into Parse.aAlias[] for zName *\/$/;"	m	struct:ExprList::ExprList_item
iBatch	.\rowset.c	/^  u8 iBatch;                     \/* Current insert batch *\/$/;"	m	struct:RowSet	file:
iBreak	.\sqliteInt.h	/^  int iBreak;                    \/* Jump here to break out of the loop *\/$/;"	m	struct:WhereInfo
iCacheCnt	.\sqliteInt.h	/^  int iCacheCnt;       \/* Counter used to generate aColCache[].lru values *\/$/;"	m	struct:Parse
iCacheLevel	.\sqliteInt.h	/^  int iCacheLevel;     \/* ColCache valid when aColCache[].iLevel<=iCacheLevel *\/$/;"	m	struct:Parse
iCallback	.\wal.c	/^  u32 iCallback;             \/* Value to pass to log callback (or 0) *\/$/;"	m	struct:Wal	file:
iCell	.\rtree.c	/^  int iCell;                        \/* Index of current cell in pNode *\/$/;"	m	struct:RtreeCursor	file:
iChange	.\wal.c	/^  u32 iChange;                    \/* Counter incremented each transaction *\/$/;"	m	struct:WalIndexHdr	file:
iCol	.\fts3Int.h	/^  int iCol;$/;"	m	struct:Fts3SegFilter
iCol	.\fts3_snippet.c	/^  int iCol;                       \/* Column of table to populate aTerm for *\/$/;"	m	struct:TermOffsetCtx	file:
iCol	.\fts3_snippet.c	/^  int iCol;                       \/* Column snippet is extracted from *\/$/;"	m	struct:SnippetFragment	file:
iCol	.\fts3_snippet.c	/^  int iCol;                       \/* Extract snippet from this column *\/$/;"	m	struct:SnippetIter	file:
iCol	.\sqliteInt.h	/^    u16 iCol;              \/* For ORDER BY, column number in result set *\/$/;"	m	struct:ExprList::ExprList_item
iColCache	.\sqliteInt.h	/^  u8 iColCache;        \/* Next entry of the cache to replace *\/$/;"	m	struct:Parse
iColumn	.\fts3Int.h	/^  int iColumn;               \/* Index of column this phrase must match *\/$/;"	m	struct:Fts3Phrase
iColumn	.\sqlite3.h	/^     int iColumn;              \/* Column number *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby
iColumn	.\sqlite3.h	/^     int iColumn;              \/* Column on left-hand side of constraint *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint
iColumn	.\sqliteInt.h	/^    int iColumn;             \/* Column number within the source table *\/$/;"	m	struct:AggInfo::AggInfo_col
iColumn	.\sqliteInt.h	/^    int iColumn;          \/* Table column number *\/$/;"	m	struct:Parse::yColCache
iColumn	.\sqliteInt.h	/^  ynVar iColumn;         \/* TK_COLUMN: column index.  -1 for rowid.$/;"	m	struct:Expr
iContinue	.\sqliteInt.h	/^  int iContinue;                 \/* Jump here to continue with next record *\/$/;"	m	struct:WhereInfo
iCoord	.\rtree.c	/^  int iCoord;                       \/* Index of constrained coordinate *\/$/;"	m	struct:RtreeConstraint	file:
iCur	.\sqliteInt.h	/^        int iCur;              \/* The VDBE cursor used by this IN operator *\/$/;"	m	struct:WhereLevel::__anon14::__anon15::InLoop
iCurrent	.\fts3Int.h	/^  sqlite3_int64 iCurrent;$/;"	m	struct:Fts3Expr
iCurrent	.\fts3_snippet.c	/^  int iCurrent;                   \/* First token of current snippet *\/$/;"	m	struct:SnippetIter	file:
iCursor	.\sqliteInt.h	/^    int iCursor;      \/* The VDBE cursor number used to access this table *\/$/;"	m	struct:SrcList::SrcList_item
iDb	.\build.c	/^  int iDb;             \/* The database containing the table to be locked *\/$/;"	m	struct:TableLock	file:
iDb	.\sqliteInt.h	/^    int iDb;                    \/* When back is being initialized *\/$/;"	m	struct:sqlite3::sqlite3InitInfo
iDb	.\sqliteInt.h	/^  int iDb;              \/* Index in sqlite3.aDb[] of database holding pTab *\/$/;"	m	struct:AutoincInfo
iDb	.\sqliteInt.h	/^  int iDb;            \/* 0 for main database.  1 for TEMP, 2.. for ATTACHed *\/$/;"	m	struct:__anon16
iDb	.\vdbeInt.h	/^  int iDb;              \/* Index of cursor database in db->aDb[] (or -1) *\/$/;"	m	struct:VdbeCursor
iDefaultCol	.\fts3_expr.c	/^  int iDefaultCol;                    \/* Default column to query *\/$/;"	m	struct:ParseContext	file:
iDepth	.\rtree.c	/^  int iDepth;                 \/* Current depth of the r-tree structure *\/$/;"	m	struct:Rtree	file:
iDestSchema	.\backup.c	/^  u32 iDestSchema;         \/* Original schema cookie in destination *\/$/;"	m	struct:sqlite3_backup	file:
iDistinct	.\sqliteInt.h	/^    int iDistinct;           \/* Ephemeral table used to enforce DISTINCT *\/$/;"	m	struct:AggInfo::AggInfo_func
iDivisor	.\bitvec.c	/^  u32 iDivisor;   \/* Number of bits handled by each apSub[] entry. *\/$/;"	m	struct:Bitvec	file:
iDocid	.\fts3_snippet.c	/^  sqlite3_int64 iDocid;$/;"	m	struct:TermOffsetCtx	file:
iDocid	.\fts3_write.c	/^  sqlite3_int64 iDocid;$/;"	m	struct:Fts3SegReader	file:
iECursor	.\sqliteInt.h	/^  int iECursor;          \/* VDBE Cursor associated with this ExprList *\/$/;"	m	struct:ExprList
iEndBlock	.\fts3_write.c	/^  sqlite3_int64 iEndBlock;$/;"	m	struct:Fts3SegReader	file:
iFirst	.\fts3_write.c	/^  sqlite3_int64 iFirst;           \/* First slot in %_segments written *\/$/;"	m	struct:SegmentWriter	file:
iForeGuard	.\mem2.c	/^  int iForeGuard;                     \/* Guard word for sanity *\/$/;"	m	struct:MemBlockHdr	file:
iFree	.\fts3_write.c	/^  sqlite3_int64 iFree;            \/* Next free slot in %_segments *\/$/;"	m	struct:SegmentWriter	file:
iFrom	.\sqliteInt.h	/^    int iFrom;         \/* Index of column in pFrom *\/$/;"	m	struct:FKey::sColMap
iFrom	.\sqliteInt.h	/^  u8 iFrom;             \/* Which entry in the FROM clause *\/$/;"	m	struct:WhereLevel
iHdrOffset	.\pager.c	/^  i64 iHdrOffset;              \/* See above *\/$/;"	m	struct:PagerSavepoint	file:
iHead	.\fts3_snippet.c	/^  int iHead;                      \/* Next value in position list *\/$/;"	m	struct:SnippetPhrase	file:
iIdx	.\fts3_write.c	/^  int iIdx;                       \/* Index within level, or 0x7FFFFFFF for PT *\/$/;"	m	struct:Fts3SegReader	file:
iIdxCur	.\sqliteInt.h	/^  int iIdxCur;          \/* The VDBE cursor used to access pIdx *\/$/;"	m	struct:WhereLevel
iJD	.\date.c	/^  sqlite3_int64 iJD; \/* The julian day number times 86400000 *\/$/;"	m	struct:DateTime	file:
iKey	.\pcache1.c	/^  unsigned int iKey;             \/* Key value (page number) *\/$/;"	m	struct:PgHdr1	file:
iLastCol	.\fts3_write.c	/^  sqlite3_int64 iLastCol;$/;"	m	struct:PendingList	file:
iLastDocid	.\fts3_write.c	/^  sqlite3_int64 iLastDocid;$/;"	m	struct:PendingList	file:
iLastPos	.\fts3_write.c	/^  sqlite3_int64 iLastPos;$/;"	m	struct:PendingList	file:
iLeftJoin	.\sqliteInt.h	/^  int iLeftJoin;        \/* Memory cell used to implement LEFT OUTER JOIN *\/$/;"	m	struct:WhereLevel
iLevel	.\sqliteInt.h	/^    int iLevel;           \/* Nesting level *\/$/;"	m	struct:Parse::yColCache
iLimit	.\sqliteInt.h	/^  int iLimit, iOffset;   \/* Memory registers holding LIMIT & OFFSET counters *\/$/;"	m	struct:Select
iMaster	.\mem3.c	/^  u32 iMaster;$/;"	m	struct:Mem3Global	file:
iMaxKey	.\pcache1.c	/^  unsigned int iMaxKey;               \/* Largest key seen since xTruncate() *\/$/;"	m	struct:PCache1	file:
iMem	.\sqliteInt.h	/^    int iMem;                \/* Memory location that acts as accumulator *\/$/;"	m	struct:AggInfo::AggInfo_col
iMem	.\sqliteInt.h	/^    int iMem;                \/* Memory location that acts as accumulator *\/$/;"	m	struct:AggInfo::AggInfo_func
iMem	.\sqliteInt.h	/^  int iMem;         \/* Base register where results are written *\/$/;"	m	struct:SelectDest
iNext	.\backup.c	/^  Pgno iNext;              \/* Page number of the next source page to copy *\/$/;"	m	struct:sqlite3_backup	file:
iNext	.\wal.c	/^    int iNext;                    \/* Next slot in aIndex[] not yet returned *\/$/;"	m	struct:WalIterator::WalSegment	file:
iNode	.\rtree.c	/^  i64 iNode;$/;"	m	struct:RtreeNode	file:
iNodeSize	.\rtree.c	/^  int iNodeSize;              \/* Size in bytes of each node in the node table *\/$/;"	m	struct:Rtree	file:
iOff	.\fts3_snippet.c	/^  int iOff;                       \/* Offset of this term from read positions *\/$/;"	m	struct:TermOffset	file:
iOffset	.\fts3_porter.c	/^  int iOffset;                 \/* current position in zInput *\/$/;"	m	struct:porter_tokenizer_cursor	file:
iOffset	.\fts3_tokenizer1.c	/^  int iOffset;                 \/* current position in pInput *\/$/;"	m	struct:simple_tokenizer_cursor	file:
iOffset	.\memjournal.c	/^  sqlite3_int64 iOffset;          \/* Offset from the beginning of the file *\/$/;"	m	struct:FilePoint	file:
iOffset	.\pager.c	/^  i64 iOffset;                 \/* Starting offset in main journal *\/$/;"	m	struct:PagerSavepoint	file:
iOffset	.\sqliteInt.h	/^  int iLimit, iOffset;   \/* Memory registers holding LIMIT & OFFSET counters *\/$/;"	m	struct:Select
iOffset	.\vdbeblob.c	/^  int iOffset;            \/* Byte offset of blob in cursor data *\/$/;"	m	struct:Incrblob	file:
iOverflow	.\btreeInt.h	/^  u16 iOverflow; \/* Offset to overflow page number.  Zero if no overflow *\/$/;"	m	struct:CellInfo
iPKey	.\sqliteInt.h	/^  int iPKey;           \/* If not negative, use aCol[iPKey] as the primary key *\/$/;"	m	struct:Table
iPage	.\btreeInt.h	/^  i16 iPage;                            \/* Index of current page in apPage *\/$/;"	m	struct:BtCursor
iParent	.\where.c	/^  int iParent;            \/* Disable pWC->a[iParent] when this term disabled *\/$/;"	m	struct:WhereTerm	file:
iParm	.\sqliteInt.h	/^  int iParm;        \/* A parameter used by the eDest disposal method *\/$/;"	m	struct:SelectDest
iPos	.\fts3_snippet.c	/^  int iPos;                       \/* Index of first token in snippet *\/$/;"	m	struct:SnippetFragment	file:
iPos	.\fts3_snippet.c	/^  int iPos;                       \/* Position just read from pList *\/$/;"	m	struct:TermOffset	file:
iPrefEnc	.\sqliteInt.h	/^  u8 iPrefEnc;         \/* Preferred text encoding (SQLITE_UTF8, 16LE, 16BE) *\/$/;"	m	struct:FuncDef
iPrevDocid	.\fts3Int.h	/^  sqlite_int64 iPrevDocid;$/;"	m	struct:Fts3Table
iPrevId	.\fts3Int.h	/^  sqlite3_int64 iPrevId;          \/* Previous id read from aDoclist *\/$/;"	m	struct:Fts3Cursor
iPrior	.\wal.c	/^  int iPrior;                     \/* Last result returned from the iterator *\/$/;"	m	struct:WalIterator	file:
iRangeReg	.\sqliteInt.h	/^  int iRangeReg;       \/* First register in temporary register block *\/$/;"	m	struct:Parse
iReg	.\sqliteInt.h	/^    int iReg;             \/* Reg with value of this column. 0 means none. *\/$/;"	m	struct:Parse::yColCache
iReinsertHeight	.\rtree.c	/^  int iReinsertHeight;        \/* Height of sub-trees Reinsert() has run on *\/$/;"	m	struct:Rtree	file:
iRightJoinTable	.\sqliteInt.h	/^  i16 iRightJoinTable;   \/* If EP_FromJoin, the right table of the join *\/$/;"	m	struct:Expr
iRowid	.\rtree.c	/^  i64 iRowid;$/;"	m	struct:RtreeCell	file:
iSeek	.\tclsqlite.c	/^  int iSeek;                \/* Current seek offset *\/$/;"	m	struct:IncrblobChannel	file:
iSize	.\bitvec.c	/^  u32 iSize;      \/* Maximum bit index.  Max iSize is 4,294,967,296. *\/$/;"	m	struct:Bitvec	file:
iSize	.\journal.c	/^  int iSize;                      \/* Amount of zBuf[] currently used *\/$/;"	m	struct:JournalFile	file:
iSize	.\mem2.c	/^  i64 iSize;                          \/* Size of this allocation *\/$/;"	m	struct:MemBlockHdr	file:
iSorterColumn	.\sqliteInt.h	/^    int iSorterColumn;       \/* Column number in the sorting index *\/$/;"	m	struct:AggInfo::AggInfo_col
iStartBlock	.\fts3_write.c	/^  sqlite3_int64 iStartBlock;$/;"	m	struct:Fts3SegReader	file:
iStatement	.\vdbeInt.h	/^  int iStatement;         \/* Statement number (or 0 if has not opened stmt) *\/$/;"	m	struct:Vdbe
iStrategy	.\rtree.c	/^  int iStrategy;                    \/* Copy of idxNum search parameter *\/$/;"	m	struct:RtreeCursor	file:
iSub	.\vdbeaux.c	/^  int iSub;                  \/* 0 = main program, 1 = first sub-program etc. *\/$/;"	m	struct:VdbeOpIter	file:
iSubRec	.\pager.c	/^  Pgno iSubRec;                \/* Index of first record in sub-journal *\/$/;"	m	struct:PagerSavepoint	file:
iSum	.\func.c	/^  i64 iSum;         \/* Integer sum *\/   $/;"	m	struct:SumCtx	file:
iTab	.\build.c	/^  int iTab;            \/* The root page of the table to be locked *\/$/;"	m	struct:TableLock	file:
iTabCur	.\sqliteInt.h	/^  int iTabCur;          \/* The VDBE cursor used to access the table *\/$/;"	m	struct:WhereLevel
iTable	.\btreeInt.h	/^  Pgno iTable;          \/* Root page of table *\/$/;"	m	struct:BtLock
iTable	.\sqliteInt.h	/^    int iTable;              \/* Cursor number of the source table *\/$/;"	m	struct:AggInfo::AggInfo_col
iTable	.\sqliteInt.h	/^    int iTable;           \/* Table cursor number *\/$/;"	m	struct:Parse::yColCache
iTable	.\sqliteInt.h	/^  int iTable;            \/* TK_COLUMN: cursor number of table holding column$/;"	m	struct:Expr
iTail	.\fts3_snippet.c	/^  int iTail;                      \/* Next value in trailing position list *\/$/;"	m	struct:SnippetPhrase	file:
iTerm	.\fts3_snippet.c	/^  int iTerm;$/;"	m	struct:TermOffsetCtx	file:
iTermOffset	.\sqlite3.h	/^     int iTermOffset;          \/* Used internally - xBestIndex should ignore *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint
iToken	.\fts3_icu.c	/^  int iToken;$/;"	m	struct:IcuCursor	file:
iToken	.\fts3_porter.c	/^  int iToken;                  \/* index of next token to be returned *\/$/;"	m	struct:porter_tokenizer_cursor	file:
iToken	.\fts3_tokenizer1.c	/^  int iToken;                  \/* index of next token to be returned *\/$/;"	m	struct:simple_tokenizer_cursor	file:
iTop	.\sqliteInt.h	/^  int iTop;                      \/* The very beginning of the WHERE loop *\/$/;"	m	struct:WhereInfo
iValue	.\sqliteInt.h	/^    int iValue;            \/* Integer value if EP_IntValue *\/$/;"	m	union:Expr::__anon11
iVersion	.\fts3_tokenizer.h	/^  int iVersion;$/;"	m	struct:sqlite3_tokenizer_module
iVersion	.\sqlite3.h	/^  int iVersion;            \/* Structure version number (currently 2) *\/$/;"	m	struct:sqlite3_vfs
iVersion	.\sqlite3.h	/^  int iVersion;$/;"	m	struct:sqlite3_io_methods
iVersion	.\sqlite3.h	/^  int iVersion;$/;"	m	struct:sqlite3_module
iVersion	.\wal.c	/^  u32 iVersion;                   \/* Wal-index version *\/$/;"	m	struct:WalIndexHdr	file:
iZero	.\wal.c	/^    int iZero;                    \/* Frame number associated with aPgno[0] *\/$/;"	m	struct:WalIterator::WalSegment	file:
icuClose	.\fts3_icu.c	/^static int icuClose(sqlite3_tokenizer_cursor *pCursor){$/;"	f	file:
icuCreate	.\fts3_icu.c	/^static int icuCreate($/;"	f	file:
icuDestroy	.\fts3_icu.c	/^static int icuDestroy(sqlite3_tokenizer *pTokenizer){$/;"	f	file:
icuNext	.\fts3_icu.c	/^static int icuNext($/;"	f	file:
icuOpen	.\fts3_icu.c	/^static int icuOpen($/;"	f	file:
icuTokenizerModule	.\fts3_icu.c	/^static const sqlite3_tokenizer_module icuTokenizerModule = {$/;"	v	file:
id	.\mutex_noop.c	/^  int id;     \/* The mutex type *\/$/;"	m	struct:sqlite3_debug_mutex	file:
id	.\mutex_os2.c	/^  int  id;          \/* Mutex type *\/$/;"	m	struct:sqlite3_mutex	file:
id	.\mutex_unix.c	/^  int id;                    \/* Mutex type *\/$/;"	m	struct:sqlite3_mutex	file:
id	.\mutex_w32.c	/^  int id;                    \/* Mutex type *\/$/;"	m	struct:sqlite3_mutex	file:
id	.\os_unix.c	/^  u8 id;                     \/* Id of this connection within its unixShmNode *\/$/;"	m	struct:unixShm	file:
id	.\os_win.c	/^  u8 id;                     \/* Id of this connection with its winShmNode *\/$/;"	m	struct:winShm	file:
identLength	.\build.c	/^static int identLength(const char *z){$/;"	f	file:
identPut	.\build.c	/^static void identPut(char *z, int *pIdx, char *zSignedIdent){$/;"	f	file:
idx	.\btreeInt.h	/^    u16 idx;            \/* Insert this cell before idx-th non-overflow cell *\/$/;"	m	struct:MemPage::_OvflCell
idx	.\sqliteInt.h	/^    int idx;          \/* Index in some Table.aCol[] of a column named zName *\/$/;"	m	struct:IdList::IdList_item
idxHash	.\sqliteInt.h	/^  Hash idxHash;        \/* All (named) indices indexed by name *\/$/;"	m	struct:Schema
idxNum	.\sqlite3.h	/^  int idxNum;                \/* Number used to identify the index *\/$/;"	m	struct:sqlite3_index_info
idxStr	.\sqlite3.h	/^  char *idxStr;              \/* String, possibly obtained from sqlite3_malloc *\/$/;"	m	struct:sqlite3_index_info
ifnullFunc	.\func.c	391;"	d	file:
importVtabErrMsg	.\vdbe.c	/^static void importVtabErrMsg(Vdbe *p, sqlite3_vtab *pVtab){$/;"	f	file:
in	.\sqliteInt.h	/^    } in;                 \/* Used when plan.wsFlags&WHERE_IN_ABLE *\/$/;"	m	union:WhereLevel::__anon14	typeref:struct:WhereLevel::__anon14::__anon15
in	.\tclsqlite.c	/^  unsigned char in[64];$/;"	m	struct:MD5Context	file:
inNormalWrite	.\os_unix.c	/^  unsigned char inNormalWrite;   \/* True if in a normal write operation *\/$/;"	m	struct:unixFile	file:
inProgress	.\sqliteInt.h	/^  int inProgress;                   \/* True while initialization in progress *\/$/;"	m	struct:Sqlite3Config
inTrans	.\btreeInt.h	/^  u8 inTrans;        \/* TRANS_NONE, TRANS_READ or TRANS_WRITE *\/$/;"	m	struct:Btree
inTrans	.\sqliteInt.h	/^  u8 inTrans;          \/* 0: not writable.  1: Transaction.  2: Checkpoint *\/$/;"	m	struct:Db
inTransaction	.\btreeInt.h	/^  u8 inTransaction;     \/* Transaction state *\/$/;"	m	struct:BtShared
inVtabMethod	.\vdbeInt.h	/^  u8 inVtabMethod;        \/* See comments above *\/$/;"	m	struct:Vdbe
incrVacuum	.\btreeInt.h	/^  u8 incrVacuum;        \/* True if incr-vacuum is enabled *\/$/;"	m	struct:BtShared
incrVacuumStep	.\btree.c	/^static int incrVacuumStep(BtShared *pBt, Pgno nFin, Pgno iLastPg){$/;"	f	file:
incrblobClose	.\tclsqlite.c	/^static int incrblobClose(ClientData instanceData, Tcl_Interp *interp){$/;"	f	file:
incrblobHandle	.\tclsqlite.c	/^static int incrblobHandle(ClientData instanceData, int dir, ClientData *hPtr){$/;"	f	file:
incrblobInput	.\tclsqlite.c	/^static int incrblobInput($/;"	f	file:
incrblobOutput	.\tclsqlite.c	/^static int incrblobOutput($/;"	f	file:
incrblobSeek	.\tclsqlite.c	/^static int incrblobSeek($/;"	f	file:
incrblobWatch	.\tclsqlite.c	/^static void incrblobWatch(ClientData instanceData, int mode){ $/;"	f	file:
indexable	.\where.c	/^  Bitmask indexable;       \/* Bitmask of all indexable tables in the clause *\/$/;"	m	struct:WhereOrInfo	file:
info	.\btreeInt.h	/^  CellInfo info;            \/* A parse of the cell we are pointing at *\/$/;"	m	struct:BtCursor
init	.\sqliteInt.h	/^  } init;$/;"	m	struct:sqlite3	typeref:struct:sqlite3::sqlite3InitInfo
initMaskSet	.\where.c	387;"	d	file:
initUconvObjects	.\os_os2.c	/^static void initUconvObjects( void ){$/;"	f	file:
init_all	.\tclsqlite.c	/^static void init_all(Tcl_Interp *interp){$/;"	f	file:
init_all_cmd	.\tclsqlite.c	/^static int init_all_cmd($/;"	f	file:
initiallyEmpty	.\btreeInt.h	/^  u8 initiallyEmpty;    \/* Database is empty at start of transaction *\/$/;"	m	struct:BtShared
ino	.\os_unix.c	/^  ino_t ino;                  \/* Inode number *\/$/;"	m	struct:unixFileId	file:
inodeList	.\os_unix.c	/^static unixInodeInfo *inodeList = 0;$/;"	v	file:
insertBinaryOperator	.\fts3_expr.c	/^static void insertBinaryOperator($/;"	f	file:
insertCell	.\btree.c	/^static void insertCell($/;"	f	file:
insertElement	.\hash.c	/^static void insertElement($/;"	f	file:
intKey	.\btreeInt.h	/^  u8 intKey;           \/* True if intkey flag is set *\/$/;"	m	struct:MemPage
intTestFunc	.\fts3_tokenizer.c	/^static void intTestFunc($/;"	f	file:
interp	.\tclsqlite.c	/^  Tcl_Interp *interp;        \/* The interpreter used for this database *\/$/;"	m	struct:SqliteDb	file:
interp	.\tclsqlite.c	/^  Tcl_Interp *interp;   \/* The TCL interpret to execute the function *\/$/;"	m	struct:SqlCollate	file:
interp	.\tclsqlite.c	/^  Tcl_Interp *interp;   \/* The TCL interpret to execute the function *\/$/;"	m	struct:SqlFunc	file:
interrupt_handler	.\shell.c	/^static void interrupt_handler(int NotUsed){$/;"	f	file:
interruptx	.\sqlite3ext.h	/^  void  (*interruptx)(sqlite3*);$/;"	m	struct:sqlite3_api_routines
invalidateAllOverflowCache	.\btree.c	/^static void invalidateAllOverflowCache(BtShared *pBt){$/;"	f	file:
invalidateAllOverflowCache	.\btree.c	486;"	d	file:
invalidateCursorsOnModifiedBtrees	.\vdbeaux.c	/^static void invalidateCursorsOnModifiedBtrees(sqlite3 *db){$/;"	f	file:
invalidateIncrblobCursors	.\btree.c	/^static void invalidateIncrblobCursors($/;"	f	file:
invalidateIncrblobCursors	.\btree.c	487;"	d	file:
invalidateOverflowCache	.\btree.c	/^static void invalidateOverflowCache(BtCursor *pCur){$/;"	f	file:
invalidateOverflowCache	.\btree.c	485;"	d	file:
invalidateTempStorage	.\pragma.c	/^static int invalidateTempStorage(Parse *pParse){$/;"	f	file:
iotrace	.\shell.c	/^static FILE *iotrace = 0;$/;"	v	file:
iotracePrintf	.\shell.c	/^static void iotracePrintf(const char *zFormat, ...){$/;"	f	file:
isAppropriateForFactoring	.\expr.c	/^static int isAppropriateForFactoring(Expr *p){$/;"	f	file:
isAttached	.\backup.c	/^  int isAttached;          \/* True once backup has been registered with pager *\/$/;"	m	struct:sqlite3_backup	file:
isCandidateForInOpt	.\expr.c	/^static int isCandidateForInOpt(Select *p){$/;"	f	file:
isCheck	.\sqliteInt.h	/^  u8 isCheck;          \/* True if resolving names in a CHECK constraint *\/$/;"	m	struct:NameContext
isConsonant	.\fts3_porter.c	/^static int isConsonant(const char *z){$/;"	f	file:
isDate	.\date.c	/^static int isDate($/;"	f	file:
isDeferred	.\sqliteInt.h	/^  u8 isDeferred;    \/* True if constraint checking is deferred till COMMIT *\/$/;"	m	struct:FKey
isDelete	.\os_unix.c	/^  int isDelete;                       \/* Delete on close if true *\/$/;"	m	struct:unixFile	file:
isDelim	.\fts3_porter.c	573;"	d	file:
isDirty	.\rtree.c	/^  int isDirty;$/;"	m	struct:RtreeNode	file:
isEof	.\fts3Int.h	/^  u8 isEof;                       \/* True if at End Of Results *\/$/;"	m	struct:Fts3Cursor
isError	.\vdbeInt.h	/^  int isError;          \/* Error code returned by the function. *\/$/;"	m	struct:sqlite3_context
isExclusive	.\btreeInt.h	/^  u8 isExclusive;       \/* True if pWriter has an EXCLUSIVE lock on the db *\/$/;"	m	struct:BtShared
isFatalError	.\backup.c	/^static int isFatalError(int rc){$/;"	f	file:
isHidden	.\sqliteInt.h	/^  u8 isHidden;     \/* True if this column is 'hidden' *\/$/;"	m	struct:Column
isIncrblobHandle	.\btreeInt.h	/^  u8 isIncrblobHandle;      \/* True if this cursor is an incr. io handle *\/$/;"	m	struct:BtCursor
isIndex	.\vdbeInt.h	/^  Bool isIndex;         \/* True if an index containing keys only - no data *\/$/;"	m	struct:VdbeCursor
isInit	.\btreeInt.h	/^  u8 isInit;           \/* True if previously initialized. MUST BE FIRST! *\/$/;"	m	struct:MemPage
isInit	.\pcache1.c	/^  int isInit;                         \/* True if initialized *\/$/;"	m	struct:PCacheGlobal	file:
isInit	.\random.c	/^  unsigned char isInit;          \/* True if initialized *\/$/;"	m	struct:sqlite3PrngType	file:
isInit	.\sqliteInt.h	/^  int isInit;                       \/* True after initialization has finished *\/$/;"	m	struct:Sqlite3Config
isInit	.\tclsqlite.c	/^  int isInit;$/;"	m	struct:MD5Context	file:
isInit	.\wal.c	/^  u8 isInit;                      \/* 1 when initialized *\/$/;"	m	struct:WalIndexHdr	file:
isInterrupted	.\sqliteInt.h	/^    volatile int isInterrupted; \/* True if sqlite3_interrupt has been called *\/$/;"	m	union:sqlite3::__anon9
isLikeOrGlob	.\where.c	/^static int isLikeOrGlob($/;"	f	file:
isLoaded	.\fts3Int.h	/^  int isLoaded;              \/* True if aDoclist\/nDoclist are initialized. *\/$/;"	m	struct:Fts3Expr
isLookaside	.\malloc.c	/^static int isLookaside(sqlite3 *db, void *p){$/;"	f	file:
isLookaside	.\malloc.c	417;"	d	file:
isMallocInit	.\sqliteInt.h	/^  int isMallocInit;                 \/* True after malloc is initialized *\/$/;"	m	struct:Sqlite3Config
isMatchOfColumn	.\where.c	/^static int isMatchOfColumn($/;"	f	file:
isMatchinfoNeeded	.\fts3Int.h	/^  int isMatchinfoNeeded;          \/* True when aMatchinfo[] needs filling in *\/$/;"	m	struct:Fts3Cursor
isMultiWrite	.\sqliteInt.h	/^  u8 isMultiWrite;     \/* True if statement may affect\/insert multiple rows *\/$/;"	m	struct:Parse
isMutexInit	.\sqliteInt.h	/^  int isMutexInit;                  \/* True after mutexes are initialized *\/$/;"	m	struct:Sqlite3Config
isNT	.\os_win.c	/^  static int isNT(void){$/;"	f	file:
isNT	.\os_win.c	159;"	d	file:
isNot	.\fts3Int.h	/^  int isNot;                 \/* Phrase prefixed by unary not (-) operator *\/$/;"	m	struct:Fts3Phrase
isNumber	.\shell.c	/^static int isNumber(const char *z, int *realnum){$/;"	f	file:
isOpen	.\pager.c	775;"	d	file:
isPCacheInit	.\sqliteInt.h	/^  int isPCacheInit;                 \/* True after malloc is initialized *\/$/;"	m	struct:Sqlite3Config
isPending	.\btreeInt.h	/^  u8 isPending;         \/* If waiting for read-locks to clear *\/$/;"	m	struct:BtShared
isPopulated	.\sqliteInt.h	/^    u8 isPopulated;   \/* Temporary table associated with SELECT is populated *\/$/;"	m	struct:SrcList::SrcList_item
isPrefix	.\fts3Int.h	/^    int isPrefix;            \/* True if token ends in with a "*" character *\/$/;"	m	struct:Fts3Phrase::PhraseToken
isPrepareV2	.\vdbeInt.h	/^  u8 isPrepareV2;         \/* True if prepared with prepare_v2() *\/$/;"	m	struct:Vdbe
isPrimKey	.\sqliteInt.h	/^  u8 isPrimKey;    \/* True if this column is part of the PRIMARY KEY *\/$/;"	m	struct:Column
isReqPos	.\fts3.c	/^  int isReqPos;$/;"	m	struct:TermSelect	file:
isRequireSeek	.\fts3Int.h	/^  u8 isRequireSeek;               \/* True if must seek pStmt to %_content row *\/$/;"	m	struct:Fts3Cursor
isSimpleCount	.\select.c	/^static Table *isSimpleCount(Select *p, AggInfo *pAggInfo){$/;"	f	file:
isSorted	.\rowset.c	/^  u8 isSorted;                   \/* True if pEntry is sorted *\/$/;"	m	struct:RowSet	file:
isSortingIndex	.\where.c	/^static int isSortingIndex($/;"	f	file:
isTable	.\vdbeInt.h	/^  Bool isTable;         \/* True if a table requiring integer keys *\/$/;"	m	struct:VdbeCursor
isTransactionSavepoint	.\sqliteInt.h	/^  u8 isTransactionSavepoint;    \/* True if the outermost savepoint is a TS *\/$/;"	m	struct:sqlite3
isView	.\delete.c	265;"	d	file:
isView	.\delete.c	266;"	d	file:
isView	.\delete.c	444;"	d	file:
isView	.\insert.c	1052;"	d	file:
isView	.\insert.c	513;"	d	file:
isView	.\insert.c	514;"	d	file:
isView	.\update.c	159;"	d	file:
isView	.\update.c	160;"	d	file:
isView	.\update.c	569;"	d	file:
isVowel	.\fts3_porter.c	/^static int isVowel(const char *z){$/;"	f	file:
isWriteLock	.\build.c	/^  u8 isWriteLock;      \/* True for write lock.  False for a read lock *\/$/;"	m	struct:TableLock	file:
isatty	.\shell.c	54;"	d	file:
isatty	.\shell.c	67;"	d	file:
ix	.\where.c	/^  int ix[BMS];                  \/* Cursor assigned to each bit *\/$/;"	m	struct:WhereMaskSet	file:
j	.\random.c	/^  unsigned char i, j;            \/* State variables *\/$/;"	m	struct:sqlite3PrngType	file:
jfd	.\pager.c	/^  sqlite3_file *jfd;          \/* File descriptor for main journal *\/$/;"	m	struct:Pager	file:
jointype	.\sqliteInt.h	/^    u8 jointype;      \/* Type of join between this able and the previous *\/$/;"	m	struct:SrcList::SrcList_item
journalHdr	.\pager.c	/^  i64 journalHdr;             \/* Byte offset to previous journal header *\/$/;"	m	struct:Pager	file:
journalHdrOffset	.\pager.c	/^static i64 journalHdrOffset(Pager *pPager){$/;"	f	file:
journalMode	.\pager.c	/^  u8 journalMode;             \/* One of the PAGER_JOURNALMODE_* values *\/$/;"	m	struct:Pager	file:
journalOff	.\pager.c	/^  i64 journalOff;             \/* Current write offset in the journal file *\/$/;"	m	struct:Pager	file:
journalSizeLimit	.\pager.c	/^  i64 journalSizeLimit;       \/* Size limit for persistent journal files *\/$/;"	m	struct:Pager	file:
jrnlBufferSize	.\pager.c	/^static int jrnlBufferSize(Pager *pPager){$/;"	f	file:
jrnlClose	.\journal.c	/^static int jrnlClose(sqlite3_file *pJfd){$/;"	f	file:
jrnlFileSize	.\journal.c	/^static int jrnlFileSize(sqlite3_file *pJfd, sqlite_int64 *pSize){$/;"	f	file:
jrnlRead	.\journal.c	/^static int jrnlRead($/;"	f	file:
jrnlSync	.\journal.c	/^static int jrnlSync(sqlite3_file *pJfd, int flags){$/;"	f	file:
jrnlTruncate	.\journal.c	/^static int jrnlTruncate(sqlite3_file *pJfd, sqlite_int64 size){$/;"	f	file:
jrnlWrite	.\journal.c	/^static int jrnlWrite($/;"	f	file:
juliandayFunc	.\date.c	/^static void juliandayFunc($/;"	f	file:
key	.\parse.c	/^struct AttachKey { int type;  Token key; };$/;"	m	struct:AttachKey	file:
keyClass	.\fts3_hash.h	/^  char keyClass;          \/* HASH_INT, _POINTER, _STRING, _BINARY *\/$/;"	m	struct:Fts3Hash
keyConf	.\sqliteInt.h	/^  u8 keyConf;          \/* What to do in case of uniqueness conflict on iPKey *\/$/;"	m	struct:Table
keyInfoFromExprList	.\select.c	/^static KeyInfo *keyInfoFromExprList(Parse *pParse, ExprList *pList){$/;"	f	file:
keywordCode	.\keywordhash.h	/^static int keywordCode(const char *z, int n){$/;"	f
lastErrno	.\os_unix.c	/^  int lastErrno;                      \/* The unix errno from last I\/O error *\/$/;"	m	struct:unixFile	file:
lastErrno	.\os_win.c	/^  DWORD lastErrno;           \/* The Windows errno from the last I\/O error *\/$/;"	m	struct:winShmNode	file:
lastErrno	.\os_win.c	/^  DWORD lastErrno;        \/* The Windows errno from the last I\/O error *\/$/;"	m	struct:winFile	file:
lastRowid	.\sqliteInt.h	/^  i64 lastRowid;                \/* ROWID of most recent insert (see above) *\/$/;"	m	struct:sqlite3
lastRowid	.\vdbeInt.h	/^  i64 lastRowid;          \/* Last insert rowid (sqlite3.lastRowid) *\/$/;"	m	struct:VdbeFrame
lastRowid	.\vdbeInt.h	/^  i64 lastRowid;        \/* Last rowid from a Next or NextIdx operation *\/$/;"	m	struct:VdbeCursor
last_insert_rowid	.\func.c	/^static void last_insert_rowid($/;"	f	file:
last_insert_rowid	.\sqlite3ext.h	/^  sqlite_int64  (*last_insert_rowid)(sqlite3*);$/;"	m	struct:sqlite3_api_routines
leaf	.\btreeInt.h	/^  u8 leaf;             \/* True if leaf flag is set *\/$/;"	m	struct:MemPage
leaveMutex	.\notify.c	/^static void leaveMutex(void){$/;"	f	file:
leftColumn	.\where.c	/^    int leftColumn;         \/* Column number of X in "X <op> <expr>" *\/$/;"	m	union:WhereTerm::__anon20	file:
leftCursor	.\where.c	/^  int leftCursor;         \/* Cursor number of X in "X <op> <expr>" *\/$/;"	m	struct:WhereTerm	file:
length	.\os_unix.c	/^  unsigned long long length;        \/* nbr of bytes to lock *\/$/;"	m	struct:ByteRangeLockPB2	file:
lengthFunc	.\func.c	/^static void lengthFunc($/;"	f	file:
lhs	.\parse.c	/^  YYCODETYPE lhs;         \/* Symbol on the left-hand side of the rule *\/$/;"	m	struct:__anon8	file:
libversion	.\sqlite3ext.h	/^  const char * (*libversion)(void);$/;"	m	struct:sqlite3_api_routines
libversion_number	.\sqlite3ext.h	/^  int  (*libversion_number)(void);$/;"	m	struct:sqlite3_api_routines
likeFunc	.\func.c	/^static void likeFunc($/;"	f	file:
likeInfoAlt	.\func.c	/^static const struct compareInfo likeInfoAlt = { '%', '_',   0, 0 };$/;"	v	typeref:struct:compareInfo	file:
likeInfoNorm	.\func.c	/^static const struct compareInfo likeInfoNorm = { '%', '_',   0, 1 };$/;"	v	typeref:struct:compareInfo	file:
likely	.\sqliteInt.h	289;"	d
likely	.\sqliteInt.h	292;"	d
limit	.\sqlite3ext.h	/^  int (*limit)(sqlite3*,int,int);$/;"	m	struct:sqlite3_api_routines
list	.\mem3.c	/^    } list;$/;"	m	union:Mem3Block::__anon3	typeref:struct:Mem3Block::__anon3::__anon5	file:
loadAnalysis	.\analyze.c	/^static void loadAnalysis(Parse *pParse, int iDb){$/;"	f	file:
loadExt	.\func.c	/^static void loadExt(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
local	.\os_win.c	/^  winceLock local;        \/* Locks obtained by this instance of winFile *\/$/;"	m	struct:winFile	file:
local_getline	.\shell.c	/^static char *local_getline(char *zPrompt, FILE *in){$/;"	f	file:
local_getline	.\tclsqlite.c	/^static char *local_getline(char *zPrompt, FILE *in){$/;"	f	file:
local_ioerr	.\os_common.h	/^static void local_ioerr(){$/;"	f
localtime	.\os_win.c	/^struct tm *__cdecl localtime(const time_t *t)$/;"	f
localtimeOffset	.\date.c	/^static sqlite3_int64 localtimeOffset(DateTime *p){$/;"	f	file:
locateFkeyIndex	.\fkey.c	/^static int locateFkeyIndex($/;"	f	file:
lock	.\btreeInt.h	/^  BtLock lock;       \/* Object used to lock page 1 *\/$/;"	m	struct:Btree
lockBtree	.\btree.c	/^static int lockBtree(BtShared *pBt){$/;"	f	file:
lockBtreeMutex	.\btmutex.c	/^static void lockBtreeMutex(Btree *p){$/;"	f	file:
lockError	.\wal.c	/^  u8 lockError;              \/* True if a locking error has occurred *\/$/;"	m	struct:Wal	file:
lockProxy	.\os_unix.c	/^  unixFile *lockProxy;         \/* Open proxy lock file *\/$/;"	m	struct:proxyLockingContext	file:
lockProxyPath	.\os_unix.c	/^  char *lockProxyPath;         \/* Name of the proxy lock file *\/$/;"	m	struct:proxyLockingContext	file:
lockTrace	.\os_unix.c	/^static int lockTrace(int fd, int op, struct flock *p){$/;"	f	file:
locked	.\btreeInt.h	/^  u8 locked;         \/* True if db currently has pBt locked *\/$/;"	m	struct:Btree
lockingContext	.\os_unix.c	/^  void *lockingContext;               \/* Locking style specific state *\/$/;"	m	struct:unixFile	file:
locktype	.\os_os2.c	/^  unsigned char locktype;   \/* Type of lock currently held on this file *\/$/;"	m	struct:os2File	file:
locktype	.\os_win.c	/^  unsigned char locktype; \/* Type of lock currently held on this file *\/$/;"	m	struct:winFile	file:
logBadConnection	.\util.c	/^static void logBadConnection(const char *zType){$/;"	f	file:
lookaside	.\sqliteInt.h	/^  Lookaside lookaside;          \/* Lookaside malloc configuration *\/$/;"	m	struct:sqlite3
lookupName	.\resolve.c	/^static int lookupName($/;"	f	file:
lowerFunc	.\func.c	/^static void lowerFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
lru	.\sqliteInt.h	/^    int lru;              \/* Least recently used entry has the smallest value *\/$/;"	m	struct:Parse::yColCache
m	.\date.c	/^  int h, m;          \/* Hour and minutes *\/$/;"	m	struct:DateTime	file:
m	.\sqliteInt.h	/^  sqlite3_mem_methods m;            \/* Low-level memory allocation interface *\/$/;"	m	struct:Sqlite3Config
m_eq_1	.\fts3_porter.c	/^static int m_eq_1(const char *z){$/;"	f	file:
m_gt_0	.\fts3_porter.c	/^static int m_gt_0(const char *z){$/;"	f	file:
m_gt_1	.\fts3_porter.c	/^static int m_gt_1(const char *z){$/;"	f	file:
magic	.\sqliteInt.h	/^  u32 magic;                    \/* Magic number for detect library misuse *\/$/;"	m	struct:sqlite3
magic	.\vdbeInt.h	/^  u32 magic;              \/* Magic number for sanity checking *\/$/;"	m	struct:Vdbe
main	.\shell.c	/^int main(int argc, char **argv){$/;"	f
mainPrompt	.\shell.c	/^static char mainPrompt[20];     \/* First line prompt. default: "sqlite> "*\/$/;"	v	file:
main_init	.\shell.c	/^static void main_init(struct callback_data *data) {$/;"	f	file:
major	.\parse.c	/^  YYCODETYPE major;      \/* The major token value.  This is the code$/;"	m	struct:yyStackEntry	file:
malloc	.\sqlite3ext.h	/^  void *(*malloc)(int);$/;"	m	struct:sqlite3_api_routines
mallocFailed	.\btreeInt.h	/^  int mallocFailed; \/* A memory allocation error has occurred *\/$/;"	m	struct:IntegrityCk
mallocFailed	.\sqliteInt.h	/^  u8   mallocFailed;   \/* Becomes true if any memory allocation fails *\/$/;"	m	struct:StrAccum
mallocFailed	.\sqliteInt.h	/^  u8 mallocFailed;              \/* True if we have seen a malloc failure *\/$/;"	m	struct:sqlite3
mallocWithAlarm	.\malloc.c	/^static int mallocWithAlarm(int n, void **pp){$/;"	f	file:
mask	.\parse.c	/^  struct {int value; int mask;} yy215;$/;"	m	struct:__anon6::__anon7	file:
maskPage	.\btreeInt.h	/^  u16 maskPage;        \/* Mask for page offset *\/$/;"	m	struct:MemPage
matchAll	.\func.c	/^  u8 matchAll;$/;"	m	struct:compareInfo	file:
matchOne	.\func.c	/^  u8 matchOne;$/;"	m	struct:compareInfo	file:
matchQuality	.\callback.c	/^static int matchQuality(FuncDef *p, int nArg, u8 enc){$/;"	f	file:
matchSet	.\func.c	/^  u8 matchSet;$/;"	m	struct:compareInfo	file:
maxCount	.\mem5.c	/^  u32 maxCount;       \/* Maximum instantaneous currentCount *\/$/;"	m	struct:Mem5Global	file:
maxLeaf	.\btreeInt.h	/^  u16 maxLeaf;          \/* Maximum local payload in a LEAFDATA table *\/$/;"	m	struct:BtShared
maxLocal	.\btreeInt.h	/^  u16 maxLocal;         \/* Maximum local payload in non-LEAFDATA tables *\/$/;"	m	struct:BtShared
maxLocal	.\btreeInt.h	/^  u16 maxLocal;        \/* Copy of BtShared.maxLocal or BtShared.maxLeaf *\/$/;"	m	struct:MemPage
maxOut	.\mem5.c	/^  u32 maxOut;         \/* Maximum instantaneous currentOut *\/$/;"	m	struct:Mem5Global	file:
maxRequest	.\mem5.c	/^  u32 maxRequest;     \/* Largest allocation (exclusive of internal frag) *\/$/;"	m	struct:Mem5Global	file:
maxStmt	.\tclsqlite.c	/^  int maxStmt;               \/* The next maximum number of stmtList *\/$/;"	m	struct:SqliteDb	file:
mayAbort	.\sqliteInt.h	/^  u8 mayAbort;         \/* True if statement may throw an ABORT exception *\/$/;"	m	struct:Parse
mbcsToUnicode	.\os_win.c	/^static WCHAR *mbcsToUnicode(const char *zFilename){$/;"	f	file:
md5_cmd	.\tclsqlite.c	/^static int md5_cmd(void*cd, Tcl_Interp *interp, int argc, const char **argv){$/;"	f	file:
md5file_cmd	.\tclsqlite.c	/^static int md5file_cmd(void*cd, Tcl_Interp*interp, int argc, const char **argv){$/;"	f	file:
md5finalize	.\tclsqlite.c	/^static void md5finalize(sqlite3_context *context){$/;"	f	file:
md5step	.\tclsqlite.c	/^static void md5step(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
mem	.\mem2.c	/^} mem;$/;"	v	typeref:struct:__anon2	file:
mem0	.\malloc.c	/^} mem0 = { 0, 0, 0, 0, 0, 0, 0, 0 };$/;"	v	typeref:struct:Mem0Global	file:
mem0	.\malloc.c	103;"	d	file:
mem3	.\mem3.c	/^} mem3 = { 97535575 };$/;"	v	typeref:struct:Mem3Global	file:
mem3	.\mem3.c	141;"	d	file:
mem5	.\mem5.c	/^} mem5 = { 0 };$/;"	v	typeref:struct:Mem5Global	file:
mem5	.\mem5.c	135;"	d	file:
memDb	.\pager.c	/^  u8 memDb;                   \/* True to inhibit all file I\/O *\/$/;"	m	struct:Pager	file:
memTracePrint	.\vdbe.c	/^static void memTracePrint(FILE *out, Mem *p){$/;"	f	file:
memjrnlClose	.\memjournal.c	/^static int memjrnlClose(sqlite3_file *pJfd){$/;"	f	file:
memjrnlFileSize	.\memjournal.c	/^static int memjrnlFileSize(sqlite3_file *pJfd, sqlite_int64 *pSize){$/;"	f	file:
memjrnlRead	.\memjournal.c	/^static int memjrnlRead($/;"	f	file:
memjrnlSync	.\memjournal.c	/^static int memjrnlSync(sqlite3_file *NotUsed, int NotUsed2){$/;"	f	file:
memjrnlTruncate	.\memjournal.c	/^static int memjrnlTruncate(sqlite3_file *pJfd, sqlite_int64 size){$/;"	f	file:
memjrnlWrite	.\memjournal.c	/^static int memjrnlWrite($/;"	f	file:
memory_highwater	.\sqlite3ext.h	/^  sqlite3_int64 (*memory_highwater)(int);$/;"	m	struct:sqlite3_api_routines
memory_used	.\sqlite3ext.h	/^  sqlite3_int64 (*memory_used)(void);$/;"	m	struct:sqlite3_api_routines
memsys3Checkout	.\mem3.c	/^static void *memsys3Checkout(u32 i, u32 nBlock){$/;"	f	file:
memsys3Enter	.\mem3.c	/^static void memsys3Enter(void){$/;"	f	file:
memsys3Free	.\mem3.c	/^void memsys3Free(void *pPrior){$/;"	f
memsys3FreeUnsafe	.\mem3.c	/^void memsys3FreeUnsafe(void *pOld){$/;"	f
memsys3FromMaster	.\mem3.c	/^static void *memsys3FromMaster(u32 nBlock){$/;"	f	file:
memsys3Init	.\mem3.c	/^static int memsys3Init(void *NotUsed){$/;"	f	file:
memsys3Leave	.\mem3.c	/^static void memsys3Leave(void){$/;"	f	file:
memsys3Link	.\mem3.c	/^static void memsys3Link(u32 i){$/;"	f	file:
memsys3LinkIntoList	.\mem3.c	/^static void memsys3LinkIntoList(u32 i, u32 *pRoot){$/;"	f	file:
memsys3Malloc	.\mem3.c	/^static void *memsys3Malloc(int nBytes){$/;"	f	file:
memsys3MallocUnsafe	.\mem3.c	/^static void *memsys3MallocUnsafe(int nByte){$/;"	f	file:
memsys3Merge	.\mem3.c	/^static void memsys3Merge(u32 *pRoot){$/;"	f	file:
memsys3OutOfMemory	.\mem3.c	/^static void memsys3OutOfMemory(int nByte){$/;"	f	file:
memsys3Realloc	.\mem3.c	/^void *memsys3Realloc(void *pPrior, int nBytes){$/;"	f
memsys3Roundup	.\mem3.c	/^static int memsys3Roundup(int n){$/;"	f	file:
memsys3Shutdown	.\mem3.c	/^static void memsys3Shutdown(void *NotUsed){$/;"	f	file:
memsys3Size	.\mem3.c	/^static int memsys3Size(void *p){$/;"	f	file:
memsys3Unlink	.\mem3.c	/^static void memsys3Unlink(u32 i){$/;"	f	file:
memsys3UnlinkFromList	.\mem3.c	/^static void memsys3UnlinkFromList(u32 i, u32 *pRoot){$/;"	f	file:
memsys5Enter	.\mem5.c	/^static void memsys5Enter(void){$/;"	f	file:
memsys5Free	.\mem5.c	/^static void memsys5Free(void *pPrior){$/;"	f	file:
memsys5FreeUnsafe	.\mem5.c	/^static void memsys5FreeUnsafe(void *pOld){$/;"	f	file:
memsys5Init	.\mem5.c	/^static int memsys5Init(void *NotUsed){$/;"	f	file:
memsys5Leave	.\mem5.c	/^static void memsys5Leave(void){$/;"	f	file:
memsys5Link	.\mem5.c	/^static void memsys5Link(int i, int iLogsize){$/;"	f	file:
memsys5Log	.\mem5.c	/^static int memsys5Log(int iValue){$/;"	f	file:
memsys5Malloc	.\mem5.c	/^static void *memsys5Malloc(int nBytes){$/;"	f	file:
memsys5MallocUnsafe	.\mem5.c	/^static void *memsys5MallocUnsafe(int nByte){$/;"	f	file:
memsys5Realloc	.\mem5.c	/^static void *memsys5Realloc(void *pPrior, int nBytes){$/;"	f	file:
memsys5Roundup	.\mem5.c	/^static int memsys5Roundup(int n){$/;"	f	file:
memsys5Shutdown	.\mem5.c	/^static void memsys5Shutdown(void *NotUsed){$/;"	f	file:
memsys5Size	.\mem5.c	/^static int memsys5Size(void *p){$/;"	f	file:
memsys5Unlink	.\mem5.c	/^static void memsys5Unlink(int i, int iLogsize){$/;"	f	file:
memsys5UnlinkFirst	.\mem5.c	/^static int memsys5UnlinkFirst(int iLogsize){$/;"	f	file:
minLeaf	.\btreeInt.h	/^  u16 minLeaf;          \/* Minimum local payload in a LEAFDATA table *\/$/;"	m	struct:BtShared
minLocal	.\btreeInt.h	/^  u16 minLocal;         \/* Minimum local payload in non-LEAFDATA tables *\/$/;"	m	struct:BtShared
minLocal	.\btreeInt.h	/^  u16 minLocal;        \/* Copy of BtShared.minLocal or BtShared.minLeaf *\/$/;"	m	struct:MemPage
minMaxFinalize	.\func.c	/^static void minMaxFinalize(sqlite3_context *context){$/;"	f	file:
minMaxQuery	.\select.c	/^static u8 minMaxQuery(Select *p){$/;"	f	file:
minWriteFileFormat	.\vdbeInt.h	/^  u8 minWriteFileFormat;  \/* Minimum file format for writable database files *\/$/;"	m	struct:Vdbe
minmaxFunc	.\func.c	/^static void minmaxFunc($/;"	f	file:
minmaxStep	.\func.c	/^static void minmaxStep($/;"	f	file:
minor	.\parse.c	/^  YYMINORTYPE minor;     \/* The user-supplied minor token value.  This$/;"	m	struct:yyStackEntry	file:
mnMaster	.\mem3.c	/^  u32 mnMaster;$/;"	m	struct:Mem3Global	file:
mnReq	.\sqliteInt.h	/^  int mnReq, mxReq;                 \/* Min and max heap requests sizes *\/$/;"	m	struct:Sqlite3Config
mode	.\shell.c	/^  int mode;              \/* An output mode setting *\/$/;"	m	struct:callback_data	file:
mode	.\shell.c	/^  int mode;$/;"	m	struct:previous_mode_data	file:
modeDescr	.\shell.c	/^static const char *modeDescr[] = {$/;"	v	file:
modifyPagePointer	.\btree.c	/^static int modifyPagePointer(MemPage *pPage, Pgno iFrom, Pgno iTo, u8 eType){$/;"	f	file:
moveToChild	.\btree.c	/^static int moveToChild(BtCursor *pCur, u32 newPgno){$/;"	f	file:
moveToLeftmost	.\btree.c	/^static int moveToLeftmost(BtCursor *pCur){$/;"	f	file:
moveToParent	.\btree.c	/^static void moveToParent(BtCursor *pCur){$/;"	f	file:
moveToRightmost	.\btree.c	/^static int moveToRightmost(BtCursor *pCur){$/;"	f	file:
moveToRoot	.\btree.c	/^static int moveToRoot(BtCursor *pCur){$/;"	f	file:
movetoTarget	.\vdbeInt.h	/^  i64 movetoTarget;     \/* Argument to the deferred sqlite3BtreeMoveto() *\/$/;"	m	struct:VdbeCursor
mprintf	.\sqlite3ext.h	/^  char * (*mprintf)(const char*,...);$/;"	m	struct:sqlite3_api_routines
multiSelect	.\select.c	/^static int multiSelect($/;"	f	file:
multiSelectCollSeq	.\select.c	/^static CollSeq *multiSelectCollSeq(Parse *pParse, Select *p, int iCol){$/;"	f	file:
multiSelectOrderBy	.\select.c	/^static int multiSelectOrderBy($/;"	f	file:
mutex	.\btreeInt.h	/^  sqlite3_mutex *mutex; \/* Non-recursive mutex required to access this struct *\/$/;"	m	struct:BtShared
mutex	.\malloc.c	/^  sqlite3_mutex *mutex;         \/* Mutex to serialize access *\/$/;"	m	struct:Mem0Global	file:
mutex	.\mem2.c	/^  sqlite3_mutex *mutex;$/;"	m	struct:__anon2	file:
mutex	.\mem3.c	/^  sqlite3_mutex *mutex;$/;"	m	struct:Mem3Global	file:
mutex	.\mem5.c	/^  sqlite3_mutex *mutex;$/;"	m	struct:Mem5Global	file:
mutex	.\mutex_os2.c	/^  HMTX mutex;       \/* Mutex controlling the lock *\/$/;"	m	struct:sqlite3_mutex	file:
mutex	.\mutex_unix.c	/^  pthread_mutex_t mutex;     \/* Mutex controlling the lock *\/$/;"	m	struct:sqlite3_mutex	file:
mutex	.\mutex_w32.c	/^  CRITICAL_SECTION mutex;    \/* Mutex controlling the lock *\/$/;"	m	struct:sqlite3_mutex	file:
mutex	.\os_unix.c	/^  sqlite3_mutex *mutex;      \/* Mutex to access this object *\/$/;"	m	struct:unixShmNode	file:
mutex	.\os_win.c	/^  sqlite3_mutex *mutex;      \/* Mutex to access this object *\/$/;"	m	struct:winShmNode	file:
mutex	.\pcache1.c	/^  sqlite3_mutex *mutex;               \/* static mutex MUTEX_STATIC_LRU *\/$/;"	m	struct:PCacheGlobal	file:
mutex	.\sqliteInt.h	/^  sqlite3_mutex *mutex;         \/* Connection mutex *\/$/;"	m	struct:sqlite3
mutex	.\sqliteInt.h	/^  sqlite3_mutex_methods mutex;      \/* Low-level mutex interface *\/$/;"	m	struct:Sqlite3Config
mutexIsInit	.\mutex.c	/^static SQLITE_WSD int mutexIsInit = 0;$/;"	v	file:
mutex_alloc	.\sqlite3ext.h	/^  sqlite3_mutex *(*mutex_alloc)(int);$/;"	m	struct:sqlite3_api_routines
mutex_enter	.\sqlite3ext.h	/^  void (*mutex_enter)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines
mutex_free	.\sqlite3ext.h	/^  void (*mutex_free)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines
mutex_leave	.\sqlite3ext.h	/^  void (*mutex_leave)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines
mutex_try	.\sqlite3ext.h	/^  int (*mutex_try)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines
mxAlloc	.\sqliteInt.h	/^  int  mxAlloc;        \/* Maximum allowed string length *\/$/;"	m	struct:StrAccum
mxCurrent	.\mem2.c	/^  int mxCurrent[NCSIZE];   \/* Highwater mark for nCurrent *\/$/;"	m	struct:__anon2	file:
mxErr	.\btreeInt.h	/^  int mxErr;        \/* Stop accumulating errors when this reaches zero *\/$/;"	m	struct:IntegrityCk
mxFrame	.\wal.c	/^  u32 mxFrame;                    \/* Index of last valid frame in the WAL *\/$/;"	m	struct:WalIndexHdr	file:
mxOut	.\sqliteInt.h	/^  int mxOut;              \/* Highwater mark for nOut *\/$/;"	m	struct:Lookaside
mxParserStack	.\sqliteInt.h	/^  int mxParserStack;                \/* maximum depth of the parser stack *\/$/;"	m	struct:Sqlite3Config
mxPathname	.\sqlite3.h	/^  int mxPathname;          \/* Maximum file pathname length *\/$/;"	m	struct:sqlite3_vfs
mxPgno	.\pager.c	/^  Pgno mxPgno;                \/* Maximum allowed size of the database *\/$/;"	m	struct:Pager	file:
mxReq	.\sqliteInt.h	/^  int mnReq, mxReq;                 \/* Min and max heap requests sizes *\/$/;"	m	struct:Sqlite3Config
mxStrlen	.\sqliteInt.h	/^  int mxStrlen;                     \/* Maximum string length *\/$/;"	m	struct:Sqlite3Config
mxValue	.\status.c	/^  int mxValue[10];          \/* Maximum value *\/$/;"	m	struct:sqlite3StatType	file:
n	.\fts3Int.h	/^    int n;                   \/* Number of bytes in buffer pointed to by z *\/$/;"	m	struct:Fts3Phrase::PhraseToken
n	.\fts3_snippet.c	/^  int n;                          \/* Length of z in bytes (excl. nul-term) *\/$/;"	m	struct:StrBuffer	file:
n	.\func.c	/^  i64 n;$/;"	m	struct:CountCtx	file:
n	.\sqliteInt.h	/^  unsigned int n;    \/* Number of characters in this token *\/$/;"	m	struct:Token
n	.\vdbeInt.h	/^  int n;              \/* Number of characters in string value, excluding '\\0' *\/$/;"	m	struct:Mem
n	.\where.c	/^  int n;                        \/* Number of assigned cursor values *\/$/;"	m	struct:WhereMaskSet	file:
nAccumulator	.\sqliteInt.h	/^  int nAccumulator;       \/* Number of columns that show through to the output.$/;"	m	struct:AggInfo
nAlias	.\sqliteInt.h	/^  int nAlias;          \/* Number of aliased result set columns *\/$/;"	m	struct:Parse
nAliasAlloc	.\sqliteInt.h	/^  int nAliasAlloc;     \/* Number of allocated slots for aAlias[] *\/$/;"	m	struct:Parse
nAlloc	.\fts3_snippet.c	/^  int nAlloc;                     \/* Allocated size of buffer z in bytes *\/$/;"	m	struct:StrBuffer	file:
nAlloc	.\mem2.c	/^  int nAlloc[NCSIZE];      \/* Total number of allocations *\/$/;"	m	struct:__anon2	file:
nAlloc	.\mem5.c	/^  u64 nAlloc;         \/* Total number of calls to malloc *\/$/;"	m	struct:Mem5Global	file:
nAlloc	.\sqliteInt.h	/^  i16 nAlloc;      \/* Number of entries allocated in a[] below *\/$/;"	m	struct:SrcList
nAlloc	.\sqliteInt.h	/^  int  nAlloc;         \/* Amount of space allocated in zText *\/$/;"	m	struct:StrAccum
nAlloc	.\sqliteInt.h	/^  int nAlloc;            \/* Number of entries allocated below *\/$/;"	m	struct:ExprList
nAlloc	.\sqliteInt.h	/^  int nAlloc;      \/* Number of entries allocated for a[] below *\/$/;"	m	struct:IdList
nAlloc	.\table.c	/^  int nAlloc;        \/* Slots allocated for azResult[] *\/$/;"	m	struct:TabResult	file:
nAllocated	.\fts3_porter.c	/^  int nAllocated;              \/* space allocated to zToken buffer *\/$/;"	m	struct:porter_tokenizer_cursor	file:
nArg	.\sqliteInt.h	/^  i16 nArg;            \/* Number of arguments.  -1 means unlimited *\/$/;"	m	struct:FuncDef
nAux	.\vdbeInt.h	/^  int nAux;                     \/* Number of entries allocated for apAux[] *\/$/;"	m	struct:VdbeFunc
nBackfill	.\wal.c	/^  u32 nBackfill;                  \/* Number of WAL frames backfilled into DB *\/$/;"	m	struct:WalCkptInfo	file:
nBacktrace	.\mem2.c	/^  char nBacktrace;                    \/* Number of backtraces on this alloc *\/$/;"	m	struct:MemBlockHdr	file:
nBacktrace	.\mem2.c	/^  int nBacktrace;$/;"	m	struct:__anon2	file:
nBacktraceSlots	.\mem2.c	/^  char nBacktraceSlots;               \/* Available backtrace slots *\/$/;"	m	struct:MemBlockHdr	file:
nBackup	.\btreeInt.h	/^  int nBackup;       \/* Number of backup operations reading this btree *\/$/;"	m	struct:Btree
nBlock	.\mem5.c	/^  int nBlock;      \/* Number of szAtom sized blocks in zPool *\/$/;"	m	struct:Mem5Global	file:
nBuf	.\journal.c	/^  int nBuf;                       \/* Size of zBuf[] in bytes *\/$/;"	m	struct:JournalFile	file:
nBuffer	.\fts3_icu.c	/^  int nBuffer;$/;"	m	struct:IcuCursor	file:
nBusy	.\rtree.c	/^  int nBusy;                  \/* Current number of users of this structure *\/$/;"	m	struct:Rtree	file:
nBusy	.\sqliteInt.h	/^  int nBusy;                 \/* Incremented with each busy call *\/$/;"	m	struct:BusyHandler
nByte	.\sqliteInt.h	/^  u8 nByte;         \/* Size in byte of text or blob. *\/$/;"	m	struct:IndexSample
nByte	.\vdbeblob.c	/^  int nByte;              \/* Size of open blob, in bytes *\/$/;"	m	struct:Incrblob	file:
nBytes	.\fts3_tokenizer1.c	/^  int nBytes;                  \/* size of the input *\/$/;"	m	struct:simple_tokenizer_cursor	file:
nBytesPerCell	.\rtree.c	/^  int nBytesPerCell;          \/* Bytes consumed per cell *\/$/;"	m	struct:Rtree	file:
nCell	.\btreeInt.h	/^  u16 nCell;           \/* Number of cells on this page, local and ovfl *\/$/;"	m	struct:MemPage
nChange	.\sqliteInt.h	/^  int nChange;                  \/* Value returned by sqlite3_changes() *\/$/;"	m	struct:sqlite3
nChange	.\vdbeInt.h	/^  int nChange;            \/* Number of db changes made since last reset *\/$/;"	m	struct:Vdbe
nChange	.\vdbeInt.h	/^  int nChange;            \/* Statement changes (Vdbe.nChanges)     *\/$/;"	m	struct:VdbeFrame
nChar	.\fts3_icu.c	/^  int nChar;                  \/* Number of UChar elements in pInput *\/$/;"	m	struct:IcuCursor	file:
nChar	.\sqliteInt.h	/^  int  nChar;          \/* Length of the string so far *\/$/;"	m	struct:StrAccum
nChild	.\where.c	/^  u8 nChild;              \/* Number of children that must disable us *\/$/;"	m	struct:WhereTerm	file:
nChildCsr	.\vdbeInt.h	/^  int nChildCsr;          \/* Number of cursors for child frame *\/$/;"	m	struct:VdbeFrame
nChildMem	.\vdbeInt.h	/^  int nChildMem;          \/* Number of memory cells for child frame *\/$/;"	m	struct:VdbeFrame
nCkpt	.\wal.c	/^  u32 nCkpt;                 \/* Checkpoint sequence counter in the wal-header *\/$/;"	m	struct:Wal	file:
nCol	.\fts3_expr.c	/^  int nCol;                           \/* Number of entries in azCol[] *\/$/;"	m	struct:ParseContext	file:
nCol	.\fts3_snippet.c	/^  int nCol;                       \/* Number of columns in table *\/$/;"	m	struct:MatchInfo	file:
nCol	.\sqliteInt.h	/^  int nCol;            \/* Number of columns in this table *\/$/;"	m	struct:Table
nCol	.\sqliteInt.h	/^  int nCol;         \/* Number of columns in this key *\/$/;"	m	struct:FKey
nCol	.\tclsqlite.c	/^  int nCol;                       \/* Number of columns returned by pStmt *\/$/;"	m	struct:DbEvalContext	file:
nColCache	.\sqliteInt.h	/^  u8 nColCache;        \/* Number of entries in the column cache *\/$/;"	m	struct:Parse
nColumn	.\fts3Int.h	/^  int nColumn;                    \/* number of named columns in virtual table *\/$/;"	m	struct:Fts3Table
nColumn	.\sqliteInt.h	/^  int nColumn;            \/* Number of used entries in aCol[] *\/$/;"	m	struct:AggInfo
nColumn	.\sqliteInt.h	/^  int nColumn;     \/* Number of columns in the table used by this index *\/$/;"	m	struct:Index
nColumn	.\table.c	/^  int nColumn;       \/* Number of columns in the result *\/$/;"	m	struct:TabResult	file:
nColumnAlloc	.\sqliteInt.h	/^  int nColumnAlloc;       \/* Number of slots allocated for aCol[] *\/$/;"	m	struct:AggInfo
nConstraint	.\rtree.c	/^  int nConstraint;                  \/* Number of entries in aConstraint *\/$/;"	m	struct:RtreeCursor	file:
nConstraint	.\sqlite3.h	/^  int nConstraint;           \/* Number of entries in aConstraint *\/$/;"	m	struct:sqlite3_index_info
nCsr	.\vdbe.h	/^  int nCsr;                     \/* Number of cursors required *\/$/;"	m	struct:SubProgram
nCurrent	.\mem2.c	/^  int nCurrent[NCSIZE];    \/* Current number of allocations *\/$/;"	m	struct:__anon2	file:
nCurrentPage	.\pcache1.c	/^  int nCurrentPage;                   \/* Number of purgeable pages allocated *\/$/;"	m	struct:PCacheGlobal	file:
nCursor	.\vdbeInt.h	/^  u16 nCursor;            \/* Number of entries in apCsr *\/$/;"	m	struct:VdbeFrame
nCursor	.\vdbeInt.h	/^  u16 nCursor;            \/* Number of slots in apCsr[] *\/$/;"	m	struct:Vdbe
nData	.\btreeInt.h	/^  u32 nData;     \/* Number of bytes of data *\/$/;"	m	struct:CellInfo
nData	.\fts3_write.c	/^  int nData;                      \/* Bytes of data in aData *\/$/;"	m	struct:SegmentWriter	file:
nData	.\fts3_write.c	/^  int nData;                      \/* Bytes of valid data so far *\/$/;"	m	struct:SegmentNode	file:
nData	.\fts3_write.c	/^  int nData;$/;"	m	struct:PendingList	file:
nData	.\table.c	/^  int nData;         \/* Slots used in azResult[].  (nRow+1)*nColumn *\/$/;"	m	struct:TabResult	file:
nDb	.\sqliteInt.h	/^  int nDb;                      \/* Number of backends currently in use *\/$/;"	m	struct:sqlite3
nDeferredCons	.\sqliteInt.h	/^  i64 nDeferredCons;                  \/* Number of deferred fk violations *\/$/;"	m	struct:Savepoint
nDeferredCons	.\sqliteInt.h	/^  i64 nDeferredCons;            \/* Net deferred constraints this transaction. *\/$/;"	m	struct:sqlite3
nDepth	.\sqliteInt.h	/^  int nDepth;          \/* Depth of subquery recursion. 1 for no recursion *\/$/;"	m	struct:NameContext
nDim	.\rtree.c	/^  int nDim;                   \/* Number of dimensions *\/$/;"	m	struct:Rtree	file:
nDoclist	.\fts3Int.h	/^  int nDoclist;                   \/* Size of buffer at aDoclist *\/$/;"	m	struct:Fts3Cursor
nDoclist	.\fts3Int.h	/^  int nDoclist;              \/* Size of aDoclist in bytes *\/$/;"	m	struct:Fts3Expr
nDoclist	.\fts3_write.c	/^  int nDoclist;                   \/* Size of doclist in current entry *\/$/;"	m	struct:Fts3SegReader	file:
nEntry	.\fts3_write.c	/^  int nEntry;                     \/* Number of terms written to node so far *\/$/;"	m	struct:SegmentNode	file:
nEntry	.\wal.c	/^    int nEntry;                   \/* Max size of aPgno[] and aIndex[] arrays *\/$/;"	m	struct:WalIterator::WalSegment	file:
nEq	.\sqliteInt.h	/^  u32 nEq;                       \/* Number of == constraints *\/$/;"	m	struct:WherePlan
nErr	.\btreeInt.h	/^  int nErr;         \/* Number of messages written to zErrMsg so far *\/$/;"	m	struct:IntegrityCk
nErr	.\sqliteInt.h	/^  int nErr;            \/* Number of errors encountered while resolving names *\/$/;"	m	struct:NameContext
nErr	.\sqliteInt.h	/^  int nErr;            \/* Number of errors seen *\/$/;"	m	struct:Parse
nExpr	.\sqliteInt.h	/^  int nExpr;             \/* Number of expressions on the list *\/$/;"	m	struct:ExprList
nExt	.\loadext.c	/^  int nExt;              \/* Number of entries in aExt[] *\/          $/;"	m	struct:sqlite3AutoExtList	file:
nExtension	.\sqliteInt.h	/^  int nExtension;               \/* Number of loaded extensions *\/$/;"	m	struct:sqlite3
nExtra	.\pager.c	/^  u16 nExtra;                 \/* Add this many bytes to each in-memory page *\/$/;"	m	struct:Pager	file:
nField	.\sqliteInt.h	/^  u16 nField;         \/* Number of entries in aColl[] *\/$/;"	m	struct:KeyInfo
nField	.\sqliteInt.h	/^  u16 nField;         \/* Number of entries in apMem[] *\/$/;"	m	struct:UnpackedRecord
nField	.\vdbeInt.h	/^  int nField;           \/* Number of fields in the header *\/$/;"	m	struct:VdbeCursor
nFkConstraint	.\vdbeInt.h	/^  i64 nFkConstraint;      \/* Number of imm. FK constraints this VM *\/$/;"	m	struct:Vdbe
nFrame	.\vdbeInt.h	/^  int nFrame;             \/* Number of frames in pFrame list *\/$/;"	m	struct:Vdbe
nFree	.\btreeInt.h	/^  u16 nFree;           \/* Number of free bytes on the page *\/$/;"	m	struct:MemPage
nFresh	.\rowset.c	/^  u16 nFresh;                    \/* Number of objects on pFresh *\/$/;"	m	struct:RowSet	file:
nFunc	.\sqliteInt.h	/^  int nFunc;              \/* Number of entries in aFunc[] *\/$/;"	m	struct:AggInfo
nFuncAlloc	.\sqliteInt.h	/^  int nFuncAlloc;         \/* Number of slots allocated for aFunc[] *\/$/;"	m	struct:AggInfo
nHash	.\pcache1.c	/^  unsigned int nHash;                 \/* Number of slots in apHash[] *\/$/;"	m	struct:PCache1	file:
nHeader	.\btreeInt.h	/^  u16 nHeader;   \/* Size of the cell content header in bytes *\/$/;"	m	struct:CellInfo
nHeap	.\sqliteInt.h	/^  int nHeap;                        \/* Size of pHeap[] *\/$/;"	m	struct:Sqlite3Config
nHeight	.\sqliteInt.h	/^  int nHeight;            \/* Expression tree height of current sub-select *\/$/;"	m	struct:Parse
nHeight	.\sqliteInt.h	/^  int nHeight;           \/* Height of the tree headed by this node *\/$/;"	m	struct:Expr
nHit	.\pager.c	/^  int nHit, nMiss;            \/* Cache hits and missing *\/$/;"	m	struct:Pager	file:
nId	.\sqliteInt.h	/^  int nId;         \/* Number of identifiers on the list *\/$/;"	m	struct:IdList
nIn	.\sqliteInt.h	/^      int nIn;              \/* Number of entries in aInLoop[] *\/$/;"	m	struct:WhereLevel::__anon14::__anon15
nIndex	.\tclsqlite.c	/^  int nStep, nSort, nIndex;  \/* Statistics for most recent operation *\/$/;"	m	struct:SqliteDb	file:
nInput	.\fts3_porter.c	/^  int nInput;                  \/* size of the input *\/$/;"	m	struct:porter_tokenizer_cursor	file:
nKey	.\btreeInt.h	/^  i64 nKey;        \/* Size of pKey, or last integer key *\/$/;"	m	struct:BtCursor
nKey	.\btreeInt.h	/^  i64 nKey;      \/* The key for INTKEY tables, or number of bytes in key *\/$/;"	m	struct:CellInfo
nKey	.\fts3_hash.h	/^  void *pKey; int nKey;      \/* Key associated with this element *\/$/;"	m	struct:Fts3HashElem
nKey	.\hash.h	/^  const char *pKey; int nKey;  \/* Key associated with this element *\/$/;"	m	struct:HashElem
nLabel	.\vdbeInt.h	/^  int nLabel;             \/* Number of labels used *\/$/;"	m	struct:Vdbe
nLabelAlloc	.\vdbeInt.h	/^  int nLabelAlloc;        \/* Number of slots allocated in aLabel[] *\/$/;"	m	struct:Vdbe
nLeavesAlloc	.\fts3Int.h	/^  int nLeavesAlloc;               \/* Allocated size of aLeavesStmt *\/$/;"	m	struct:Fts3Table
nLeavesStmt	.\fts3Int.h	/^  int nLeavesStmt;                \/* Valid statements in aLeavesStmt *\/$/;"	m	struct:Fts3Table
nLeavesTotal	.\fts3Int.h	/^  int nLeavesTotal;               \/* Total number of prepared leaves stmts *\/$/;"	m	struct:Fts3Table
nLevel	.\sqliteInt.h	/^  int nLevel;                    \/* Number of nested loop *\/$/;"	m	struct:WhereInfo
nLocal	.\btreeInt.h	/^  u16 nLocal;    \/* Amount of payload held locally *\/$/;"	m	struct:CellInfo
nLock	.\os_unix.c	/^  int nLock;                      \/* Number of outstanding file locks *\/$/;"	m	struct:unixInodeInfo	file:
nLookaside	.\sqliteInt.h	/^  int nLookaside;                   \/* Default lookaside buffer count *\/$/;"	m	struct:Sqlite3Config
nMalloc	.\fts3_write.c	/^  int nMalloc;                    \/* Size of malloc'd buffer at zMalloc *\/$/;"	m	struct:SegmentNode	file:
nMalloc	.\fts3_write.c	/^  int nMalloc;                    \/* Size of malloc'd buffer at zMalloc *\/$/;"	m	struct:SegmentWriter	file:
nMax	.\pcache.c	/^  int nMax;                           \/* Configured cache size *\/$/;"	m	struct:PCache	file:
nMax	.\pcache1.c	/^  unsigned int nMax;                  \/* Configured "cache_size" value *\/$/;"	m	struct:PCache1	file:
nMaxArg	.\sqliteInt.h	/^  int nMaxArg;         \/* Max args passed to user function by sub-program *\/$/;"	m	struct:Parse
nMaxPage	.\pcache1.c	/^  int nMaxPage;                       \/* Sum of nMaxPage for purgeable caches *\/$/;"	m	struct:PCacheGlobal	file:
nMaxPendingData	.\fts3Int.h	/^  int nMaxPendingData;$/;"	m	struct:Fts3Table
nMem	.\sqliteInt.h	/^  int nMem;            \/* Number of memory cells used so far *\/$/;"	m	struct:Parse
nMem	.\sqliteInt.h	/^  int nMem;         \/* Number of registers allocated *\/$/;"	m	struct:SelectDest
nMem	.\vdbe.h	/^  int nMem;                     \/* Number of memory cells required *\/$/;"	m	struct:SubProgram
nMem	.\vdbeInt.h	/^  int nMem;               \/* Number of entries in aMem *\/$/;"	m	struct:VdbeFrame
nMem	.\vdbeInt.h	/^  int nMem;               \/* Number of memory locations currently allocated *\/$/;"	m	struct:Vdbe
nMin	.\pcache1.c	/^  unsigned int nMin;                  \/* Minimum number of pages reserved *\/$/;"	m	struct:PCache1	file:
nMinPage	.\pcache1.c	/^  int nMinPage;                       \/* Sum of nMinPage for purgeable caches *\/$/;"	m	struct:PCacheGlobal	file:
nMiss	.\pager.c	/^  int nHit, nMiss;            \/* Cache hits and missing *\/$/;"	m	struct:Pager	file:
nModuleArg	.\sqliteInt.h	/^  int nModuleArg;      \/* Number of arguments to the module *\/$/;"	m	struct:Table
nMutex	.\btree.h	/^  int nMutex;$/;"	m	struct:BtreeMutexArray
nName	.\os_unix.c	/^  int nName;                    \/* Length of the zCanonicalName[] string *\/$/;"	m	struct:vxworksFileId	file:
nNear	.\fts3Int.h	/^  int nNear;                 \/* Valid if eType==FTSQUERY_NEAR *\/$/;"	m	struct:Fts3Expr
nNest	.\fts3_expr.c	/^  int nNest;                          \/* Number of nested brackets *\/$/;"	m	struct:ParseContext	file:
nNode	.\fts3_write.c	/^  int nNode;                      \/* Size of buffer at aNode (or 0) *\/$/;"	m	struct:Fts3SegReader	file:
nNodeSize	.\fts3Int.h	/^  int nNodeSize;                  \/* Soft limit for node size *\/$/;"	m	struct:Fts3Table
nOp	.\vdbe.h	/^  int nOp;                      \/* Elements in aOp[] *\/$/;"	m	struct:SubProgram
nOp	.\vdbeInt.h	/^  int nOp;                \/* Number of instructions in the program *\/$/;"	m	struct:Vdbe
nOp	.\vdbeInt.h	/^  int nOp;                \/* Size of aOp array *\/$/;"	m	struct:VdbeFrame
nOpAlloc	.\vdbeInt.h	/^  int nOpAlloc;           \/* Number of slots allocated for aOp[] *\/$/;"	m	struct:Vdbe
nOrderBy	.\sqlite3.h	/^  int nOrderBy;              \/* Number of terms in the ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info
nOrig	.\pager.c	/^  Pgno nOrig;                  \/* Original number of pages in file *\/$/;"	m	struct:PagerSavepoint	file:
nOut	.\sqliteInt.h	/^  int nOut;               \/* Number of buffers currently checked out *\/$/;"	m	struct:Lookaside
nOverflow	.\btreeInt.h	/^  u8 nOverflow;        \/* Number of overflow cell bodies in aCell[] *\/$/;"	m	struct:MemPage
nPage	.\btreeInt.h	/^  Pgno nPage;       \/* Number of pages in the database *\/$/;"	m	struct:IntegrityCk
nPage	.\btreeInt.h	/^  u32 nPage;            \/* Number of pages in the database *\/$/;"	m	struct:BtShared
nPage	.\pcache1.c	/^  unsigned int nPage;                 \/* Total number of pages in apHash *\/$/;"	m	struct:PCache1	file:
nPage	.\sqliteInt.h	/^  int nPage;                        \/* Number of pages in pPage[] *\/$/;"	m	struct:Sqlite3Config
nPage	.\wal.c	/^  u32 nPage;                      \/* Size of database in pages *\/$/;"	m	struct:WalIndexHdr	file:
nPageFree	.\malloc.c	/^  u32 nPageFree;$/;"	m	struct:Mem0Global	file:
nPagecount	.\backup.c	/^  Pgno nPagecount;         \/* Total number of pages to copy *\/$/;"	m	struct:sqlite3_backup	file:
nParm	.\tclsqlite.c	/^  int nParm;               \/* Size of apParm array *\/$/;"	m	struct:SqlPreparedStmt	file:
nPayload	.\btreeInt.h	/^  u32 nPayload;  \/* Total amount of payload *\/$/;"	m	struct:CellInfo
nPendingData	.\fts3Int.h	/^  int nPendingData;$/;"	m	struct:Fts3Table
nPhrase	.\fts3_snippet.c	/^  int nPhrase;                    \/* Number of phrases in query *\/$/;"	m	struct:SnippetIter	file:
nPhrase	.\fts3_snippet.c	/^  int nPhrase;                    \/* Number of phrases seen so far *\/$/;"	m	struct:LoadDoclistCtx	file:
nPool	.\mem3.c	/^  u32 nPool;$/;"	m	struct:Mem3Global	file:
nProgressOps	.\sqliteInt.h	/^  int nProgressOps;             \/* Number of opcodes for progress callback *\/$/;"	m	struct:sqlite3
nQPlan	.\where.c	/^static int nQPlan = 0;              \/* Next free slow in _query_plan[] *\/$/;"	v	file:
nQueryLoop	.\sqliteInt.h	/^  double nQueryLoop;   \/* Estimated number of iterations of a query *\/$/;"	m	struct:Parse
nRangeReg	.\sqliteInt.h	/^  int nRangeReg;       \/* Size of the temporary register block *\/$/;"	m	struct:Parse
nRead	.\pager.c	/^  int nRead, nWrite;          \/* Database pages read\/written *\/$/;"	m	struct:Pager	file:
nReaders	.\os_win.c	/^  int nReaders;       \/* Number of reader locks obtained *\/$/;"	m	struct:winceLock	file:
nRec	.\pager.c	/^  int nRec;                   \/* Pages journalled since last j-header written *\/$/;"	m	struct:Pager	file:
nRecyclable	.\pcache1.c	/^  unsigned int nRecyclable;           \/* Number of pages in the LRU list *\/$/;"	m	struct:PCache1	file:
nRef	.\btreeInt.h	/^  int nRef;             \/* Number of references to this structure *\/$/;"	m	struct:BtShared
nRef	.\mutex_os2.c	/^  int  nRef;        \/* Number of references *\/$/;"	m	struct:sqlite3_mutex	file:
nRef	.\mutex_unix.c	/^  volatile int nRef;         \/* Number of entrances *\/$/;"	m	struct:sqlite3_mutex	file:
nRef	.\mutex_w32.c	/^  volatile int nRef;         \/* Number of enterances *\/$/;"	m	struct:sqlite3_mutex	file:
nRef	.\os_unix.c	/^  int nRef;                       \/* Number of pointers to this structure *\/$/;"	m	struct:unixInodeInfo	file:
nRef	.\os_unix.c	/^  int nRef;                     \/* Number of references to this one *\/$/;"	m	struct:vxworksFileId	file:
nRef	.\os_unix.c	/^  int nRef;                  \/* Number of unixShm objects pointing to this *\/$/;"	m	struct:unixShmNode	file:
nRef	.\os_win.c	/^  int nRef;                  \/* Number of winShm objects pointing to this *\/$/;"	m	struct:winShmNode	file:
nRef	.\pcache.c	/^  int nRef;                           \/* Number of referenced pages *\/$/;"	m	struct:PCache	file:
nRef	.\pcache.h	/^  i16 nRef;                      \/* Number of users of this page *\/$/;"	m	struct:PgHdr
nRef	.\rtree.c	/^  int nRef;$/;"	m	struct:RtreeNode	file:
nRef	.\sqlite3.h	/^  int nRef;                       \/* NO LONGER USED *\/$/;"	m	struct:sqlite3_vtab
nRef	.\sqliteInt.h	/^  int nRef;                 \/* Number of pointers to this structure *\/$/;"	m	struct:VTable
nRef	.\sqliteInt.h	/^  int nRef;            \/* Number of names resolved by this context *\/$/;"	m	struct:NameContext
nRef	.\sqliteInt.h	/^  u16 nRef;            \/* Number of pointers to this Table *\/$/;"	m	struct:Table
nRefInitMutex	.\sqliteInt.h	/^  int nRefInitMutex;                \/* Number of users of pInitMutex *\/$/;"	m	struct:Sqlite3Config
nRegion	.\os_unix.c	/^  int nRegion;               \/* Size of array apRegion *\/$/;"	m	struct:unixShmNode	file:
nRegion	.\os_win.c	/^  int nRegion;               \/* Size of array apRegion *\/$/;"	m	struct:winShmNode	file:
nRemaining	.\backup.c	/^  Pgno nRemaining;         \/* Number of pages left to copy *\/$/;"	m	struct:sqlite3_backup	file:
nResColumn	.\vdbeInt.h	/^  u16 nResColumn;         \/* Number of columns in one row of the result set *\/$/;"	m	struct:Vdbe
nReserve	.\pager.c	/^  i16 nReserve;               \/* Number of unused bytes at end of each page *\/$/;"	m	struct:Pager	file:
nRow	.\table.c	/^  int nRow;          \/* Number of rows in the result *\/$/;"	m	struct:TabResult	file:
nRow	.\where.c	/^  double nRow;       \/* Estimated number of output rows *\/$/;"	m	struct:WhereCost	file:
nSavepoint	.\pager.c	/^  int nSavepoint;             \/* Number of elements in aSavepoint[] *\/$/;"	m	struct:Pager	file:
nSavepoint	.\sqliteInt.h	/^  int nSavepoint;               \/* Number of non-transaction savepoints *\/$/;"	m	struct:sqlite3
nScratch	.\sqliteInt.h	/^  int nScratch;                     \/* Number of scratch buffers *\/$/;"	m	struct:Sqlite3Config
nScratchFree	.\malloc.c	/^  u32 nScratchFree;$/;"	m	struct:Mem0Global	file:
nSegment	.\wal.c	/^  int nSegment;                   \/* Size of the aSegment[] array *\/$/;"	m	struct:WalIterator	file:
nSet	.\bitvec.c	/^  u32 nSet;       \/* Number of bits that are set - only valid for aHash$/;"	m	struct:Bitvec	file:
nSet	.\sqliteInt.h	/^  int nSet;            \/* Number of sets used so far *\/$/;"	m	struct:Parse
nShared	.\os_unix.c	/^  int nShared;                    \/* Number of SHARED locks held *\/$/;"	m	struct:unixInodeInfo	file:
nSize	.\btreeInt.h	/^  u16 nSize;     \/* Size of the cell content on the main b-tree page *\/$/;"	m	struct:CellInfo
nSize	.\fts3_write.c	/^  int nSize;                      \/* Size of allocation at aData *\/$/;"	m	struct:SegmentWriter	file:
nSlot	.\where.c	/^  int nSlot;               \/* Number of entries in a[] *\/$/;"	m	struct:WhereClause	file:
nSnippet	.\fts3_snippet.c	/^  int nSnippet;                   \/* Requested snippet length (in tokens) *\/$/;"	m	struct:SnippetIter	file:
nSort	.\tclsqlite.c	/^  int nStep, nSort, nIndex;  \/* Statistics for most recent operation *\/$/;"	m	struct:SqliteDb	file:
nSortingColumn	.\sqliteInt.h	/^  int nSortingColumn;     \/* Number of columns in the sorting index *\/$/;"	m	struct:AggInfo
nSpace	.\fts3_write.c	/^  int nSpace;$/;"	m	struct:PendingList	file:
nSql	.\tclsqlite.c	/^  int nSql;                \/* chars in zSql[] *\/$/;"	m	struct:SqlPreparedStmt	file:
nSrc	.\sqliteInt.h	/^  i16 nSrc;        \/* Number of tables or subqueries in the FROM clause *\/$/;"	m	struct:SrcList
nStatement	.\sqliteInt.h	/^  int nStatement;               \/* Number of nested statement-transactions  *\/$/;"	m	struct:sqlite3
nStep	.\tclsqlite.c	/^  int nStep, nSort, nIndex;  \/* Statistics for most recent operation *\/$/;"	m	struct:SqliteDb	file:
nStmt	.\tclsqlite.c	/^  int nStmt;                 \/* Number of statements in stmtList *\/$/;"	m	struct:SqliteDb	file:
nStmtDefCons	.\vdbeInt.h	/^  i64 nStmtDefCons;       \/* Number of def. constraints when stmt started *\/$/;"	m	struct:Vdbe
nSub	.\vdbeaux.c	/^  int nSub;                  \/* Number of entries in apSub *\/$/;"	m	struct:VdbeOpIter	file:
nSubRec	.\pager.c	/^  u32 nSubRec;                \/* Number of records written to sub-journal *\/$/;"	m	struct:Pager	file:
nTab	.\sqliteInt.h	/^  int nTab;            \/* Number of previously allocated VDBE cursors *\/$/;"	m	struct:Parse
nTable	.\sqliteInt.h	/^  int nTable;                   \/* Number of tables in the database *\/$/;"	m	struct:sqlite3
nTableLock	.\sqliteInt.h	/^  int nTableLock;        \/* Number of locks in aTableLock *\/$/;"	m	struct:Parse
nTempInUse	.\sqliteInt.h	/^  u8 nTempInUse;       \/* Number of aTempReg[] currently checked out *\/$/;"	m	struct:Parse
nTempReg	.\sqliteInt.h	/^  u8 nTempReg;         \/* Number of temporary registers in aTempReg[] *\/$/;"	m	struct:Parse
nTerm	.\fts3Int.h	/^  int nTerm;$/;"	m	struct:Fts3SegFilter
nTerm	.\fts3_write.c	/^  int nTerm;                      \/* Number of bytes in current term *\/$/;"	m	struct:Fts3SegReader	file:
nTerm	.\fts3_write.c	/^  int nTerm;                      \/* Number of bytes in zTerm *\/$/;"	m	struct:SegmentNode	file:
nTerm	.\fts3_write.c	/^  int nTerm;                      \/* Number of bytes in zTerm *\/$/;"	m	struct:SegmentWriter	file:
nTerm	.\where.c	/^  int nTerm;               \/* Number of terms *\/$/;"	m	struct:WhereClause	file:
nTermAlloc	.\fts3_write.c	/^  int nTermAlloc;                 \/* Allocated size of zTerm buffer *\/$/;"	m	struct:Fts3SegReader	file:
nTitle	.\mem2.c	/^  int nTitle;        \/* Bytes of zTitle to save.  Includes '\\0' and padding *\/$/;"	m	struct:__anon2	file:
nTitle	.\mem2.c	/^  u8 nTitle;                          \/* Bytes of title; includes '\\0' *\/$/;"	m	struct:MemBlockHdr	file:
nToken	.\fts3Int.h	/^  int nToken;                \/* Number of tokens in the phrase *\/$/;"	m	struct:Fts3Phrase
nToken	.\fts3_snippet.c	/^  int nToken;                     \/* Number of tokens in phrase *\/$/;"	m	struct:SnippetPhrase	file:
nToken	.\fts3_snippet.c	/^  int nToken;                     \/* Number of tokens seen so far *\/$/;"	m	struct:LoadDoclistCtx	file:
nTokenAllocated	.\fts3_tokenizer1.c	/^  int nTokenAllocated;         \/* space allocated to zToken buffer *\/$/;"	m	struct:simple_tokenizer_cursor	file:
nTotalChange	.\sqliteInt.h	/^  int nTotalChange;             \/* Value returned by sqlite3_total_changes() *\/$/;"	m	struct:sqlite3
nTransaction	.\btreeInt.h	/^  int nTransaction;     \/* Number of open transactions (read + write) *\/$/;"	m	struct:BtShared
nTransaction	.\tclsqlite.c	/^  int nTransaction;          \/* Number of nested [transaction] methods *\/$/;"	m	struct:SqliteDb	file:
nVTrans	.\sqliteInt.h	/^  int nVTrans;                  \/* Allocated size of aVTrans *\/$/;"	m	struct:sqlite3
nVar	.\sqliteInt.h	/^  int nVar;            \/* Number of '?' variables seen in the SQL so far *\/$/;"	m	struct:Parse
nVar	.\vdbeInt.h	/^  ynVar nVar;             \/* Number of entries in aVar[] *\/$/;"	m	struct:Vdbe
nVarExpr	.\sqliteInt.h	/^  int nVarExpr;        \/* Number of used slots in apVarExpr[] *\/$/;"	m	struct:Parse
nVarExprAlloc	.\sqliteInt.h	/^  int nVarExprAlloc;   \/* Number of allocated slots in apVarExpr[] *\/$/;"	m	struct:Parse
nVtabLock	.\sqliteInt.h	/^  int nVtabLock;             \/* Number of virtual tables to lock *\/$/;"	m	struct:Parse
nWiData	.\wal.c	/^  int nWiData;               \/* Size of array apWiData *\/$/;"	m	struct:Wal	file:
nWrite	.\pager.c	/^  int nRead, nWrite;          \/* Database pages read\/written *\/$/;"	m	struct:Pager	file:
nZero	.\vdbeInt.h	/^    int nZero;          \/* Used when bit MEM_Zero is set in flags *\/$/;"	m	union:Mem::__anon19
nameClash	.\sqliteInt.h	/^  u8 nameClash;        \/* A permanent table name clashes with temp table name *\/$/;"	m	struct:Parse
needCsvQuote	.\shell.c	/^static const char needCsvQuote[] = {$/;"	v	file:
needToFreeIdxStr	.\sqlite3.h	/^  int needToFreeIdxStr;      \/* Free idxStr using sqlite3_free() if true *\/$/;"	m	struct:sqlite3_index_info
nested	.\sqliteInt.h	/^  u8 nested;           \/* Number of nested calls to the parser\/code generator *\/$/;"	m	struct:Parse
newDatabase	.\btree.c	/^static int newDatabase(BtShared *pBt){$/;"	f	file:
newRowid	.\rtree.c	/^static int newRowid(Rtree *pRtree, i64 *piRowid){$/;"	f	file:
newTnum	.\sqliteInt.h	/^    int newTnum;                \/* Rootpage of table being initialized *\/$/;"	m	struct:sqlite3::sqlite3InitInfo
newmask	.\sqliteInt.h	/^  u32 newmask;         \/* Mask of new.* columns referenced *\/$/;"	m	struct:Parse
next	.\fts3_hash.h	/^  Fts3HashElem *next, *prev; \/* Next and previous elements in the table *\/$/;"	m	struct:Fts3HashElem
next	.\hash.h	/^  HashElem *next, *prev;       \/* Next and previous elements in the table *\/$/;"	m	struct:HashElem
next	.\mem3.c	/^      u32 next;       \/* Index in mem3.aPool[] of next free chunk *\/$/;"	m	struct:Mem3Block::__anon3::__anon5	file:
next	.\mem5.c	/^  int next;       \/* Index of next free chunk *\/$/;"	m	struct:Mem5Link	file:
nextAutovac	.\sqliteInt.h	/^  signed char nextAutovac;      \/* Autovac setting after VACUUM if >=0 *\/$/;"	m	struct:sqlite3
nextPagesize	.\sqliteInt.h	/^  int nextPagesize;             \/* Pagesize after VACUUM if >0 *\/$/;"	m	struct:sqlite3
nextShmId	.\os_unix.c	/^  u8 nextShmId;              \/* Next available unixShm.id value *\/$/;"	m	struct:unixShmNode	file:
nextShmId	.\os_win.c	/^  u8 nextShmId;              \/* Next available winShm.id value *\/$/;"	m	struct:winShmNode	file:
next_stmt	.\sqlite3ext.h	/^  sqlite3_stmt *(*next_stmt)(sqlite3*,sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines
nfsUnlock	.\os_unix.c	/^static int nfsUnlock(sqlite3_file *id, int eFileLock){$/;"	f	file:
noCase	.\func.c	/^  u8 noCase;$/;"	m	struct:compareInfo	file:
noReadlock	.\pager.c	/^  u8 noReadlock;              \/* Do not bother to obtain readlocks *\/$/;"	m	struct:Pager	file:
noSync	.\pager.c	/^  u8 noSync;                  \/* Do not sync the journal if true *\/$/;"	m	struct:Pager	file:
nocaseCollatingFunc	.\main.c	/^static int nocaseCollatingFunc($/;"	f	file:
nodeAcquire	.\rtree.c	/^nodeAcquire($/;"	f	file:
nodeDeleteCell	.\rtree.c	/^static void nodeDeleteCell(Rtree *pRtree, RtreeNode *pNode, int iCell){$/;"	f	file:
nodeGetCell	.\rtree.c	/^static void nodeGetCell($/;"	f	file:
nodeGetCoord	.\rtree.c	/^static void nodeGetCoord($/;"	f	file:
nodeGetRowid	.\rtree.c	/^static i64 nodeGetRowid($/;"	f	file:
nodeHash	.\rtree.c	/^static int nodeHash(i64 iNode){$/;"	f	file:
nodeHashDelete	.\rtree.c	/^static void nodeHashDelete(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
nodeHashInsert	.\rtree.c	/^static void nodeHashInsert(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
nodeHashLookup	.\rtree.c	/^static RtreeNode *nodeHashLookup(Rtree *pRtree, i64 iNode){$/;"	f	file:
nodeInsertCell	.\rtree.c	/^nodeInsertCell($/;"	f	file:
nodeNew	.\rtree.c	/^static RtreeNode *nodeNew(Rtree *pRtree, RtreeNode *pParent, int zero){$/;"	f	file:
nodeOverwriteCell	.\rtree.c	/^static void nodeOverwriteCell($/;"	f	file:
nodeParentIndex	.\rtree.c	/^static int nodeParentIndex(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
nodeReference	.\rtree.c	/^static void nodeReference(RtreeNode *p){$/;"	f	file:
nodeRelease	.\rtree.c	/^nodeRelease(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
nodeRowidIndex	.\rtree.c	/^static int nodeRowidIndex(Rtree *pRtree, RtreeNode *pNode, i64 iRowid){$/;"	f	file:
nodeWrite	.\rtree.c	/^nodeWrite(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
nodeZero	.\rtree.c	/^static void nodeZero(Rtree *pRtree, RtreeNode *p){$/;"	f	file:
nolockCheckReservedLock	.\os_unix.c	/^static int nolockCheckReservedLock(sqlite3_file *NotUsed, int *pResOut){$/;"	f	file:
nolockClose	.\os_unix.c	/^static int nolockClose(sqlite3_file *id) {$/;"	f	file:
nolockLock	.\os_unix.c	/^static int nolockLock(sqlite3_file *NotUsed, int NotUsed2){$/;"	f	file:
nolockUnlock	.\os_unix.c	/^static int nolockUnlock(sqlite3_file *NotUsed, int NotUsed2){$/;"	f	file:
noopMutexAlloc	.\mutex_noop.c	/^static sqlite3_mutex *noopMutexAlloc(int id){ $/;"	f	file:
noopMutexEnd	.\mutex_noop.c	/^static int noopMutexEnd(void){ return SQLITE_OK; }$/;"	f	file:
noopMutexEnter	.\mutex_noop.c	/^static void noopMutexEnter(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }$/;"	f	file:
noopMutexFree	.\mutex_noop.c	/^static void noopMutexFree(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }$/;"	f	file:
noopMutexInit	.\mutex_noop.c	/^static int noopMutexInit(void){ return SQLITE_OK; }$/;"	f	file:
noopMutexLeave	.\mutex_noop.c	/^static void noopMutexLeave(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }$/;"	f	file:
noopMutexTry	.\mutex_noop.c	/^static int noopMutexTry(sqlite3_mutex *p){$/;"	f	file:
not	.\parse.c	/^  int not;         \/* True if the NOT keyword is present *\/$/;"	m	struct:LikeOp	file:
notIndexed	.\sqliteInt.h	/^    u8 notIndexed;    \/* True if there is a NOT INDEXED clause *\/$/;"	m	struct:SrcList::SrcList_item
notNull	.\sqliteInt.h	/^  u8 notNull;      \/* True if there is a NOT NULL constraint *\/$/;"	m	struct:Column
notUsed1	.\sqliteInt.h	/^    double notUsed1;            \/* Spacer *\/$/;"	m	union:sqlite3::__anon9
nowValue	.\status.c	/^  int nowValue[10];         \/* Current value *\/$/;"	m	struct:sqlite3StatType	file:
nrhs	.\parse.c	/^  unsigned char nrhs;     \/* Number of right-hand side symbols in the rule *\/$/;"	m	struct:__anon8	file:
nullRow	.\vdbeInt.h	/^  Bool nullRow;         \/* True if pointing to a row with no data *\/$/;"	m	struct:VdbeCursor
nullifFunc	.\func.c	/^static void nullifFunc($/;"	f	file:
nullvalue	.\shell.c	/^  char nullvalue[20];    \/* The text to print when a NULL comes back from$/;"	m	struct:callback_data	file:
offset	.\os_unix.c	/^  unsigned long long offset;        \/* offset to first byte to lock *\/$/;"	m	struct:ByteRangeLockPB2	file:
offsetof	.\sqliteInt.h	368;"	d
okOnePass	.\sqliteInt.h	/^  u8 okOnePass;        \/* Ok to use one-pass algorithm for UPDATE or DELETE *\/$/;"	m	struct:WhereInfo
okVar	.\vdbeInt.h	/^  u8 okVar;               \/* True if azVar[] has been initialized *\/$/;"	m	struct:Vdbe
oldLockingContext	.\os_unix.c	/^  void *oldLockingContext;     \/* Original lockingcontext to restore on close *\/$/;"	m	struct:proxyLockingContext	file:
oldmask	.\sqliteInt.h	/^  u32 oldmask;         \/* Mask of old.* columns referenced *\/$/;"	m	struct:Parse
omit	.\sqlite3.h	/^    unsigned char omit;      \/* Do not code a test for this constraint *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage
onError	.\sqliteInt.h	/^  u8 onError;      \/* OE_Abort, OE_Ignore, OE_Replace, or OE_None *\/$/;"	m	struct:Index
onErrorText	.\trigger.c	/^static const char *onErrorText(int onError){$/;"	f	file:
one_input_line	.\shell.c	/^static char *one_input_line(const char *zPrior, FILE *in){$/;"	f	file:
op	.\rtree.c	/^  int op;                           \/* Constraining operation *\/$/;"	m	struct:RtreeConstraint	file:
op	.\sqlite3.h	/^     unsigned char op;         \/* Constraint operator *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint
op	.\sqliteInt.h	/^  u8 op, p5;            \/* Opcode and P5 of the opcode that ends the loop *\/$/;"	m	struct:WhereLevel
op	.\sqliteInt.h	/^  u8 op;                  \/* One of TK_DELETE, TK_UPDATE, TK_INSERT         *\/$/;"	m	struct:Trigger
op	.\sqliteInt.h	/^  u8 op;                 \/* One of: TK_UNION TK_ALL TK_INTERSECT TK_EXCEPT *\/$/;"	m	struct:Select
op	.\sqliteInt.h	/^  u8 op;                 \/* Operation performed by this node *\/$/;"	m	struct:Expr
op	.\sqliteInt.h	/^  u8 op;               \/* One of TK_DELETE, TK_UPDATE, TK_INSERT, TK_SELECT *\/$/;"	m	struct:TriggerStep
op	.\where.c	/^  u8 op;                   \/* Split operator.  TK_AND or TK_OR *\/$/;"	m	struct:WhereClause	file:
op2	.\sqliteInt.h	/^  u8 op2;                \/* If a TK_REGISTER, the original value of Expr.op *\/$/;"	m	struct:Expr
opIterNext	.\vdbeaux.c	/^static Op *opIterNext(VdbeOpIter *p){$/;"	f	file:
opPrecedence	.\fts3_expr.c	/^static int opPrecedence(Fts3Expr *p){$/;"	f	file:
opcode	.\vdbe.h	/^  u8 opcode;          \/* What operation to perform *\/$/;"	m	struct:VdbeOp
opcode	.\vdbe.h	/^  u8 opcode;          \/* What operation to perform *\/$/;"	m	struct:VdbeOpList
open	.\sqlite3ext.h	/^  int  (*open)(const char*,sqlite3**);$/;"	m	struct:sqlite3_api_routines
open16	.\sqlite3ext.h	/^  int  (*open16)(const void*,sqlite3**);$/;"	m	struct:sqlite3_api_routines
openDatabase	.\main.c	/^static int openDatabase($/;"	f	file:
openDirectory	.\os_unix.c	/^static int openDirectory(const char *zFilename, int *pFd){$/;"	f	file:
openFlags	.\os_unix.c	/^  int openFlags;                      \/* The flags specified at open() *\/$/;"	m	struct:unixFile	file:
openFlags	.\sqliteInt.h	/^  int openFlags;                \/* Flags passed to sqlite3_vfs.xOpen() *\/$/;"	m	struct:sqlite3
openStatTable	.\analyze.c	/^static void openStatTable($/;"	f	file:
openSubJournal	.\pager.c	/^static int openSubJournal(Pager *pPager){$/;"	f	file:
open_db	.\shell.c	/^static void open_db(struct callback_data *p){$/;"	f	file:
open_v2	.\sqlite3ext.h	/^  int (*open_v2)(const char*,sqlite3**,int,const char*);$/;"	m	struct:sqlite3_api_routines
operatorMask	.\where.c	/^static u16 operatorMask(int op){$/;"	f	file:
opflags	.\vdbe.h	/^  u8 opflags;         \/* Mask of the OPFLG_* flags in opcodes.h *\/$/;"	m	struct:VdbeOp
orconf	.\sqliteInt.h	/^  int orconf;             \/* Default ON CONFLICT policy *\/$/;"	m	struct:TriggerPrg
orconf	.\sqliteInt.h	/^  u8 orconf;           \/* OE_Rollback etc. *\/$/;"	m	struct:TriggerStep
orderByConsumed	.\sqlite3.h	/^  int orderByConsumed;       \/* True if output is already ordered *\/$/;"	m	struct:sqlite3_index_info
orphanTrigger	.\sqliteInt.h	/^    u8 orphanTrigger;           \/* Last statement is orphaned TEMP trigger *\/$/;"	m	struct:sqlite3::sqlite3InitInfo
os2Access	.\os_os2.c	/^static int os2Access($/;"	f	file:
os2CheckReservedLock	.\os_os2.c	/^static int os2CheckReservedLock( sqlite3_file *id, int *pOut ){$/;"	f	file:
os2Close	.\os_os2.c	/^static int os2Close( sqlite3_file *id ){$/;"	f	file:
os2CurrentTime	.\os_os2.c	/^int os2CurrentTime( sqlite3_vfs *pVfs, double *prNow ){$/;"	f
os2Delete	.\os_os2.c	/^static int os2Delete($/;"	f	file:
os2DeviceCharacteristics	.\os_os2.c	/^static int os2DeviceCharacteristics(sqlite3_file *id){$/;"	f	file:
os2DlClose	.\os_os2.c	/^static void os2DlClose(sqlite3_vfs *pVfs, void *pHandle){$/;"	f	file:
os2DlClose	.\os_os2.c	964;"	d	file:
os2DlError	.\os_os2.c	/^static void os2DlError(sqlite3_vfs *pVfs, int nBuf, char *zBufOut){$/;"	f	file:
os2DlError	.\os_os2.c	962;"	d	file:
os2DlOpen	.\os_os2.c	/^static void *os2DlOpen(sqlite3_vfs *pVfs, const char *zFilename){$/;"	f	file:
os2DlOpen	.\os_os2.c	961;"	d	file:
os2DlSym	.\os_os2.c	/^static void *os2DlSym(sqlite3_vfs *pVfs, void *pHandle, const char *zSymbol){$/;"	f	file:
os2DlSym	.\os_os2.c	963;"	d	file:
os2File	.\os_os2.c	/^struct os2File {$/;"	s	file:
os2File	.\os_os2.c	/^typedef struct os2File os2File;$/;"	t	typeref:struct:os2File	file:
os2FileControl	.\os_os2.c	/^static int os2FileControl(sqlite3_file *id, int op, void *pArg){$/;"	f	file:
os2FileSize	.\os_os2.c	/^static int os2FileSize( sqlite3_file *id, sqlite3_int64 *pSize ){$/;"	f	file:
os2FullPathname	.\os_os2.c	/^static int os2FullPathname($/;"	f	file:
os2GetLastError	.\os_os2.c	/^static int os2GetLastError(sqlite3_vfs *pVfs, int nBuf, char *zBuf){$/;"	f	file:
os2IoMethod	.\os_os2.c	/^static const sqlite3_io_methods os2IoMethod = {$/;"	v	file:
os2Lock	.\os_os2.c	/^static int os2Lock( sqlite3_file *id, int locktype ){$/;"	f	file:
os2MutexAlloc	.\mutex_os2.c	/^static sqlite3_mutex *os2MutexAlloc(int iType){$/;"	f	file:
os2MutexEnd	.\mutex_os2.c	/^static int os2MutexEnd(void){ return SQLITE_OK; }$/;"	f	file:
os2MutexEnter	.\mutex_os2.c	/^static void os2MutexEnter(sqlite3_mutex *p){$/;"	f	file:
os2MutexFree	.\mutex_os2.c	/^static void os2MutexFree(sqlite3_mutex *p){$/;"	f	file:
os2MutexHeld	.\mutex_os2.c	/^static int os2MutexHeld(sqlite3_mutex *p){$/;"	f	file:
os2MutexInit	.\mutex_os2.c	/^static int os2MutexInit(void){ return SQLITE_OK; }$/;"	f	file:
os2MutexLeave	.\mutex_os2.c	/^static void os2MutexLeave(sqlite3_mutex *p){$/;"	f	file:
os2MutexNotheld	.\mutex_os2.c	/^static int os2MutexNotheld(sqlite3_mutex *p){$/;"	f	file:
os2MutexTry	.\mutex_os2.c	/^static int os2MutexTry(sqlite3_mutex *p){$/;"	f	file:
os2Open	.\os_os2.c	/^static int os2Open($/;"	f	file:
os2Randomness	.\os_os2.c	/^static int os2Randomness(sqlite3_vfs *pVfs, int nBuf, char *zBuf ){$/;"	f	file:
os2Read	.\os_os2.c	/^static int os2Read($/;"	f	file:
os2SectorSize	.\os_os2.c	/^static int os2SectorSize(sqlite3_file *id){$/;"	f	file:
os2Sleep	.\os_os2.c	/^static int os2Sleep( sqlite3_vfs *pVfs, int microsec ){$/;"	f	file:
os2Sync	.\os_os2.c	/^static int os2Sync( sqlite3_file *id, int flags ){$/;"	f	file:
os2Truncate	.\os_os2.c	/^static int os2Truncate( sqlite3_file *id, i64 nByte ){$/;"	f	file:
os2Unlock	.\os_os2.c	/^static int os2Unlock( sqlite3_file *id, int locktype ){$/;"	f	file:
os2Write	.\os_os2.c	/^static int os2Write($/;"	f	file:
out	.\shell.c	/^  FILE *out;             \/* Write results here *\/$/;"	m	struct:callback_data	file:
outfile	.\shell.c	/^  char outfile[FILENAME_MAX]; \/* Filename for *out *\/$/;"	m	struct:callback_data	file:
output_c_string	.\shell.c	/^static void output_c_string(FILE *out, const char *z){$/;"	f	file:
output_csv	.\shell.c	/^static void output_csv(struct callback_data *p, const char *z, int bSep){$/;"	f	file:
output_hex_blob	.\shell.c	/^static void output_hex_blob(FILE *out, const void *pBlob, int nBlob){$/;"	f	file:
output_html_string	.\shell.c	/^static void output_html_string(FILE *out, const char *z){$/;"	f	file:
output_quoted_string	.\shell.c	/^static void output_quoted_string(FILE *out, const char *z){$/;"	f	file:
overflow	.\func.c	/^  u8 overflow;      \/* True if integer overflow seen *\/$/;"	m	struct:SumCtx	file:
overload_function	.\sqlite3ext.h	/^  int (*overload_function)(sqlite3*, const char *zFuncName, int nArg);$/;"	m	struct:sqlite3_api_routines
owner	.\mutex_os2.c	/^  TID  owner;       \/* Thread holding this mutex *\/$/;"	m	struct:sqlite3_mutex	file:
owner	.\mutex_unix.c	/^  volatile pthread_t owner;  \/* Thread that is within this mutex *\/$/;"	m	struct:sqlite3_mutex	file:
owner	.\mutex_w32.c	/^  volatile DWORD owner;      \/* Thread holding this mutex *\/$/;"	m	struct:sqlite3_mutex	file:
p	.\vdbe.h	/^    void *p;               \/* Generic pointer *\/$/;"	m	union:VdbeOp::__anon18
p1	.\sqliteInt.h	/^  int p1, p2;           \/* Operands of the opcode used to ends the loop *\/$/;"	m	struct:WhereLevel
p1	.\vdbe.h	/^  int p1;             \/* First operand *\/$/;"	m	struct:VdbeOp
p1	.\vdbe.h	/^  signed char p1;     \/* First operand *\/$/;"	m	struct:VdbeOpList
p2	.\sqliteInt.h	/^  int p1, p2;           \/* Operands of the opcode used to ends the loop *\/$/;"	m	struct:WhereLevel
p2	.\vdbe.h	/^  int p2;             \/* Second parameter (often the jump destination) *\/$/;"	m	struct:VdbeOp
p2	.\vdbe.h	/^  signed char p2;     \/* Second parameter (often the jump destination) *\/$/;"	m	struct:VdbeOpList
p3	.\vdbe.h	/^  int p3;             \/* The third parameter *\/$/;"	m	struct:VdbeOp
p3	.\vdbe.h	/^  signed char p3;     \/* Third parameter *\/$/;"	m	struct:VdbeOpList
p4	.\vdbe.h	/^  } p4;$/;"	m	struct:VdbeOp	typeref:union:VdbeOp::__anon18
p4type	.\vdbe.h	/^  signed char p4type; \/* One of the P4_xxx constants for p4 *\/$/;"	m	struct:VdbeOp
p5	.\sqliteInt.h	/^  u8 op, p5;            \/* Opcode and P5 of the opcode that ends the loop *\/$/;"	m	struct:WhereLevel
p5	.\vdbe.h	/^  u8 p5;              \/* Fifth parameter is an unsigned character *\/$/;"	m	struct:VdbeOp
pAggInfo	.\sqliteInt.h	/^  AggInfo *pAggInfo;     \/* Used by TK_AGG_COLUMN and TK_AGG_FUNCTION *\/$/;"	m	struct:Expr
pAggInfo	.\sqliteInt.h	/^  AggInfo *pAggInfo;   \/* Information about aggregates at this level *\/$/;"	m	struct:NameContext
pAinc	.\sqliteInt.h	/^  AutoincInfo *pAinc;  \/* Information about AUTOINCREMENT counters *\/$/;"	m	struct:Parse
pAndInfo	.\where.c	/^    WhereAndInfo *pAndInfo; \/* Extra information if eOperator==WO_AND *\/$/;"	m	union:WhereTerm::__anon20	file:
pAppData	.\sqlite3.h	/^  void *pAppData;                \/* Argument to xInit() and xShutdown() *\/$/;"	m	struct:sqlite3_mem_methods
pAppData	.\sqlite3.h	/^  void *pAppData;          \/* Pointer to application-specific data *\/$/;"	m	struct:sqlite3_vfs
pArg	.\sqlite3.h	/^  void *pArg;$/;"	m	struct:sqlite3_pcache_methods
pArg	.\sqliteInt.h	/^  void *pArg;                \/* First arg to busy callback *\/$/;"	m	struct:BusyHandler
pArray	.\tclsqlite.c	/^  Tcl_Obj *pArray;                \/* Name of array variable *\/$/;"	m	struct:DbEvalContext	file:
pAuthArg	.\sqliteInt.h	/^  void *pAuthArg;               \/* 1st argument to the access auth function *\/$/;"	m	struct:sqlite3
pAux	.\sqliteInt.h	/^  void *pAux;                          \/* pAux passed to create_module() *\/$/;"	m	struct:Module
pAux	.\vdbeInt.h	/^    void *pAux;                   \/* Aux data for the i-th argument *\/$/;"	m	struct:VdbeFunc::AuxData
pBackup	.\pager.c	/^  sqlite3_backup *pBackup;    \/* Pointer to list of ongoing backup processes *\/$/;"	m	struct:Pager	file:
pBlob	.\tclsqlite.c	/^  sqlite3_blob *pBlob;      \/* sqlite3 blob handle *\/$/;"	m	struct:IncrblobChannel	file:
pBlockingConnection	.\sqliteInt.h	/^  sqlite3 *pBlockingConnection; \/* Connection that caused SQLITE_LOCKED *\/$/;"	m	struct:sqlite3
pBt	.\btreeInt.h	/^  BtShared *pBt;            \/* The BtShared this cursor points to *\/$/;"	m	struct:BtCursor
pBt	.\btreeInt.h	/^  BtShared *pBt;       \/* Pointer to BtShared that this page is part of *\/$/;"	m	struct:MemPage
pBt	.\btreeInt.h	/^  BtShared *pBt;     \/* Sharable content of this btree *\/$/;"	m	struct:Btree
pBt	.\btreeInt.h	/^  BtShared *pBt;    \/* The tree being checked out *\/$/;"	m	struct:IntegrityCk
pBt	.\sqliteInt.h	/^  Btree *pBt;          \/* The B*Tree structure for this database file *\/$/;"	m	struct:Db
pBt	.\vdbeInt.h	/^  Btree *pBt;           \/* Separate file holding temporary table *\/$/;"	m	struct:VdbeCursor
pBtree	.\btreeInt.h	/^  Btree *pBtree;            \/* The Btree to which this cursor belongs *\/$/;"	m	struct:BtCursor
pBtree	.\btreeInt.h	/^  Btree *pBtree;        \/* Btree handle holding this lock *\/$/;"	m	struct:BtLock
pBusyHandlerArg	.\pager.c	/^  void *pBusyHandlerArg;      \/* Context argument for xBusyHandler *\/$/;"	m	struct:Pager	file:
pCache	.\pcache.c	/^  sqlite3_pcache *pCache;             \/* Pluggable cache module *\/$/;"	m	struct:PCache	file:
pCache	.\pcache.h	/^  PCache *pCache;                \/* Cache that owns this page *\/$/;"	m	struct:PgHdr
pCache	.\pcache1.c	/^  PCache1 *pCache;               \/* Cache that currently owns this page *\/$/;"	m	struct:PgHdr1	file:
pCell	.\btreeInt.h	/^    u8 *pCell;          \/* Pointers to the body of the overflow cell *\/$/;"	m	struct:MemPage::_OvflCell
pCell	.\btreeInt.h	/^  u8 *pCell;     \/* Pointer to the start of cell content *\/$/;"	m	struct:CellInfo
pCheck	.\sqliteInt.h	/^  Expr *pCheck;        \/* The AND of all CHECK constraints *\/$/;"	m	struct:Table
pChunk	.\memjournal.c	/^  FileChunk *pChunk;              \/* Specific chunk into which cursor points *\/$/;"	m	struct:FilePoint	file:
pChunk	.\rowset.c	/^  struct RowSetChunk *pChunk;    \/* List of all chunk allocations *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetChunk	file:
pCodec	.\pager.c	/^  void *pCodec;               \/* First argument to xCodec... methods *\/$/;"	m	struct:Pager	file:
pColl	.\sqliteInt.h	/^  CollSeq *pColl;        \/* The collation type of the column or 0 *\/$/;"	m	struct:Expr
pColl	.\vdbe.h	/^    CollSeq *pColl;        \/* Used when p4type is P4_COLLSEQ *\/$/;"	m	union:VdbeOp::__anon18
pColl	.\vdbeInt.h	/^  CollSeq *pColl;       \/* Collating sequence *\/$/;"	m	struct:sqlite3_context
pCollNeededArg	.\sqliteInt.h	/^  void *pCollNeededArg;$/;"	m	struct:sqlite3
pCollate	.\tclsqlite.c	/^  SqlCollate *pCollate;      \/* List of SQL collation functions *\/$/;"	m	struct:SqliteDb	file:
pCollateNeeded	.\tclsqlite.c	/^  Tcl_Obj *pCollateNeeded;   \/* Collation needed script *\/$/;"	m	struct:SqliteDb	file:
pColumns	.\sqliteInt.h	/^  IdList *pColumns;       \/* If this is an UPDATE OF <column-list> trigger,$/;"	m	struct:Trigger
pCommitArg	.\sqliteInt.h	/^  void *pCommitArg;                 \/* Argument to xCommitCallback() *\/   $/;"	m	struct:sqlite3
pCsr	.\fts3_snippet.c	/^  Fts3Cursor *pCsr;               \/* Cursor snippet is being generated from *\/$/;"	m	struct:SnippetIter	file:
pCsr	.\vdbeblob.c	/^  BtCursor *pCsr;         \/* Cursor pointing at blob row *\/$/;"	m	struct:Incrblob	file:
pCtx	.\fts3_expr.c	/^  sqlite3_context *pCtx;              \/* Write error message here *\/$/;"	m	struct:ParseContext	file:
pCurrent	.\fts3Int.h	/^  char *pCurrent;$/;"	m	struct:Fts3Expr
pCursor	.\btreeInt.h	/^  BtCursor *pCursor;    \/* A list of all open cursors *\/$/;"	m	struct:BtShared
pCursor	.\fts3_snippet.c	/^  Fts3Cursor *pCursor;            \/* FTS3 Cursor *\/$/;"	m	struct:MatchInfo	file:
pCursor	.\vdbeInt.h	/^  BtCursor *pCursor;    \/* The cursor structure of the backend *\/$/;"	m	struct:VdbeCursor
pData	.\pcache.h	/^  void *pData;                   \/* Content of this page *\/$/;"	m	struct:PgHdr
pDb	.\tclsqlite.c	/^  SqliteDb *pDb;                  \/* Database handle *\/$/;"	m	struct:DbEvalContext	file:
pDb	.\tclsqlite.c	/^  SqliteDb *pDb;            \/* Associated database connection *\/$/;"	m	struct:IncrblobChannel	file:
pDbFd	.\wal.c	/^  sqlite3_file *pDbFd;       \/* File handle for the database file *\/$/;"	m	struct:Wal	file:
pDbPage	.\btreeInt.h	/^  DbPage *pDbPage;     \/* Pager page handle *\/$/;"	m	struct:MemPage
pDef	.\vdbeInt.h	/^    FuncDef *pDef;      \/* Used only when flags==MEM_Agg *\/$/;"	m	union:Mem::__anon19
pDeleteNode	.\rtree.c	/^  sqlite3_stmt *pDeleteNode;$/;"	m	struct:Rtree	file:
pDeleteParent	.\rtree.c	/^  sqlite3_stmt *pDeleteParent;$/;"	m	struct:Rtree	file:
pDeleteRowid	.\rtree.c	/^  sqlite3_stmt *pDeleteRowid;$/;"	m	struct:Rtree	file:
pDeleted	.\rtree.c	/^  RtreeNode *pDeleted;$/;"	m	struct:Rtree	file:
pDest	.\backup.c	/^  Btree *pDest;            \/* Destination b-tree file *\/$/;"	m	struct:sqlite3_backup	file:
pDestDb	.\backup.c	/^  sqlite3* pDestDb;        \/* Destination database handle *\/$/;"	m	struct:sqlite3_backup	file:
pDflt	.\sqliteInt.h	/^  Expr *pDflt;     \/* Default value of this column *\/$/;"	m	struct:Column
pDfltColl	.\sqliteInt.h	/^  CollSeq *pDfltColl;           \/* The default collating sequence (BINARY) *\/$/;"	m	struct:sqlite3
pDirty	.\pcache.c	/^  PgHdr *pDirty, *pDirtyTail;         \/* List of dirty pages in LRU order *\/$/;"	m	struct:PCache	file:
pDirty	.\pcache.h	/^  PgHdr *pDirty;                 \/* Transient list of dirty pages *\/$/;"	m	struct:PgHdr
pDirtyNext	.\pcache.h	/^  PgHdr *pDirtyNext;             \/* Next element in list of dirty pages *\/$/;"	m	struct:PgHdr
pDirtyPrev	.\pcache.h	/^  PgHdr *pDirtyPrev;             \/* Previous element in list of dirty pages *\/$/;"	m	struct:PgHdr
pDirtyTail	.\pcache.c	/^  PgHdr *pDirty, *pDirtyTail;         \/* List of dirty pages in LRU order *\/$/;"	m	struct:PCache	file:
pDisconnect	.\sqliteInt.h	/^  VTable *pDisconnect;    \/* Disconnect these in next sqlite3_prepare() *\/$/;"	m	struct:sqlite3
pEList	.\sqliteInt.h	/^  ExprList *pEList;      \/* The fields of the result *\/$/;"	m	struct:Select
pEList	.\sqliteInt.h	/^  ExprList *pEList;    \/* Optional list of named expressions *\/$/;"	m	struct:NameContext
pEnd	.\pcache1.c	/^  void *pStart, *pEnd;                \/* Bounds of pagecache malloc range *\/$/;"	m	struct:PCacheGlobal	file:
pEnd	.\sqliteInt.h	/^  void *pEnd;             \/* First byte past end of available space *\/$/;"	m	struct:Lookaside
pEntry	.\rowset.c	/^  struct RowSetEntry *pEntry;    \/* List of entries using pRight *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:
pErr	.\sqliteInt.h	/^  sqlite3_value *pErr;          \/* Most recent error message *\/$/;"	m	struct:sqlite3
pExpr	.\fts3Int.h	/^  Fts3Expr *pExpr;                \/* Parsed MATCH query string *\/$/;"	m	struct:Fts3Cursor
pExpr	.\sqliteInt.h	/^    Expr *pExpr;             \/* Expression encoding the function *\/$/;"	m	struct:AggInfo::AggInfo_func
pExpr	.\sqliteInt.h	/^    Expr *pExpr;             \/* The original expression *\/$/;"	m	struct:AggInfo::AggInfo_col
pExpr	.\sqliteInt.h	/^    Expr *pExpr;           \/* The list of expressions *\/$/;"	m	struct:ExprList::ExprList_item
pExpr	.\sqliteInt.h	/^  Expr *pExpr;          \/* The expression parse tree *\/$/;"	m	struct:ExprSpan
pExpr	.\where.c	/^  Expr *pExpr;            \/* Pointer to the subexpression that is this term *\/$/;"	m	struct:WhereTerm	file:
pExprList	.\sqliteInt.h	/^  ExprList *pExprList; \/* SET clause for UPDATE.  VALUES clause for INSERT *\/$/;"	m	struct:TriggerStep
pExtra	.\pcache.h	/^  void *pExtra;                  \/* Extra content *\/$/;"	m	struct:PgHdr
pFKey	.\sqliteInt.h	/^  FKey *pFKey;         \/* Linked list of all foreign keys in this table *\/$/;"	m	struct:Table
pFirst	.\mem2.c	/^  struct MemBlockHdr *pFirst;$/;"	m	struct:__anon2	typeref:struct:__anon2::MemBlockHdr	file:
pFirst	.\memjournal.c	/^  FileChunk *pFirst;              \/* Head of in-memory chunk-list *\/$/;"	m	struct:MemJournal	file:
pFirst	.\os_unix.c	/^  unixShm *pFirst;           \/* All unixShm objects pointing to this *\/$/;"	m	struct:unixShmNode	file:
pFirst	.\os_win.c	/^  winShm *pFirst;            \/* All winShm objects pointing to this *\/$/;"	m	struct:winShmNode	file:
pFrame	.\vdbeInt.h	/^    VdbeFrame *pFrame;  \/* Used when flags==MEM_Frame *\/$/;"	m	union:Mem::__anon19
pFrame	.\vdbeInt.h	/^  VdbeFrame *pFrame;      \/* Parent frame *\/$/;"	m	struct:Vdbe
pFree	.\pcache1.c	/^  PgFreeslot *pFree;                  \/* Free page blocks *\/$/;"	m	struct:PCacheGlobal	file:
pFree	.\sqliteInt.h	/^  LookasideSlot *pFree;   \/* List of available buffers *\/$/;"	m	struct:Lookaside
pFree	.\vdbeInt.h	/^  void *pFree;            \/* Free this when deleting the vdbe *\/$/;"	m	struct:Vdbe
pFresh	.\rowset.c	/^  struct RowSetEntry *pFresh;    \/* Source of new entry objects *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:
pFrom	.\sqliteInt.h	/^  Table *pFrom;     \/* Table containing the REFERENCES clause (aka: Child) *\/$/;"	m	struct:FKey
pFunc	.\sqliteInt.h	/^    FuncDef *pFunc;          \/* The aggregate function implementation *\/$/;"	m	struct:AggInfo::AggInfo_func
pFunc	.\tclsqlite.c	/^  SqlFunc *pFunc;            \/* List of SQL functions *\/$/;"	m	struct:SqliteDb	file:
pFunc	.\vdbe.h	/^    FuncDef *pFunc;        \/* Used when p4type is P4_FUNCDEF *\/$/;"	m	union:VdbeOp::__anon18
pFunc	.\vdbeInt.h	/^  FuncDef *pFunc;               \/* The definition of the function *\/$/;"	m	struct:VdbeFunc
pFunc	.\vdbeInt.h	/^  FuncDef *pFunc;       \/* Pointer to function information.  MUST BE FIRST *\/$/;"	m	struct:sqlite3_context
pGroupBy	.\sqliteInt.h	/^  ExprList *pGroupBy;     \/* The group by clause *\/$/;"	m	struct:AggInfo
pGroupBy	.\sqliteInt.h	/^  ExprList *pGroupBy;    \/* The GROUP BY clause *\/$/;"	m	struct:Select
pHasContent	.\btreeInt.h	/^  Bitvec *pHasContent;  \/* Set of pages moved to free-list this transaction *\/$/;"	m	struct:BtShared
pHash	.\sqliteInt.h	/^  FuncDef *pHash;      \/* Next with a different name but the same hash *\/$/;"	m	struct:FuncDef
pHaving	.\sqliteInt.h	/^  Expr *pHaving;         \/* The HAVING clause *\/$/;"	m	struct:Select
pHead	.\fts3_snippet.c	/^  char *pHead;                    \/* Position list data following iHead *\/$/;"	m	struct:SnippetPhrase	file:
pHeap	.\sqliteInt.h	/^  void *pHeap;                      \/* Heap storage space *\/$/;"	m	struct:Sqlite3Config
pI64	.\vdbe.h	/^    i64 *pI64;             \/* Used when p4type is P4_INT64 *\/$/;"	m	union:VdbeOp::__anon18
pId	.\os_unix.c	/^  struct vxworksFileId *pId;          \/* Unique file ID *\/$/;"	m	struct:unixFile	typeref:struct:unixFile::vxworksFileId	file:
pId	.\os_unix.c	/^  struct vxworksFileId *pId;  \/* Unique file ID for vxworks. *\/$/;"	m	struct:unixFileId	typeref:struct:unixFileId::vxworksFileId	file:
pIdList	.\sqliteInt.h	/^  IdList *pIdList;     \/* Column names for INSERT *\/$/;"	m	struct:TriggerStep
pIdx	.\sqliteInt.h	/^    Index *pIdx;                   \/* Index when WHERE_INDEXED is true *\/$/;"	m	union:WherePlan::__anon13
pIdxInfo	.\sqliteInt.h	/^  sqlite3_index_info *pIdxInfo;  \/* Index info for n-th source table *\/$/;"	m	struct:WhereLevel
pInJournal	.\pager.c	/^  Bitvec *pInJournal;         \/* One bit for each page in the database file *\/$/;"	m	struct:Pager	file:
pInSavepoint	.\pager.c	/^  Bitvec *pInSavepoint;        \/* Set of pages in this savepoint *\/$/;"	m	struct:PagerSavepoint	file:
pIncrblob	.\tclsqlite.c	/^  IncrblobChannel *pIncrblob;\/* Linked list of open incrblob channels *\/$/;"	m	struct:SqliteDb	file:
pIndex	.\sqliteInt.h	/^    Index *pIndex;    \/* Index structure corresponding to zIndex, if any *\/$/;"	m	struct:SrcList::SrcList_item
pIndex	.\sqliteInt.h	/^  Index *pIndex;       \/* List of SQL indexes on this table. *\/$/;"	m	struct:Table
pInitMutex	.\sqliteInt.h	/^  sqlite3_mutex *pInitMutex;        \/* Mutex used by sqlite3_initialize() *\/$/;"	m	struct:Sqlite3Config
pInode	.\os_unix.c	/^  unixInodeInfo *pInode;              \/* Info about locks on this inode *\/$/;"	m	struct:unixFile	file:
pInode	.\os_unix.c	/^  unixInodeInfo *pInode;     \/* unixInodeInfo that owns this SHM node *\/$/;"	m	struct:unixShmNode	file:
pInput	.\fts3_tokenizer1.c	/^  const char *pInput;          \/* input we are tokenizing *\/$/;"	m	struct:simple_tokenizer_cursor	file:
pIter	.\fts3_icu.c	/^  UBreakIterator *pIter;      \/* ICU break-iterator object *\/$/;"	m	struct:IcuCursor	file:
pKey	.\btreeInt.h	/^  void *pKey;      \/* Saved key that was cursor's last known position *\/$/;"	m	struct:BtCursor
pKey	.\fts3_hash.h	/^  void *pKey; int nKey;      \/* Key associated with this element *\/$/;"	m	struct:Fts3HashElem
pKey	.\hash.h	/^  const char *pKey; int nKey;  \/* Key associated with this element *\/$/;"	m	struct:HashElem
pKeyInfo	.\btreeInt.h	/^  struct KeyInfo *pKeyInfo; \/* Argument passed to comparison function *\/$/;"	m	struct:BtCursor	typeref:struct:BtCursor::KeyInfo
pKeyInfo	.\sqliteInt.h	/^  KeyInfo *pKeyInfo;  \/* Collation and sort-order information *\/$/;"	m	struct:UnpackedRecord
pKeyInfo	.\vdbe.h	/^    KeyInfo *pKeyInfo;     \/* Used when p4type is P4_KEYINFO *\/$/;"	m	union:VdbeOp::__anon18
pKeyInfo	.\vdbeInt.h	/^  KeyInfo *pKeyInfo;    \/* Info about index keys needed by index cursors *\/$/;"	m	struct:VdbeCursor
pLast	.\mem2.c	/^  struct MemBlockHdr *pLast;$/;"	m	struct:__anon2	typeref:struct:__anon2::MemBlockHdr	file:
pLast	.\rowset.c	/^  struct RowSetEntry *pLast;     \/* Last entry on the pEntry list *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:
pLast	.\sqliteInt.h	/^  TriggerStep *pLast;  \/* Last element in link-list. Valid for 1st elem only *\/$/;"	m	struct:TriggerStep
pLeft	.\fts3Int.h	/^  Fts3Expr *pLeft;           \/* Left operand *\/$/;"	m	struct:Fts3Expr
pLeft	.\rowset.c	/^  struct RowSetEntry *pLeft;    \/* Left subtree (smaller entries) *\/$/;"	m	struct:RowSetEntry	typeref:struct:RowSetEntry::RowSetEntry	file:
pLeft	.\sqliteInt.h	/^  Expr *pLeft;           \/* Left subnode *\/$/;"	m	struct:Expr
pLeftmost	.\fts3_write.c	/^  SegmentNode *pLeftmost;         \/* Pointer to left-most node of this depth *\/$/;"	m	struct:SegmentNode	file:
pLimit	.\parse.c	/^  Expr *pLimit;    \/* The LIMIT expression.  NULL if there is no limit *\/$/;"	m	struct:LimitVal	file:
pLimit	.\sqliteInt.h	/^  Expr *pLimit;          \/* LIMIT expression. NULL means not used. *\/$/;"	m	struct:Select
pList	.\fts3_snippet.c	/^  char *pList;                    \/* Pointer to start of phrase position list *\/$/;"	m	struct:SnippetPhrase	file:
pList	.\fts3_snippet.c	/^  char *pList;                    \/* Position-list *\/$/;"	m	struct:TermOffset	file:
pList	.\sqliteInt.h	/^    ExprList *pList;     \/* Function arguments or in "<expr> IN (<expr-list)" *\/$/;"	m	union:Expr::__anon12
pLock	.\btreeInt.h	/^  BtLock *pLock;        \/* List of locks held on this shared-btree struct *\/$/;"	m	struct:BtShared
pLog	.\shell.c	/^  FILE *pLog;            \/* Write log output here *\/$/;"	m	struct:callback_data	file:
pLogArg	.\sqliteInt.h	/^  void *pLogArg;                       \/* First argument to xLog() *\/$/;"	m	struct:Sqlite3Config
pLruHead	.\pcache1.c	/^  PgHdr1 *pLruHead, *pLruTail;        \/* LRU list of unpinned pages *\/$/;"	m	struct:PCacheGlobal	file:
pLruNext	.\pcache1.c	/^  PgHdr1 *pLruNext;              \/* Next in LRU list of unpinned pages *\/$/;"	m	struct:PgHdr1	file:
pLruPrev	.\pcache1.c	/^  PgHdr1 *pLruPrev;              \/* Previous in LRU list of unpinned pages *\/$/;"	m	struct:PgHdr1	file:
pLruTail	.\pcache1.c	/^  PgHdr1 *pLruHead, *pLruTail;        \/* LRU list of unpinned pages *\/$/;"	m	struct:PCacheGlobal	file:
pMap	.\os_win.c	/^    void *pMap;$/;"	m	struct:winShmNode::ShmRegion	file:
pMaskSet	.\where.c	/^  WhereMaskSet *pMaskSet;  \/* Mapping of table cursor numbers to bitmasks *\/$/;"	m	struct:WhereClause	file:
pMem	.\vdbe.h	/^    Mem *pMem;             \/* Used when p4type is P4_MEM *\/$/;"	m	union:VdbeOp::__anon18
pMem	.\vdbeInt.h	/^  Mem *pMem;            \/* Memory cell used to store aggregate context *\/$/;"	m	struct:sqlite3_context
pMethod	.\journal.c	/^  sqlite3_io_methods *pMethod;    \/* I\/O methods on journal files *\/$/;"	m	struct:JournalFile	file:
pMethod	.\memjournal.c	/^  sqlite3_io_methods *pMethod;    \/* Parent class. MUST BE FIRST *\/$/;"	m	struct:MemJournal	file:
pMethod	.\os_os2.c	/^  const sqlite3_io_methods *pMethod;  \/* Always the first entry *\/$/;"	m	struct:os2File	file:
pMethod	.\os_unix.c	/^  sqlite3_io_methods const *pMethod;  \/* Always the first entry *\/$/;"	m	struct:unixFile	file:
pMethod	.\os_win.c	/^  const sqlite3_io_methods *pMethod; \/*** Must be first ***\/$/;"	m	struct:winFile	file:
pMethods	.\sqlite3.h	/^  const struct sqlite3_io_methods *pMethods;  \/* Methods for an open file *\/$/;"	m	struct:sqlite3_file	typeref:struct:sqlite3_file::sqlite3_io_methods
pMod	.\sqliteInt.h	/^  Module *pMod;             \/* Pointer to module implementation *\/$/;"	m	struct:VTable
pModule	.\fts3_tokenizer.h	/^  const sqlite3_tokenizer_module *pModule;  \/* The module for this tokenizer *\/$/;"	m	struct:sqlite3_tokenizer
pModule	.\sqlite3.h	/^  const sqlite3_module *pModule;  \/* The module for this virtual table *\/$/;"	m	struct:sqlite3_vtab
pModule	.\sqliteInt.h	/^  const sqlite3_module *pModule;       \/* Callback pointers *\/$/;"	m	struct:Module
pModule	.\vdbeInt.h	/^  const sqlite3_module *pModule;     \/* Module for cursor pVtabCursor *\/$/;"	m	struct:VdbeCursor
pNC	.\sqliteInt.h	/^    NameContext *pNC;                          \/* Naming context *\/$/;"	m	union:Walker::__anon17
pName	.\sqliteInt.h	/^  const Token *pName; \/* Name of the container - used for error messages *\/$/;"	m	struct:DbFixer
pNewTable	.\sqliteInt.h	/^  Table *pNewTable;    \/* A table being constructed by CREATE TABLE *\/$/;"	m	struct:Parse
pNewTrigger	.\sqliteInt.h	/^  Trigger *pNewTrigger;     \/* Trigger under construct by a CREATE TRIGGER *\/$/;"	m	struct:Parse
pNext	.\backup.c	/^  sqlite3_backup *pNext;   \/* Next backup associated with source pager *\/$/;"	m	struct:sqlite3_backup	file:
pNext	.\btreeInt.h	/^  BtCursor *pNext, *pPrev;  \/* Forms a linked list of all cursors *\/$/;"	m	struct:BtCursor
pNext	.\btreeInt.h	/^  BtLock *pNext;        \/* Next in BtShared.pLock list *\/$/;"	m	struct:BtLock
pNext	.\btreeInt.h	/^  BtShared *pNext;      \/* Next on a list of sharable BtShared structs *\/$/;"	m	struct:BtShared
pNext	.\btreeInt.h	/^  Btree *pNext;      \/* List of other sharable Btrees from the same db *\/$/;"	m	struct:Btree
pNext	.\mem2.c	/^  struct MemBlockHdr *pNext, *pPrev;  \/* Linked list of all unfreed memory *\/$/;"	m	struct:MemBlockHdr	typeref:struct:MemBlockHdr::MemBlockHdr	file:
pNext	.\memjournal.c	/^  FileChunk *pNext;               \/* Next chunk in the journal *\/$/;"	m	struct:FileChunk	file:
pNext	.\os_unix.c	/^  UnixUnusedFd *pNext;      \/* Next unused file descriptor on same file *\/$/;"	m	struct:UnixUnusedFd	file:
pNext	.\os_unix.c	/^  struct vxworksFileId *pNext;  \/* Next in a list of them all *\/$/;"	m	struct:vxworksFileId	typeref:struct:vxworksFileId::vxworksFileId	file:
pNext	.\os_unix.c	/^  unixInodeInfo *pNext;           \/* List of all unixInodeInfo objects *\/$/;"	m	struct:unixInodeInfo	file:
pNext	.\os_unix.c	/^  unixShm *pNext;            \/* Next unixShm with the same unixShmNode *\/$/;"	m	struct:unixShm	file:
pNext	.\os_win.c	/^  winShm *pNext;             \/* Next winShm with the same winShmNode *\/$/;"	m	struct:winShm	file:
pNext	.\os_win.c	/^  winShmNode *pNext;         \/* Next in list of all winShmNode objects *\/$/;"	m	struct:winShmNode	file:
pNext	.\pcache1.c	/^  PgFreeslot *pNext;  \/* Next free slot *\/$/;"	m	struct:PgFreeslot	file:
pNext	.\pcache1.c	/^  PgHdr1 *pNext;                 \/* Next in hash table chain *\/$/;"	m	struct:PgHdr1	file:
pNext	.\rtree.c	/^  RtreeNode *pNext;                 \/* Next node in this hash chain *\/$/;"	m	struct:RtreeNode	file:
pNext	.\sqlite3.h	/^  sqlite3_vfs *pNext;      \/* Next registered VFS *\/$/;"	m	struct:sqlite3_vfs
pNext	.\sqliteInt.h	/^  AutoincInfo *pNext;   \/* Next info block in a list of them all *\/$/;"	m	struct:AutoincInfo
pNext	.\sqliteInt.h	/^  FuncDef *pNext;      \/* Next function with same name *\/$/;"	m	struct:FuncDef
pNext	.\sqliteInt.h	/^  Index *pNext;    \/* The next index associated with the same table *\/$/;"	m	struct:Index
pNext	.\sqliteInt.h	/^  LookasideSlot *pNext;    \/* Next buffer in the list of free buffers *\/$/;"	m	struct:LookasideSlot
pNext	.\sqliteInt.h	/^  NameContext *pNext;  \/* Next outer name context.  NULL for outermost *\/$/;"	m	struct:NameContext
pNext	.\sqliteInt.h	/^  Savepoint *pNext;                   \/* Parent savepoint (if any) *\/$/;"	m	struct:Savepoint
pNext	.\sqliteInt.h	/^  Select *pNext;         \/* Next select to the left in a compound *\/$/;"	m	struct:Select
pNext	.\sqliteInt.h	/^  Trigger *pNext;         \/* Next trigger associated with the table *\/$/;"	m	struct:Trigger
pNext	.\sqliteInt.h	/^  TriggerPrg *pNext;      \/* Next entry in Parse.pTriggerPrg list *\/$/;"	m	struct:TriggerPrg
pNext	.\sqliteInt.h	/^  TriggerStep *pNext;  \/* Next in the link-list *\/$/;"	m	struct:TriggerStep
pNext	.\sqliteInt.h	/^  VTable *pNext;            \/* Next in linked list (see above) *\/$/;"	m	struct:VTable
pNext	.\tclsqlite.c	/^  IncrblobChannel *pNext;   \/* Linked list of all open incrblob channels *\/$/;"	m	struct:IncrblobChannel	file:
pNext	.\tclsqlite.c	/^  SqlCollate *pNext;    \/* Next function on the list of them all *\/$/;"	m	struct:SqlCollate	file:
pNext	.\tclsqlite.c	/^  SqlFunc *pNext;       \/* Next function on the list of them all *\/$/;"	m	struct:SqlFunc	file:
pNext	.\tclsqlite.c	/^  SqlPreparedStmt *pNext;  \/* Next in linked list *\/$/;"	m	struct:SqlPreparedStmt	file:
pNext	.\vdbe.h	/^  SubProgram *pNext;            \/* Next sub-program already visited *\/$/;"	m	struct:SubProgram
pNext	.\vdbeInt.h	/^  Vdbe *pPrev,*pNext;     \/* Linked list of VDBEs with the same Vdbe.db *\/$/;"	m	struct:Vdbe
pNextBlocked	.\sqliteInt.h	/^  sqlite3 *pNextBlocked;        \/* Next in list of all blocked connections *\/$/;"	m	struct:sqlite3
pNextChunk	.\rowset.c	/^  struct RowSetChunk *pNextChunk;        \/* Next chunk on list of them all *\/$/;"	m	struct:RowSetChunk	typeref:struct:RowSetChunk::RowSetChunk	file:
pNextFrom	.\sqliteInt.h	/^  FKey *pNextFrom;  \/* Next foreign key in pFrom *\/$/;"	m	struct:FKey
pNextId	.\fts3Int.h	/^  char *pNextId;                  \/* Pointer into the body of aDoclist *\/$/;"	m	struct:Fts3Cursor
pNextTo	.\sqliteInt.h	/^  FKey *pNextTo;    \/* Next foreign key on table named zTo *\/$/;"	m	struct:FKey
pNextZombie	.\sqliteInt.h	/^  Table *pNextZombie;  \/* Next on the Parse.pZombieTab list *\/$/;"	m	struct:Table
pNode	.\rtree.c	/^  RtreeNode *pNode;                 \/* Node cursor is currently pointing at *\/$/;"	m	struct:RtreeCursor	file:
pOffset	.\parse.c	/^  Expr *pOffset;   \/* The OFFSET expression.  NULL if there is none *\/$/;"	m	struct:LimitVal	file:
pOffset	.\sqliteInt.h	/^  Expr *pOffset;         \/* OFFSET expression. NULL means not used. *\/$/;"	m	struct:Select
pOffsetList	.\fts3_write.c	/^  char *pOffsetList;$/;"	m	struct:Fts3SegReader	file:
pOldMethod	.\os_unix.c	/^  sqlite3_io_methods const *pOldMethod;     \/* Original I\/O methods for close *\/$/;"	m	struct:proxyLockingContext	file:
pOn	.\sqliteInt.h	/^    Expr *pOn;        \/* The ON clause of a join *\/$/;"	m	struct:SrcList::SrcList_item
pOrInfo	.\where.c	/^    WhereOrInfo *pOrInfo;   \/* Extra information if eOperator==WO_OR *\/$/;"	m	union:WhereTerm::__anon20	file:
pOrderBy	.\sqliteInt.h	/^  ExprList *pOrderBy;    \/* The ORDER BY clause *\/$/;"	m	struct:Select
pPCache	.\pager.c	/^  PCache *pPCache;            \/* Pointer to page cache object *\/$/;"	m	struct:Pager	file:
pPage	.\sqliteInt.h	/^  void *pPage;                      \/* Page cache memory *\/$/;"	m	struct:Sqlite3Config
pPage1	.\btreeInt.h	/^  MemPage *pPage1;      \/* First page of the database *\/$/;"	m	struct:BtShared
pPage1	.\pcache.c	/^  PgHdr *pPage1;                      \/* Reference to page 1 *\/$/;"	m	struct:PCache	file:
pPager	.\btreeInt.h	/^  Pager *pPager;        \/* The page cache *\/$/;"	m	struct:BtShared
pPager	.\btreeInt.h	/^  Pager *pPager;    \/* The associated pager.  Also accessible by pBt->pPager *\/$/;"	m	struct:IntegrityCk
pPager	.\pcache.h	/^  Pager *pPager;                 \/* The pager this page is part of *\/$/;"	m	struct:PgHdr
pParent	.\fts3Int.h	/^  Fts3Expr *pParent;         \/* pParent->pLeft==this or pParent->pRight==this *\/$/;"	m	struct:Fts3Expr
pParent	.\fts3_write.c	/^  SegmentNode *pParent;           \/* Parent node (or NULL for root node) *\/$/;"	m	struct:SegmentNode	file:
pParent	.\rtree.c	/^  RtreeNode *pParent;               \/* Parent node *\/$/;"	m	struct:RtreeNode	file:
pParent	.\vdbeInt.h	/^  VdbeFrame *pParent;     \/* Parent of this frame *\/$/;"	m	struct:VdbeFrame
pParse	.\sqliteInt.h	/^  Parse *pParse;                            \/* Parser context.  *\/$/;"	m	struct:Walker
pParse	.\sqliteInt.h	/^  Parse *pParse;              \/* The Parse structure *\/$/;"	m	struct:AuthContext
pParse	.\sqliteInt.h	/^  Parse *pParse;       \/* Parsing and code generating context *\/$/;"	m	struct:WhereInfo
pParse	.\sqliteInt.h	/^  Parse *pParse;       \/* The parser *\/$/;"	m	struct:NameContext
pParse	.\sqliteInt.h	/^  Parse *pParse;      \/* The parsing context.  Error messages written here *\/$/;"	m	struct:DbFixer
pParse	.\where.c	/^  Parse *pParse;           \/* The parser context *\/$/;"	m	struct:WhereClause	file:
pPhrase	.\fts3Int.h	/^  Fts3Phrase *pPhrase;       \/* Valid if eType==FTSQUERY_PHRASE *\/$/;"	m	struct:Fts3Expr
pPreStmt	.\tclsqlite.c	/^  SqlPreparedStmt *pPreStmt;      \/* Current statement *\/$/;"	m	struct:DbEvalContext	file:
pPrev	.\btreeInt.h	/^  BtCursor *pNext, *pPrev;  \/* Forms a linked list of all cursors *\/$/;"	m	struct:BtCursor
pPrev	.\btreeInt.h	/^  Btree *pPrev;      \/* Back pointer of the same list *\/$/;"	m	struct:Btree
pPrev	.\mem2.c	/^  struct MemBlockHdr *pNext, *pPrev;  \/* Linked list of all unfreed memory *\/$/;"	m	struct:MemBlockHdr	typeref:struct:MemBlockHdr::	file:
pPrev	.\os_unix.c	/^  unixInodeInfo *pPrev;           \/*    .... doubly linked *\/$/;"	m	struct:unixInodeInfo	file:
pPrev	.\tclsqlite.c	/^  IncrblobChannel *pPrev;   \/* Linked list of all open incrblob channels *\/$/;"	m	struct:IncrblobChannel	file:
pPrev	.\tclsqlite.c	/^  SqlPreparedStmt *pPrev;  \/* Previous on the list *\/$/;"	m	struct:SqlPreparedStmt	file:
pPrev	.\vdbeInt.h	/^  Vdbe *pPrev,*pNext;     \/* Linked list of VDBEs with the same Vdbe.db *\/$/;"	m	struct:Vdbe
pPrevTo	.\sqliteInt.h	/^  FKey *pPrevTo;    \/* Previous foreign key on table named zTo *\/$/;"	m	struct:FKey
pPrior	.\sqliteInt.h	/^  Select *pPrior;        \/* Prior select in a compound select statement *\/$/;"	m	struct:Select
pProfileArg	.\sqliteInt.h	/^  void *pProfileArg;                        \/* Argument to profile function *\/$/;"	m	struct:sqlite3
pProgram	.\sqliteInt.h	/^  SubProgram *pProgram;   \/* Program implementing pTrigger\/orconf *\/$/;"	m	struct:TriggerPrg
pProgram	.\vdbe.h	/^    SubProgram *pProgram;  \/* Used when p4type is P4_SUBPROGRAM *\/$/;"	m	union:VdbeOp::__anon18
pProgram	.\vdbeInt.h	/^  SubProgram *pProgram;   \/* Linked list of all sub-programs used by VM *\/$/;"	m	struct:Vdbe
pProgressArg	.\sqliteInt.h	/^  void *pProgressArg;           \/* Argument to the progress callback *\/$/;"	m	struct:sqlite3
pReadNode	.\rtree.c	/^  sqlite3_stmt *pReadNode;$/;"	m	struct:Rtree	file:
pReadParent	.\rtree.c	/^  sqlite3_stmt *pReadParent;$/;"	m	struct:Rtree	file:
pReadRowid	.\rtree.c	/^  sqlite3_stmt *pReadRowid;$/;"	m	struct:Rtree	file:
pReal	.\journal.c	/^  sqlite3_file *pReal;            \/* The "real" underlying file descriptor *\/$/;"	m	struct:JournalFile	file:
pReal	.\vdbe.h	/^    double *pReal;         \/* Used when p4type is P4_REAL *\/$/;"	m	union:VdbeOp::__anon18
pReprepare	.\sqliteInt.h	/^  Vdbe *pReprepare;    \/* VM being reprepared (sqlite3Reprepare()) *\/$/;"	m	struct:Parse
pResultSet	.\vdbeInt.h	/^  Mem *pResultSet;        \/* Pointer to an array of results *\/$/;"	m	struct:Vdbe
pRight	.\fts3Int.h	/^  Fts3Expr *pRight;          \/* Right operand *\/$/;"	m	struct:Fts3Expr
pRight	.\fts3_write.c	/^  SegmentNode *pRight;            \/* Pointer to right-sibling *\/$/;"	m	struct:SegmentNode	file:
pRight	.\rowset.c	/^  struct RowSetEntry *pRight;   \/* Right subtree (larger entries) or list *\/$/;"	m	struct:RowSetEntry	typeref:struct:RowSetEntry::RowSetEntry	file:
pRight	.\sqliteInt.h	/^  Expr *pRight;          \/* Right subnode *\/$/;"	m	struct:Expr
pRightmost	.\sqliteInt.h	/^  Select *pRightmost;    \/* Right-most select in a compound select statement *\/$/;"	m	struct:Select
pRollbackArg	.\sqliteInt.h	/^  void *pRollbackArg;               \/* Argument to xRollbackCallback() *\/   $/;"	m	struct:sqlite3
pRollbackHook	.\tclsqlite.c	/^  Tcl_Obj *pRollbackHook;    \/* Rollback hook script (if any) *\/$/;"	m	struct:SqliteDb	file:
pRowSet	.\vdbeInt.h	/^    RowSet *pRowSet;    \/* Used only when flags==MEM_RowSet *\/$/;"	m	union:Mem::__anon19
pSavepoint	.\sqliteInt.h	/^  Savepoint *pSavepoint;        \/* List of active savepoints *\/$/;"	m	struct:sqlite3
pSchema	.\btreeInt.h	/^  void *pSchema;        \/* Pointer to space allocated by sqlite3BtreeSchema() *\/$/;"	m	struct:BtShared
pSchema	.\sqliteInt.h	/^  Schema *pSchema;        \/* Schema containing the trigger *\/$/;"	m	struct:Trigger
pSchema	.\sqliteInt.h	/^  Schema *pSchema;     \/* Pointer to database schema (possibly shared) *\/$/;"	m	struct:Db
pSchema	.\sqliteInt.h	/^  Schema *pSchema;     \/* Schema that contains this table *\/$/;"	m	struct:Table
pSchema	.\sqliteInt.h	/^  Schema *pSchema; \/* Schema containing this index *\/$/;"	m	struct:Index
pScratch	.\sqliteInt.h	/^  void *pScratch;                   \/* Scratch memory *\/$/;"	m	struct:Sqlite3Config
pScript	.\tclsqlite.c	/^  Tcl_Obj *pScript;     \/* The Tcl_Obj representation of the script *\/$/;"	m	struct:SqlFunc	file:
pSelect	.\sqliteInt.h	/^    Select *pSelect;     \/* Used for sub-selects and "<expr> IN (<select>)" *\/$/;"	m	union:Expr::__anon12
pSelect	.\sqliteInt.h	/^    Select *pSelect;  \/* A SELECT statement used in place of a table name *\/$/;"	m	struct:SrcList::SrcList_item
pSelect	.\sqliteInt.h	/^  Select *pSelect;     \/* NULL for tables.  Points to definition if a view. *\/$/;"	m	struct:Table
pSelect	.\sqliteInt.h	/^  Select *pSelect;     \/* SELECT statment or RHS of INSERT INTO .. SELECT ... *\/$/;"	m	struct:TriggerStep
pSem	.\os_unix.c	/^  sem_t *pSem;                    \/* Named POSIX semaphore *\/$/;"	m	struct:unixInodeInfo	file:
pSeqTab	.\sqliteInt.h	/^  Table *pSeqTab;      \/* The sqlite_sequence table used by AUTOINCREMENT *\/$/;"	m	struct:Schema
pShm	.\os_unix.c	/^  unixShm *pShm;                      \/* Shared memory segment information *\/$/;"	m	struct:unixFile	file:
pShm	.\os_win.c	/^  winShm *pShm;           \/* Instance of shared memory on this file *\/$/;"	m	struct:winFile	file:
pShmNode	.\os_unix.c	/^  unixShmNode *pShmNode;          \/* Shared memory associated with this inode *\/$/;"	m	struct:unixInodeInfo	file:
pShmNode	.\os_unix.c	/^  unixShmNode *pShmNode;     \/* The underlying unixShmNode object *\/$/;"	m	struct:unixShm	file:
pShmNode	.\os_win.c	/^  winShmNode *pShmNode;      \/* The underlying winShmNode object *\/$/;"	m	struct:winShm	file:
pSql	.\tclsqlite.c	/^  Tcl_Obj *pSql;                  \/* Object holding string zSql *\/$/;"	m	struct:DbEvalContext	file:
pSrc	.\backup.c	/^  Btree *pSrc;             \/* Source b-tree file *\/$/;"	m	struct:sqlite3_backup	file:
pSrc	.\sqliteInt.h	/^  SrcList *pSrc;         \/* The FROM clause *\/$/;"	m	struct:Select
pSrcDb	.\backup.c	/^  sqlite3* pSrcDb;         \/* Source database handle *\/$/;"	m	struct:sqlite3_backup	file:
pSrcList	.\sqliteInt.h	/^  SrcList *pSrcList;   \/* One or more tables used to resolve names *\/$/;"	m	struct:NameContext
pStart	.\pcache1.c	/^  void *pStart, *pEnd;                \/* Bounds of pagecache malloc range *\/$/;"	m	struct:PCacheGlobal	file:
pStart	.\sqliteInt.h	/^  void *pStart;           \/* First byte of available memory space *\/$/;"	m	struct:Lookaside
pStmt	.\fts3Int.h	/^  sqlite3_stmt *pStmt;            \/* Prepared statement in use by the cursor *\/$/;"	m	struct:Fts3Cursor
pStmt	.\fts3_write.c	/^  sqlite3_stmt *pStmt;            \/* SQL Statement to access leaf nodes *\/$/;"	m	struct:Fts3SegReader	file:
pStmt	.\shell.c	/^  sqlite3_stmt *pStmt;   \/* Current statement if any. *\/$/;"	m	struct:callback_data	file:
pStmt	.\tclsqlite.c	/^  sqlite3_stmt *pStmt;     \/* The prepared statement *\/$/;"	m	struct:SqlPreparedStmt	file:
pStmt	.\vdbeblob.c	/^  sqlite3_stmt *pStmt;    \/* Statement holding cursor open *\/$/;"	m	struct:Incrblob	file:
pStress	.\pcache.c	/^  void *pStress;                      \/* Argument to xStress *\/$/;"	m	struct:PCache	file:
pSynced	.\pcache.c	/^  PgHdr *pSynced;                     \/* Last synced page in dirty page list *\/$/;"	m	struct:PCache	file:
pTab	.\fts3_snippet.c	/^  Fts3Table *pTab;                \/* FTS3 Table *\/$/;"	m	struct:LoadDoclistCtx	file:
pTab	.\sqliteInt.h	/^    Table *pTab;             \/* Source table *\/$/;"	m	struct:AggInfo::AggInfo_col
pTab	.\sqliteInt.h	/^    Table *pTab;      \/* An SQL table corresponding to zName *\/$/;"	m	struct:SrcList::SrcList_item
pTab	.\sqliteInt.h	/^  Table *pTab;           \/* Table for TK_COLUMN expressions. *\/$/;"	m	struct:Expr
pTab	.\sqliteInt.h	/^  Table *pTab;          \/* Table this info block refers to *\/$/;"	m	struct:AutoincInfo
pTabList	.\sqliteInt.h	/^  SrcList *pTabList;             \/* List of tables in the join *\/$/;"	m	struct:WhereInfo
pTabSchema	.\sqliteInt.h	/^  Schema *pTabSchema;     \/* Schema containing the table *\/$/;"	m	struct:Trigger
pTable	.\sqliteInt.h	/^  Table *pTable;   \/* The SQL table being indexed *\/$/;"	m	struct:Index
pTail	.\fts3_snippet.c	/^  char *pTail;                    \/* Position list data following iTail *\/$/;"	m	struct:SnippetPhrase	file:
pTerm	.\sqliteInt.h	/^    struct WhereTerm *pTerm;       \/* WHERE clause term for OR-search *\/$/;"	m	union:WherePlan::__anon13	typeref:struct:WherePlan::__anon13::WhereTerm
pTmpSpace	.\btreeInt.h	/^  u8 *pTmpSpace;        \/* BtShared.pageSize bytes of space for tmp use *\/$/;"	m	struct:BtShared
pTmpSpace	.\pager.c	/^  char *pTmpSpace;            \/* Pager.pageSize bytes of space for tmp use *\/$/;"	m	struct:Pager	file:
pToken	.\fts3_tokenizer1.c	/^  char *pToken;                \/* storage for current token *\/$/;"	m	struct:simple_tokenizer_cursor	file:
pTokenizer	.\fts3Int.h	/^  sqlite3_tokenizer *pTokenizer;  \/* tokenizer for inserts and queries *\/$/;"	m	struct:Fts3Table
pTokenizer	.\fts3_expr.c	/^  sqlite3_tokenizer *pTokenizer;      \/* Tokenizer module *\/$/;"	m	struct:ParseContext	file:
pTokenizer	.\fts3_tokenizer.h	/^  sqlite3_tokenizer *pTokenizer;       \/* Tokenizer for this cursor. *\/$/;"	m	struct:sqlite3_tokenizer_cursor
pToplevel	.\sqliteInt.h	/^  Parse *pToplevel;    \/* Parse structure for main program (or NULL) *\/$/;"	m	struct:Parse
pTraceArg	.\sqliteInt.h	/^  void *pTraceArg;                          \/* Argument to the trace function *\/$/;"	m	struct:sqlite3
pTree	.\fts3_write.c	/^  SegmentNode *pTree;             \/* Pointer to interior tree structure *\/$/;"	m	struct:SegmentWriter	file:
pTree	.\rowset.c	/^  struct RowSetEntry *pTree;     \/* Binary tree of entries *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:
pTrig	.\sqliteInt.h	/^  Trigger *pTrig;      \/* The trigger that this step is a part of *\/$/;"	m	struct:TriggerStep
pTrigger	.\delete.c	447;"	d	file:
pTrigger	.\insert.c	1055;"	d	file:
pTrigger	.\sqliteInt.h	/^  Trigger *pTrigger;      \/* Trigger this program was coded from *\/$/;"	m	struct:TriggerPrg
pTrigger	.\sqliteInt.h	/^  Trigger *pTrigger;   \/* List of triggers stored in pSchema *\/$/;"	m	struct:Table
pTrigger	.\update.c	572;"	d	file:
pTriggerPrg	.\sqliteInt.h	/^  TriggerPrg *pTriggerPrg;    \/* Linked list of coded triggers *\/$/;"	m	struct:Parse
pTriggerTab	.\sqliteInt.h	/^  Table *pTriggerTab;  \/* Table triggers are being coded for *\/$/;"	m	struct:Parse
pUnlockArg	.\sqliteInt.h	/^  void *pUnlockArg;                     \/* Argument to xUnlockNotify *\/$/;"	m	struct:sqlite3
pUnlockConnection	.\sqliteInt.h	/^  sqlite3 *pUnlockConnection;           \/* Connection to watch for unlock *\/$/;"	m	struct:sqlite3
pUnlockNotify	.\tclsqlite.c	/^  Tcl_Obj *pUnlockNotify;    \/* Unlock notify script (if any) *\/$/;"	m	struct:SqliteDb	file:
pUnused	.\os_unix.c	/^  UnixUnusedFd *pUnused;              \/* Pre-allocated UnixUnusedFd *\/$/;"	m	struct:unixFile	file:
pUnused	.\os_unix.c	/^  UnixUnusedFd *pUnused;          \/* Unused file descriptors to close *\/$/;"	m	struct:unixInodeInfo	file:
pUpdateArg	.\sqliteInt.h	/^  void *pUpdateArg;$/;"	m	struct:sqlite3
pUpdateHook	.\tclsqlite.c	/^  Tcl_Obj *pUpdateHook;      \/* Update hook script (if any) *\/$/;"	m	struct:SqliteDb	file:
pUser	.\sqliteInt.h	/^  void *pUser;          \/* First argument to xCmp() *\/$/;"	m	struct:CollSeq
pUserData	.\sqliteInt.h	/^  void *pUserData;     \/* User data parameter *\/$/;"	m	struct:FuncDef
pUsing	.\sqliteInt.h	/^    IdList *pUsing;   \/* The USING clause of a join *\/$/;"	m	struct:SrcList::SrcList_item
pVTab	.\sqliteInt.h	/^  Table *pVTab;                 \/* vtab with active Connect\/Create method *\/$/;"	m	struct:sqlite3
pVTable	.\sqliteInt.h	/^  VTable *pVTable;     \/* List of VTable objects. *\/$/;"	m	struct:Table
pVdbe	.\sqliteInt.h	/^  Vdbe *pVdbe;         \/* An engine for executing database bytecode *\/$/;"	m	struct:Parse
pVdbe	.\sqliteInt.h	/^  struct Vdbe *pVdbe;           \/* List of active virtual machines *\/$/;"	m	struct:sqlite3	typeref:struct:sqlite3::Vdbe
pVdbeFunc	.\vdbe.h	/^    VdbeFunc *pVdbeFunc;   \/* Used when p4type is P4_VDBEFUNC *\/$/;"	m	union:VdbeOp::__anon18
pVdbeFunc	.\vdbeInt.h	/^  VdbeFunc *pVdbeFunc;  \/* Auxilary data, if created. *\/$/;"	m	struct:sqlite3_context
pVfs	.\journal.c	/^  sqlite3_vfs *pVfs;              \/* The "real" underlying VFS *\/$/;"	m	struct:JournalFile	file:
pVfs	.\os_win.c	/^  sqlite3_vfs *pVfs;      \/* The VFS used to open this file *\/$/;"	m	struct:winFile	file:
pVfs	.\pager.c	/^  sqlite3_vfs *pVfs;          \/* OS functions to use for IO *\/$/;"	m	struct:Pager	file:
pVfs	.\sqliteInt.h	/^  sqlite3_vfs *pVfs;            \/* OS Interface *\/$/;"	m	struct:sqlite3
pVfs	.\wal.c	/^  sqlite3_vfs *pVfs;         \/* The VFS used to create pDbFd *\/$/;"	m	struct:Wal	file:
pVtab	.\sqlite3.h	/^  sqlite3_vtab *pVtab;      \/* Virtual table of this cursor *\/$/;"	m	struct:sqlite3_vtab_cursor
pVtab	.\sqliteInt.h	/^  sqlite3_vtab *pVtab;      \/* Pointer to vtab instance *\/$/;"	m	struct:VTable
pVtab	.\vdbe.h	/^    VTable *pVtab;         \/* Used when p4type is P4_VTAB *\/$/;"	m	union:VdbeOp::__anon18
pVtabCursor	.\vdbeInt.h	/^  sqlite3_vtab_cursor *pVtabCursor;  \/* The cursor for a virtual table *\/$/;"	m	struct:VdbeCursor
pVtabIdx	.\sqliteInt.h	/^    sqlite3_index_info *pVtabIdx;  \/* Virtual table index to use *\/$/;"	m	union:WherePlan::__anon13
pWC	.\sqliteInt.h	/^  struct WhereClause *pWC;       \/* Decomposition of the WHERE clause *\/$/;"	m	struct:WhereInfo	typeref:struct:WhereInfo::WhereClause
pWC	.\where.c	/^  WhereClause *pWC;       \/* The clause this term is part of *\/$/;"	m	struct:WhereTerm	file:
pWal	.\pager.c	/^  Wal *pWal;                  \/* Write-ahead log used by "journal_mode=wal" *\/$/;"	m	struct:Pager	file:
pWalArg	.\sqliteInt.h	/^  void *pWalArg;$/;"	m	struct:sqlite3
pWalFd	.\wal.c	/^  sqlite3_file *pWalFd;      \/* File handle for WAL file *\/$/;"	m	struct:Wal	file:
pWalHook	.\tclsqlite.c	/^  Tcl_Obj *pWalHook;         \/* WAL hook script (if any) *\/$/;"	m	struct:SqliteDb	file:
pWhen	.\sqliteInt.h	/^  Expr *pWhen;            \/* The WHEN clause of the expression (may be NULL) *\/$/;"	m	struct:Trigger
pWhere	.\sqliteInt.h	/^  Expr *pWhere;          \/* The WHERE clause *\/$/;"	m	struct:Select
pWhere	.\sqliteInt.h	/^  Expr *pWhere;        \/* The WHERE clause for DELETE or UPDATE steps *\/$/;"	m	struct:TriggerStep
pWriteNode	.\rtree.c	/^  sqlite3_stmt *pWriteNode;$/;"	m	struct:Rtree	file:
pWriteParent	.\rtree.c	/^  sqlite3_stmt *pWriteParent;$/;"	m	struct:Rtree	file:
pWriteRowid	.\rtree.c	/^  sqlite3_stmt *pWriteRowid;$/;"	m	struct:Rtree	file:
pWriter	.\btreeInt.h	/^  Btree *pWriter;       \/* Btree with currently open write transaction *\/$/;"	m	struct:BtShared
pZombieTab	.\sqliteInt.h	/^  Table *pZombieTab;      \/* List of Table objects to delete after code gen *\/$/;"	m	struct:Parse
pageHash	.\pcache.h	/^  u32 pageHash;                  \/* Hash of page content *\/$/;"	m	struct:PgHdr
pageInJournal	.\pager.c	/^static int pageInJournal(PgHdr *pPg){$/;"	f	file:
pageReinit	.\btree.c	/^static void pageReinit(DbPage *pData){$/;"	f	file:
pageSize	.\btreeInt.h	/^  u32 pageSize;         \/* Total number of bytes on a page *\/$/;"	m	struct:BtShared
pageSize	.\pager.c	/^  int pageSize;               \/* Number of bytes in a page *\/$/;"	m	struct:Pager	file:
pageSizeFixed	.\btreeInt.h	/^  u8 pageSizeFixed;     \/* True if the page size can no longer be changed *\/$/;"	m	struct:BtShared
pagerBeginReadTransaction	.\pager.c	/^static int pagerBeginReadTransaction(Pager *pPager){$/;"	f	file:
pagerBeginReadTransaction	.\pager.c	790;"	d	file:
pagerLockDb	.\pager.c	/^static int pagerLockDb(Pager *pPager, int eLock){$/;"	f	file:
pagerOpenWalIfPresent	.\pager.c	/^static int pagerOpenWalIfPresent(Pager *pPager){$/;"	f	file:
pagerOpenWalIfPresent	.\pager.c	789;"	d	file:
pagerOpentemp	.\pager.c	/^static int pagerOpentemp($/;"	f	file:
pagerPagecount	.\pager.c	/^static int pagerPagecount(Pager *pPager, Pgno *pnPage){$/;"	f	file:
pagerPlaybackSavepoint	.\pager.c	/^static int pagerPlaybackSavepoint(Pager *pPager, PagerSavepoint *pSavepoint){$/;"	f	file:
pagerReportSize	.\pager.c	/^static void pagerReportSize(Pager *pPager){$/;"	f	file:
pagerReportSize	.\pager.c	2053;"	d	file:
pagerRollbackWal	.\pager.c	/^static int pagerRollbackWal(Pager *pPager){$/;"	f	file:
pagerRollbackWal	.\pager.c	787;"	d	file:
pagerStress	.\pager.c	/^static int pagerStress(void *p, PgHdr *pPg){$/;"	f	file:
pagerSyncHotJournal	.\pager.c	/^static int pagerSyncHotJournal(Pager *pPager){$/;"	f	file:
pagerUndoCallback	.\pager.c	/^static int pagerUndoCallback(void *pCtx, Pgno iPg){$/;"	f	file:
pagerUnlockAndRollback	.\pager.c	/^static void pagerUnlockAndRollback(Pager *pPager){$/;"	f	file:
pagerUnlockDb	.\pager.c	/^static int pagerUnlockDb(Pager *pPager, int eLock){$/;"	f	file:
pagerUnlockIfUnused	.\pager.c	/^static void pagerUnlockIfUnused(Pager *pPager){$/;"	f	file:
pagerUseWal	.\pager.c	/^static int pagerUseWal(Pager *pPager){$/;"	f	file:
pagerUseWal	.\pager.c	786;"	d	file:
pagerWalFrames	.\pager.c	/^static int pagerWalFrames($/;"	f	file:
pagerWalFrames	.\pager.c	788;"	d	file:
pager_cksum	.\pager.c	/^static u32 pager_cksum(Pager *pPager, const u8 *aData){$/;"	f	file:
pager_datahash	.\pager.c	/^static u32 pager_datahash(int nByte, unsigned char *pData){$/;"	f	file:
pager_datahash	.\pager.c	1169;"	d	file:
pager_delmaster	.\pager.c	/^static int pager_delmaster(Pager *pPager, const char *zMaster){$/;"	f	file:
pager_end_transaction	.\pager.c	/^static int pager_end_transaction(Pager *pPager, int hasMaster){$/;"	f	file:
pager_error	.\pager.c	/^static int pager_error(Pager *pPager, int rc){$/;"	f	file:
pager_incr_changecounter	.\pager.c	/^static int pager_incr_changecounter(Pager *pPager, int isDirectMode){$/;"	f	file:
pager_lookup	.\pager.c	/^static PgHdr *pager_lookup(Pager *pPager, Pgno pgno){$/;"	f	file:
pager_open_journal	.\pager.c	/^static int pager_open_journal(Pager *pPager){$/;"	f	file:
pager_pagehash	.\pager.c	/^static u32 pager_pagehash(PgHdr *pPage){$/;"	f	file:
pager_pagehash	.\pager.c	1170;"	d	file:
pager_playback	.\pager.c	/^static int pager_playback(Pager *pPager, int isHot){$/;"	f	file:
pager_playback_one_page	.\pager.c	/^static int pager_playback_one_page($/;"	f	file:
pager_reset	.\pager.c	/^static void pager_reset(Pager *pPager){$/;"	f	file:
pager_set_pagehash	.\pager.c	/^static void pager_set_pagehash(PgHdr *pPage){$/;"	f	file:
pager_set_pagehash	.\pager.c	1171;"	d	file:
pager_truncate	.\pager.c	/^static int pager_truncate(Pager *pPager, Pgno nPage){$/;"	f	file:
pager_unlock	.\pager.c	/^static void pager_unlock(Pager *pPager){$/;"	f	file:
pager_wait_on_lock	.\pager.c	/^static int pager_wait_on_lock(Pager *pPager, int locktype){$/;"	f	file:
pager_write	.\pager.c	/^static int pager_write(PgHdr *pPg){$/;"	f	file:
pager_write_pagelist	.\pager.c	/^static int pager_write_pagelist(Pager *pPager, PgHdr *pList){$/;"	f	file:
parentWrite	.\rtree.c	/^static int parentWrite(Rtree *pRtree, sqlite3_int64 iNode, sqlite3_int64 iPar){$/;"	f	file:
parseCell	.\btree.c	957;"	d	file:
parseDateOrTime	.\date.c	/^static int parseDateOrTime($/;"	f	file:
parseError	.\sqliteInt.h	/^  u8 parseError;       \/* True after a parsing error.  Ticket #1794 *\/$/;"	m	struct:Parse
parseHhMmSs	.\date.c	/^static int parseHhMmSs(const char *zDate, DateTime *p){$/;"	f	file:
parseModifier	.\date.c	/^static int parseModifier(const char *zMod, DateTime *p){$/;"	f	file:
parseTimezone	.\date.c	/^static int parseTimezone(const char *zDate, DateTime *p){$/;"	f	file:
parseYyyyMmDd	.\date.c	/^static int parseYyyyMmDd(const char *zDate, DateTime *p){$/;"	f	file:
pathToDel	.\os_os2.c	/^  char* pathToDel;          \/* Name of file to delete on close, NULL if not *\/$/;"	m	struct:os2File	file:
patternCompare	.\func.c	/^static int patternCompare($/;"	f	file:
payloadSize	.\vdbeInt.h	/^  int payloadSize;      \/* Total number of bytes in the record *\/$/;"	m	struct:VdbeCursor
pc	.\vdbeInt.h	/^  int pc;                 \/* Program Counter *\/$/;"	m	struct:VdbeFrame
pc	.\vdbeInt.h	/^  int pc;                 \/* The program counter *\/$/;"	m	struct:Vdbe
pcache	.\sqliteInt.h	/^  sqlite3_pcache_methods pcache;    \/* Low-level page-cache interface *\/$/;"	m	struct:Sqlite3Config
pcache1	.\pcache1.c	97;"	d	file:
pcache1Alloc	.\pcache1.c	/^static void *pcache1Alloc(int nByte){$/;"	f	file:
pcache1AllocPage	.\pcache1.c	/^static PgHdr1 *pcache1AllocPage(PCache1 *pCache){$/;"	f	file:
pcache1Cachesize	.\pcache1.c	/^static void pcache1Cachesize(sqlite3_pcache *p, int nMax){$/;"	f	file:
pcache1Create	.\pcache1.c	/^static sqlite3_pcache *pcache1Create(int szPage, int bPurgeable){$/;"	f	file:
pcache1Destroy	.\pcache1.c	/^static void pcache1Destroy(sqlite3_pcache *p){$/;"	f	file:
pcache1EnforceMaxPage	.\pcache1.c	/^static void pcache1EnforceMaxPage(void){$/;"	f	file:
pcache1EnterMutex	.\pcache1.c	117;"	d	file:
pcache1Fetch	.\pcache1.c	/^static void *pcache1Fetch(sqlite3_pcache *p, unsigned int iKey, int createFlag){$/;"	f	file:
pcache1Free	.\pcache1.c	/^static void pcache1Free(void *p){$/;"	f	file:
pcache1FreePage	.\pcache1.c	/^static void pcache1FreePage(PgHdr1 *p){$/;"	f	file:
pcache1Init	.\pcache1.c	/^static int pcache1Init(void *NotUsed){$/;"	f	file:
pcache1LeaveMutex	.\pcache1.c	118;"	d	file:
pcache1MemSize	.\pcache1.c	/^static int pcache1MemSize(void *p){$/;"	f	file:
pcache1Pagecount	.\pcache1.c	/^static int pcache1Pagecount(sqlite3_pcache *p){$/;"	f	file:
pcache1PinPage	.\pcache1.c	/^static void pcache1PinPage(PgHdr1 *pPage){$/;"	f	file:
pcache1Rekey	.\pcache1.c	/^static void pcache1Rekey($/;"	f	file:
pcache1RemoveFromHash	.\pcache1.c	/^static void pcache1RemoveFromHash(PgHdr1 *pPage){$/;"	f	file:
pcache1ResizeHash	.\pcache1.c	/^static int pcache1ResizeHash(PCache1 *p){$/;"	f	file:
pcache1Shutdown	.\pcache1.c	/^static void pcache1Shutdown(void *NotUsed){$/;"	f	file:
pcache1Truncate	.\pcache1.c	/^static void pcache1Truncate(sqlite3_pcache *p, unsigned int iLimit){$/;"	f	file:
pcache1TruncateUnsafe	.\pcache1.c	/^static void pcache1TruncateUnsafe($/;"	f	file:
pcache1Unpin	.\pcache1.c	/^static void pcache1Unpin(sqlite3_pcache *p, void *pPg, int reuseUnlikely){$/;"	f	file:
pcache1_g	.\pcache1.c	/^} pcache1_g;$/;"	v	typeref:struct:PCacheGlobal	file:
pcacheAddToDirtyList	.\pcache.c	/^static void pcacheAddToDirtyList(PgHdr *pPage){$/;"	f	file:
pcacheCheckSynced	.\pcache.c	/^static int pcacheCheckSynced(PCache *pCache){$/;"	f	file:
pcacheMergeDirtyList	.\pcache.c	/^static PgHdr *pcacheMergeDirtyList(PgHdr *pA, PgHdr *pB){$/;"	f	file:
pcacheRemoveFromDirtyList	.\pcache.c	/^static void pcacheRemoveFromDirtyList(PgHdr *pPage){$/;"	f	file:
pcacheSortDirtyList	.\pcache.c	/^static PgHdr *pcacheSortDirtyList(PgHdr *pIn){$/;"	f	file:
pcacheUnpin	.\pcache.c	/^static void pcacheUnpin(PgHdr *p){$/;"	f	file:
pendingTerms	.\fts3Int.h	/^  Fts3Hash pendingTerms;$/;"	m	struct:Fts3Table
pgno	.\btreeInt.h	/^  Pgno pgno;           \/* Page number for this page *\/$/;"	m	struct:MemPage
pgno	.\pcache.h	/^  Pgno pgno;                     \/* Page number for this page *\/$/;"	m	struct:PgHdr
pgnoRoot	.\btreeInt.h	/^  Pgno pgnoRoot;            \/* The root page of this tree *\/$/;"	m	struct:BtCursor
plan	.\sqliteInt.h	/^  WherePlan plan;       \/* query plan for this element of the FROM clause *\/$/;"	m	struct:WhereLevel
plan	.\where.c	/^  WherePlan plan;    \/* The lookup strategy *\/$/;"	m	struct:WhereCost	file:
pnBytesFreed	.\sqliteInt.h	/^  int *pnBytesFreed;            \/* If not NULL, increment this in DbFree() *\/$/;"	m	struct:sqlite3
porterClose	.\fts3_porter.c	/^static int porterClose(sqlite3_tokenizer_cursor *pCursor){$/;"	f	file:
porterCreate	.\fts3_porter.c	/^static int porterCreate($/;"	f	file:
porterDestroy	.\fts3_porter.c	/^static int porterDestroy(sqlite3_tokenizer *pTokenizer){$/;"	f	file:
porterIdChar	.\fts3_porter.c	/^static const char porterIdChar[] = {$/;"	v	file:
porterNext	.\fts3_porter.c	/^static int porterNext($/;"	f	file:
porterOpen	.\fts3_porter.c	/^static int porterOpen($/;"	f	file:
porterTokenizerModule	.\fts3_porter.c	/^static const sqlite3_tokenizer_module porterTokenizerModule = {$/;"	v	file:
porter_stemmer	.\fts3_porter.c	/^static void porter_stemmer(const char *zIn, int nIn, char *zOut, int *pnOut){$/;"	f	file:
porter_tokenizer	.\fts3_porter.c	/^typedef struct porter_tokenizer {$/;"	s	file:
porter_tokenizer	.\fts3_porter.c	/^} porter_tokenizer;$/;"	t	typeref:struct:porter_tokenizer	file:
porter_tokenizer_cursor	.\fts3_porter.c	/^typedef struct porter_tokenizer_cursor {$/;"	s	file:
porter_tokenizer_cursor	.\fts3_porter.c	/^} porter_tokenizer_cursor;$/;"	t	typeref:struct:porter_tokenizer_cursor	file:
ppNextElem	.\fts3_write.c	/^  Fts3HashElem **ppNextElem;$/;"	m	struct:Fts3SegReader	file:
prefix	.\printf.c	/^  etByte prefix;           \/* Offset into aPrefix[] of the prefix string *\/$/;"	m	struct:et_info	file:
prepare	.\sqlite3ext.h	/^  int  (*prepare)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);$/;"	m	struct:sqlite3_api_routines
prepare16	.\sqlite3ext.h	/^  int  (*prepare16)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);$/;"	m	struct:sqlite3_api_routines
prepare16_v2	.\sqlite3ext.h	/^  int (*prepare16_v2)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);$/;"	m	struct:sqlite3_api_routines
prepare_v2	.\sqlite3ext.h	/^  int (*prepare_v2)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);$/;"	m	struct:sqlite3_api_routines
prereqAll	.\where.c	/^  Bitmask prereqAll;      \/* Bitmask of tables referenced by pExpr *\/$/;"	m	struct:WhereTerm	file:
prereqRight	.\where.c	/^  Bitmask prereqRight;    \/* Bitmask of tables used by pExpr->pRight *\/$/;"	m	struct:WhereTerm	file:
prev	.\fts3_hash.h	/^  Fts3HashElem *next, *prev; \/* Next and previous elements in the table *\/$/;"	m	struct:Fts3HashElem
prev	.\hash.h	/^  HashElem *next, *prev;       \/* Next and previous elements in the table *\/$/;"	m	struct:HashElem
prev	.\mem3.c	/^      u32 prev;       \/* Index in mem3.aPool[] of previous free chunk *\/$/;"	m	struct:Mem3Block::__anon3::__anon5	file:
prev	.\mem5.c	/^  int prev;       \/* Index of previous free chunk *\/$/;"	m	struct:Mem5Link	file:
prev	.\vdbeInt.h	/^  HashElem *prev;        \/* Previously accessed hash elemen *\/$/;"	m	struct:Set
prevSize	.\mem3.c	/^      u32 prevSize;   \/* Size of previous chunk in Mem3Block elements *\/$/;"	m	struct:Mem3Block::__anon3::__anon4	file:
previous_mode_data	.\shell.c	/^struct previous_mode_data {$/;"	s	file:
print_pager_state	.\pager.c	/^static char *print_pager_state(Pager *p){$/;"	f	file:
process_input	.\shell.c	/^static int process_input(struct callback_data *p, FILE *in){$/;"	f	file:
process_sqliterc	.\shell.c	/^static int process_sqliterc($/;"	f	file:
profile	.\sqlite3ext.h	/^  void * (*profile)(sqlite3*,void(*)(void*,const char*,sqlite_uint64),void*);$/;"	m	struct:sqlite3_api_routines
progress_handler	.\sqlite3ext.h	/^  void  (*progress_handler)(sqlite3*,int,int(*)(void*),void*);$/;"	m	struct:sqlite3_api_routines
proxyBreakConchLock	.\os_unix.c	/^static int proxyBreakConchLock(unixFile *pFile, uuid_t myHostID){$/;"	f	file:
proxyCheckReservedLock	.\os_unix.c	/^static int proxyCheckReservedLock(sqlite3_file *id, int *pResOut) {$/;"	f	file:
proxyClose	.\os_unix.c	/^static int proxyClose(sqlite3_file *id) {$/;"	f	file:
proxyConchLock	.\os_unix.c	/^static int proxyConchLock(unixFile *pFile, uuid_t myHostID, int lockType){$/;"	f	file:
proxyCreateConchPathname	.\os_unix.c	/^static int proxyCreateConchPathname(char *dbPath, char **pConchPath){$/;"	f	file:
proxyCreateLockPath	.\os_unix.c	/^static int proxyCreateLockPath(const char *lockPath){$/;"	f	file:
proxyCreateUnixFile	.\os_unix.c	/^static int proxyCreateUnixFile($/;"	f	file:
proxyFileControl	.\os_unix.c	/^static int proxyFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f	file:
proxyGetDbPathForUnixFile	.\os_unix.c	/^static int proxyGetDbPathForUnixFile(unixFile *pFile, char *dbPath){$/;"	f	file:
proxyGetHostID	.\os_unix.c	/^static int proxyGetHostID(unsigned char *pHostID, int *pError){$/;"	f	file:
proxyGetLockPath	.\os_unix.c	/^static int proxyGetLockPath(const char *dbPath, char *lPath, size_t maxLen){$/;"	f	file:
proxyLock	.\os_unix.c	/^static int proxyLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
proxyLockingContext	.\os_unix.c	/^struct proxyLockingContext {$/;"	s	file:
proxyLockingContext	.\os_unix.c	/^typedef struct proxyLockingContext proxyLockingContext;$/;"	t	typeref:struct:proxyLockingContext	file:
proxyReleaseConch	.\os_unix.c	/^static int proxyReleaseConch(unixFile *pFile){$/;"	f	file:
proxyTakeConch	.\os_unix.c	/^static int proxyTakeConch(unixFile *pFile){$/;"	f	file:
proxyTransformUnixFile	.\os_unix.c	/^static int proxyTransformUnixFile(unixFile *pFile, const char *path) {$/;"	f	file:
proxyUnlock	.\os_unix.c	/^static int proxyUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
pseudoTableReg	.\vdbeInt.h	/^  int pseudoTableReg;   \/* Register holding pseudotable content. *\/$/;"	m	struct:VdbeCursor
pthreadMutexAlloc	.\mutex_unix.c	/^static sqlite3_mutex *pthreadMutexAlloc(int iType){$/;"	f	file:
pthreadMutexEnd	.\mutex_unix.c	/^static int pthreadMutexEnd(void){ return SQLITE_OK; }$/;"	f	file:
pthreadMutexEnter	.\mutex_unix.c	/^static void pthreadMutexEnter(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexFree	.\mutex_unix.c	/^static void pthreadMutexFree(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexHeld	.\mutex_unix.c	/^static int pthreadMutexHeld(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexInit	.\mutex_unix.c	/^static int pthreadMutexInit(void){ return SQLITE_OK; }$/;"	f	file:
pthreadMutexLeave	.\mutex_unix.c	/^static void pthreadMutexLeave(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexNotheld	.\mutex_unix.c	/^static int pthreadMutexNotheld(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexTry	.\mutex_unix.c	/^static int pthreadMutexTry(sqlite3_mutex *p){$/;"	f	file:
ptrmapGet	.\btree.c	/^static int ptrmapGet(BtShared *pBt, Pgno key, u8 *pEType, Pgno *pPgno){$/;"	f	file:
ptrmapGet	.\btree.c	841;"	d	file:
ptrmapPageno	.\btree.c	/^static Pgno ptrmapPageno(BtShared *pBt, Pgno pgno){$/;"	f	file:
ptrmapPut	.\btree.c	/^static void ptrmapPut(BtShared *pBt, Pgno key, u8 eType, Pgno parent, int *pRC){$/;"	f	file:
ptrmapPut	.\btree.c	840;"	d	file:
ptrmapPutOvflPtr	.\btree.c	/^static void ptrmapPutOvflPtr(MemPage *pPage, u8 *pCell, int *pRC){$/;"	f	file:
ptrmapPutOvflPtr	.\btree.c	842;"	d	file:
pushOntoSorter	.\select.c	/^static void pushOntoSorter($/;"	f	file:
put2byte	.\btreeInt.h	640;"	d
put32bits	.\pager.c	1028;"	d	file:
put4byte	.\btreeInt.h	642;"	d
putVarint	.\sqliteInt.h	2844;"	d
putVarint32	.\sqliteInt.h	2842;"	d
pzErrMsg	.\sqliteInt.h	/^  char **pzErrMsg;    \/* Error message stored here *\/$/;"	m	struct:__anon16
querySharedCacheTableLock	.\btree.c	/^static int querySharedCacheTableLock(Btree *p, Pgno iTab, u8 eLock){$/;"	f	file:
querySharedCacheTableLock	.\btree.c	88;"	d	file:
queryTestTokenizer	.\fts3_expr.c	/^static int queryTestTokenizer($/;"	f	file:
queryTokenizer	.\fts3_tokenizer.c	/^int queryTokenizer($/;"	f	file:
quoteFunc	.\func.c	/^static void quoteFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
r	.\sqliteInt.h	/^    double r;       \/* Value if eType is SQLITE_FLOAT or SQLITE_INTEGER *\/$/;"	m	union:IndexSample::__anon10
r	.\vdbeInt.h	/^  double r;           \/* Real value *\/$/;"	m	struct:Mem
rCost	.\where.c	/^  double rCost;      \/* Overall cost of pursuing this search strategy *\/$/;"	m	struct:WhereCost	file:
rSum	.\func.c	/^  double rSum;      \/* Floating point sum *\/$/;"	m	struct:SumCtx	file:
rValue	.\rtree.c	/^  double rValue;                    \/* Constraint value. *\/$/;"	m	struct:RtreeConstraint	file:
randomBlob	.\func.c	/^static void randomBlob($/;"	f	file:
randomByte	.\random.c	/^static u8 randomByte(void){$/;"	f	file:
randomFill	.\mem2.c	/^static void randomFill(char *pBuf, int nByte){$/;"	f	file:
randomFunc	.\func.c	/^static void randomFunc($/;"	f	file:
randomness	.\sqlite3ext.h	/^  void (*randomness)(int,void*);$/;"	m	struct:sqlite3_api_routines
rc	.\backup.c	/^  int rc;                  \/* Backup process error code *\/$/;"	m	struct:sqlite3_backup	file:
rc	.\sqliteInt.h	/^  int rc;              \/* Return code from execution *\/$/;"	m	struct:Parse
rc	.\sqliteInt.h	/^  int rc;             \/* Result code stored here *\/$/;"	m	struct:__anon16
rc	.\table.c	/^  int rc;            \/* Return code from sqlite3_exec() *\/$/;"	m	struct:TabResult	file:
rc	.\tclsqlite.c	/^  int rc;                    \/* Return code of most recent sqlite3_exec() *\/$/;"	m	struct:SqliteDb	file:
rc	.\vdbeInt.h	/^  int rc;                 \/* Value to return *\/$/;"	m	struct:Vdbe
read32bits	.\pager.c	/^static int read32bits(sqlite3_file *fd, i64 offset, u32 *pRes){$/;"	f	file:
readCoord	.\rtree.c	/^static void readCoord(u8 *p, RtreeCoord *pCoord){$/;"	f	file:
readDbPage	.\pager.c	/^static int readDbPage(PgHdr *pPg){$/;"	f	file:
readInt16	.\rtree.c	/^static int readInt16(u8 *p){$/;"	f	file:
readInt64	.\rtree.c	/^static i64 readInt64(u8 *p){$/;"	f	file:
readJournalHdr	.\pager.c	/^static int readJournalHdr($/;"	f	file:
readLock	.\wal.c	/^  i16 readLock;              \/* Which read lock is being held.  -1 for none *\/$/;"	m	struct:Wal	file:
readMasterJournal	.\pager.c	/^static int readMasterJournal(sqlite3_file *pJrnl, char *zMaster, u32 nMaster){$/;"	f	file:
readOnly	.\btreeInt.h	/^  u8 readOnly;          \/* True if the underlying file is readonly *\/$/;"	m	struct:BtShared
readOnly	.\pager.c	/^  u8 readOnly;                \/* True for a read-only database *\/$/;"	m	struct:Pager	file:
readOnly	.\vdbeInt.h	/^  u8 readOnly;            \/* True for read-only statements *\/$/;"	m	struct:Vdbe
readOnly	.\wal.c	/^  u8 readOnly;               \/* True if the WAL file is open read-only *\/$/;"	m	struct:Wal	file:
read_history	.\shell.c	47;"	d	file:
readline	.\shell.c	45;"	d	file:
readpoint	.\memjournal.c	/^  FilePoint readpoint;            \/* Pointer to the end of the last xRead() *\/$/;"	m	struct:MemJournal	file:
readsTable	.\insert.c	/^static int readsTable(Parse *p, int iStartAddr, int iDb, Table *pTab){$/;"	f	file:
realloc	.\sqlite3ext.h	/^  void *(*realloc)(void*,int);$/;"	m	struct:sqlite3_api_routines
referencesOtherTables	.\where.c	/^static int referencesOtherTables($/;"	f	file:
regCtr	.\sqliteInt.h	/^  int regCtr;           \/* Memory register holding the rowid counter *\/$/;"	m	struct:AutoincInfo
regRoot	.\sqliteInt.h	/^  int regRoot;         \/* Register holding root page number for new objects *\/$/;"	m	struct:Parse
regRowid	.\sqliteInt.h	/^  int regRowid;        \/* Register holding rowid of CREATE TABLE entry *\/$/;"	m	struct:Parse
registerTokenizer	.\fts3_tokenizer.c	/^int registerTokenizer($/;"	f	file:
registerTrace	.\vdbe.c	/^static void registerTrace(FILE *out, int iReg, Mem *p){$/;"	f	file:
rehash	.\hash.c	/^static int rehash(Hash *pH, unsigned int new_size){$/;"	f	file:
reindexDatabases	.\build.c	/^static void reindexDatabases(Parse *pParse, char const *zColl){$/;"	f	file:
reindexTable	.\build.c	/^static void reindexTable(Parse *pParse, Table *pTab, char const *zColl){$/;"	f	file:
reinsertNodeContent	.\rtree.c	/^static int reinsertNodeContent(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
releaseAllSavepoints	.\pager.c	/^static void releaseAllSavepoints(Pager *pPager){$/;"	f	file:
releaseInodeInfo	.\os_unix.c	/^static void releaseInodeInfo(unixFile *pFile){$/;"	f	file:
releaseMemArray	.\vdbeaux.c	/^static void releaseMemArray(Mem *p, int N){$/;"	f	file:
releasePage	.\btree.c	/^static void releasePage(MemPage *pPage){$/;"	f	file:
release_memory	.\sqlite3ext.h	/^  int (*release_memory)(int);$/;"	m	struct:sqlite3_api_routines
reloadTableSchema	.\alter.c	/^static void reloadTableSchema(Parse *pParse, Table *pTab, const char *zName){$/;"	f	file:
relocatePage	.\btree.c	/^static int relocatePage($/;"	f	file:
removeElementGivenHash	.\hash.c	/^static void removeElementGivenHash($/;"	f	file:
removeFromBlockedList	.\notify.c	/^static void removeFromBlockedList(sqlite3 *db){$/;"	f	file:
removeFromSharingList	.\btree.c	/^static int removeFromSharingList(BtShared *pBt){$/;"	f	file:
removeNode	.\rtree.c	/^static int removeNode(Rtree *pRtree, RtreeNode *pNode, int iHeight){$/;"	f	file:
renameParentFunc	.\alter.c	/^static void renameParentFunc($/;"	f	file:
renameTableFunc	.\alter.c	/^static void renameTableFunc($/;"	f	file:
renameTriggerFunc	.\alter.c	/^static void renameTriggerFunc($/;"	f	file:
renderLogMsg	.\printf.c	/^static void renderLogMsg(int iErrCode, const char *zFormat, va_list ap){$/;"	f	file:
replaceFunc	.\func.c	/^static void replaceFunc($/;"	f	file:
reserved	.\os_unix.c	/^  int reserved;$/;"	m	struct:afpLockingContext	file:
reset	.\sqlite3ext.h	/^  int  (*reset)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines
resetAccumulator	.\select.c	/^static void resetAccumulator(Parse *pParse, AggInfo *pAggInfo){$/;"	f	file:
resolveAlias	.\resolve.c	/^static void resolveAlias($/;"	f	file:
resolveAsName	.\resolve.c	/^static int resolveAsName($/;"	f	file:
resolveAttachExpr	.\attach.c	/^static int resolveAttachExpr(NameContext *pName, Expr *pExpr)$/;"	f	file:
resolveCompoundOrderBy	.\resolve.c	/^static int resolveCompoundOrderBy($/;"	f	file:
resolveExprStep	.\resolve.c	/^static int resolveExprStep(Walker *pWalker, Expr *pExpr){$/;"	f	file:
resolveOrderByTermToExprList	.\resolve.c	/^static int resolveOrderByTermToExprList($/;"	f	file:
resolveOrderGroupBy	.\resolve.c	/^static int resolveOrderGroupBy($/;"	f	file:
resolveOutOfRangeError	.\resolve.c	/^static void resolveOutOfRangeError($/;"	f	file:
resolveP2Values	.\vdbeaux.c	/^static void resolveP2Values(Vdbe *p, int *pMaxFuncArgs){$/;"	f	file:
resolveSelectStep	.\resolve.c	/^static int resolveSelectStep(Walker *pWalker, Select *p){$/;"	f	file:
resolve_backslashes	.\shell.c	/^static void resolve_backslashes(char *z){$/;"	f	file:
restoreCursorPosition	.\btree.c	699;"	d	file:
result_blob	.\sqlite3ext.h	/^  void  (*result_blob)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines
result_double	.\sqlite3ext.h	/^  void  (*result_double)(sqlite3_context*,double);$/;"	m	struct:sqlite3_api_routines
result_error	.\sqlite3ext.h	/^  void  (*result_error)(sqlite3_context*,const char*,int);$/;"	m	struct:sqlite3_api_routines
result_error16	.\sqlite3ext.h	/^  void  (*result_error16)(sqlite3_context*,const void*,int);$/;"	m	struct:sqlite3_api_routines
result_error_code	.\sqlite3ext.h	/^  void (*result_error_code)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines
result_error_nomem	.\sqlite3ext.h	/^  void (*result_error_nomem)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines
result_error_toobig	.\sqlite3ext.h	/^  void (*result_error_toobig)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines
result_int	.\sqlite3ext.h	/^  void  (*result_int)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines
result_int64	.\sqlite3ext.h	/^  void  (*result_int64)(sqlite3_context*,sqlite_int64);$/;"	m	struct:sqlite3_api_routines
result_null	.\sqlite3ext.h	/^  void  (*result_null)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines
result_text	.\sqlite3ext.h	/^  void  (*result_text)(sqlite3_context*,const char*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines
result_text16	.\sqlite3ext.h	/^  void  (*result_text16)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines
result_text16be	.\sqlite3ext.h	/^  void  (*result_text16be)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines
result_text16le	.\sqlite3ext.h	/^  void  (*result_text16le)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines
result_value	.\sqlite3ext.h	/^  void  (*result_value)(sqlite3_context*,sqlite3_value*);$/;"	m	struct:sqlite3_api_routines
result_zeroblob	.\sqlite3ext.h	/^  void (*result_zeroblob)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines
retRangeStart	.\os_unix.c	/^  unsigned long long retRangeStart; \/* nbr of 1st byte locked if successful *\/$/;"	m	struct:ByteRangeLockPB2	file:
returnSingleInt	.\pragma.c	/^static void returnSingleInt(Parse *pParse, const char *zLabel, i64 value){$/;"	f	file:
rollback_hook	.\sqlite3ext.h	/^  void * (*rollback_hook)(sqlite3*,void(*)(void*),void*);$/;"	m	struct:sqlite3_api_routines
roundFunc	.\func.c	/^static void roundFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
rowSetListToTree	.\rowset.c	/^static struct RowSetEntry *rowSetListToTree(struct RowSetEntry *pList){$/;"	f	file:
rowSetMerge	.\rowset.c	/^static struct RowSetEntry *rowSetMerge($/;"	f	file:
rowSetNDeepTree	.\rowset.c	/^static struct RowSetEntry *rowSetNDeepTree($/;"	f	file:
rowSetSort	.\rowset.c	/^static void rowSetSort(RowSet *p){$/;"	f	file:
rowSetToList	.\rowset.c	/^static void rowSetToList(RowSet *p){$/;"	f	file:
rowSetTreeToList	.\rowset.c	/^static void rowSetTreeToList($/;"	f	file:
rowid	.\sqliteInt.h	/^  i64 rowid;          \/* Used by UNPACKED_PREFIX_SEARCH *\/$/;"	m	struct:UnpackedRecord
rowidIsValid	.\vdbeInt.h	/^  Bool rowidIsValid;    \/* True if lastRowid is valid *\/$/;"	m	struct:VdbeCursor
rowidWrite	.\rtree.c	/^static int rowidWrite(Rtree *pRtree, sqlite3_int64 iRowid, sqlite3_int64 iNode){$/;"	f	file:
rtreeBestIndex	.\rtree.c	/^static int rtreeBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){$/;"	f	file:
rtreeClose	.\rtree.c	/^static int rtreeClose(sqlite3_vtab_cursor *cur){$/;"	f	file:
rtreeColumn	.\rtree.c	/^static int rtreeColumn(sqlite3_vtab_cursor *cur, sqlite3_context *ctx, int i){$/;"	f	file:
rtreeConnect	.\rtree.c	/^static int rtreeConnect($/;"	f	file:
rtreeCreate	.\rtree.c	/^static int rtreeCreate($/;"	f	file:
rtreeDestroy	.\rtree.c	/^static int rtreeDestroy(sqlite3_vtab *pVtab){$/;"	f	file:
rtreeDisconnect	.\rtree.c	/^static int rtreeDisconnect(sqlite3_vtab *pVtab){$/;"	f	file:
rtreeEof	.\rtree.c	/^static int rtreeEof(sqlite3_vtab_cursor *cur){$/;"	f	file:
rtreeFilter	.\rtree.c	/^static int rtreeFilter($/;"	f	file:
rtreeInit	.\rtree.c	/^static int rtreeInit($/;"	f	file:
rtreeInsertCell	.\rtree.c	/^static int rtreeInsertCell($/;"	f	file:
rtreeModule	.\rtree.c	/^static sqlite3_module rtreeModule = {$/;"	v	file:
rtreeNext	.\rtree.c	/^static int rtreeNext(sqlite3_vtab_cursor *pVtabCursor){$/;"	f	file:
rtreeOpen	.\rtree.c	/^static int rtreeOpen(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor){$/;"	f	file:
rtreeReference	.\rtree.c	/^static void rtreeReference(Rtree *pRtree){$/;"	f	file:
rtreeRelease	.\rtree.c	/^static void rtreeRelease(Rtree *pRtree){$/;"	f	file:
rtreeRename	.\rtree.c	/^static int rtreeRename(sqlite3_vtab *pVtab, const char *zNewName){$/;"	f	file:
rtreeRowid	.\rtree.c	/^static int rtreeRowid(sqlite3_vtab_cursor *pVtabCursor, sqlite_int64 *pRowid){$/;"	f	file:
rtreeSqlInit	.\rtree.c	/^static int rtreeSqlInit($/;"	f	file:
rtreeUpdate	.\rtree.c	/^static int rtreeUpdate($/;"	f	file:
rtreedepth	.\rtree.c	/^static void rtreedepth(sqlite3_context *ctx, int nArg, sqlite3_value **apArg){$/;"	f	file:
rtreenode	.\rtree.c	/^static void rtreenode(sqlite3_context *ctx, int nArg, sqlite3_value **apArg){$/;"	f	file:
runOnlyOnce	.\vdbeInt.h	/^  u8 runOnlyOnce;         \/* Automatically expire on reset *\/$/;"	m	struct:Vdbe
run_schema_dump_query	.\shell.c	/^static int run_schema_dump_query($/;"	f	file:
run_table_dump_query	.\shell.c	/^static int run_table_dump_query($/;"	f	file:
s	.\date.c	/^  double s;          \/* Seconds *\/$/;"	m	struct:DateTime	file:
s	.\random.c	/^  unsigned char s[256];          \/* State variables *\/$/;"	m	struct:sqlite3PrngType	file:
s	.\vdbeInt.h	/^  Mem s;                \/* The return value is stored here *\/$/;"	m	struct:sqlite3_context
sArg	.\sqliteInt.h	/^  Token sArg;                \/* Complete text of a module argument *\/$/;"	m	struct:Parse
sBegin	.\shell.c	/^static struct rusage sBegin;$/;"	v	typeref:struct:rusage	file:
sColMap	.\sqliteInt.h	/^  struct sColMap {  \/* Mapping of columns in pFrom to columns in zTo *\/$/;"	s	struct:FKey
sLastToken	.\sqliteInt.h	/^  Token sLastToken;    \/* The last token parsed *\/$/;"	m	struct:Parse
sNameToken	.\sqliteInt.h	/^  Token sNameToken;    \/* Token with unqualified schema object name *\/$/;"	m	struct:Parse
safeToUseEvalObjv	.\tclsqlite.c	/^static int safeToUseEvalObjv(Tcl_Interp *interp, Tcl_Obj *pCmd){$/;"	f	file:
safety_level	.\sqliteInt.h	/^  u8 safety_level;     \/* How aggressive at syncing data to disk *\/$/;"	m	struct:Db
saveAllCursors	.\btree.c	/^static int saveAllCursors(BtShared *pBt, Pgno iRoot, BtCursor *pExcept){$/;"	f	file:
saveCursorPosition	.\btree.c	/^static int saveCursorPosition(BtCursor *pCur){$/;"	f	file:
save_err_msg	.\shell.c	/^static char *save_err_msg($/;"	f	file:
savedNQueryLoop	.\sqliteInt.h	/^  double savedNQueryLoop;        \/* pParse->nQueryLoop outside the WHERE loop *\/$/;"	m	struct:WhereInfo
saved_cnt	.\pager.c	/^static int saved_cnt;$/;"	v	file:
scalarFunc	.\fts3_tokenizer.c	/^static void scalarFunc($/;"	f	file:
schemaIsValid	.\prepare.c	/^static void schemaIsValid(Parse *pParse){$/;"	f	file:
schema_cookie	.\sqliteInt.h	/^  int schema_cookie;   \/* Database schema version number for this file *\/$/;"	m	struct:Schema
scratchAllocOut	.\malloc.c	/^static int scratchAllocOut = 0;$/;"	v	file:
sectorSize	.\os_win.c	/^  DWORD sectorSize;       \/* Sector size of the device file is on *\/$/;"	m	struct:winFile	file:
sectorSize	.\pager.c	/^  u32 sectorSize;             \/* Assumed sector size during rollback *\/$/;"	m	struct:Pager	file:
secureDelete	.\btreeInt.h	/^  u8 secureDelete;      \/* True if secure_delete is enabled *\/$/;"	m	struct:BtShared
seekAndRead	.\os_unix.c	/^static int seekAndRead(unixFile *id, sqlite3_int64 offset, void *pBuf, int cnt){$/;"	f	file:
seekAndWrite	.\os_unix.c	/^static int seekAndWrite(unixFile *id, i64 offset, const void *pBuf, int cnt){$/;"	f	file:
seekResult	.\vdbeInt.h	/^  int seekResult;$/;"	m	struct:VdbeCursor
seekWinFile	.\os_win.c	/^static int seekWinFile(winFile *pFile, sqlite3_int64 iOffset){$/;"	f	file:
seenInterrupt	.\shell.c	/^static volatile int seenInterrupt = 0;$/;"	v	file:
selFlags	.\sqliteInt.h	/^  u16 selFlags;          \/* Various SF_* values *\/$/;"	m	struct:Select
selectAddColumnTypeAndCollation	.\select.c	/^static void selectAddColumnTypeAndCollation($/;"	f	file:
selectAddSubqueryTypeInfo	.\select.c	/^static int selectAddSubqueryTypeInfo(Walker *pWalker, Select *p){$/;"	f	file:
selectColumnsFromExprList	.\select.c	/^static int selectColumnsFromExprList($/;"	f	file:
selectExpander	.\select.c	/^static int selectExpander(Walker *pWalker, Select *p){$/;"	f	file:
selectInnerLoop	.\select.c	/^static void selectInnerLoop($/;"	f	file:
selectNodeIsConstant	.\expr.c	/^static int selectNodeIsConstant(Walker *pWalker, Select *NotUsed){$/;"	f	file:
selectOpName	.\select.c	/^static const char *selectOpName(int id){$/;"	f	file:
semCheckReservedLock	.\os_unix.c	/^static int semCheckReservedLock(sqlite3_file *id, int *pResOut) {$/;"	f	file:
semClose	.\os_unix.c	/^static int semClose(sqlite3_file *id) {$/;"	f	file:
semLock	.\os_unix.c	/^static int semLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
semUnlock	.\os_unix.c	/^static int semUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
separator	.\shell.c	/^  char separator[20];    \/* Separator character for MODE_List *\/$/;"	m	struct:callback_data	file:
seqCount	.\vdbeInt.h	/^  i64 seqCount;         \/* Sequence counter *\/$/;"	m	struct:VdbeCursor
setChildPtrmaps	.\btree.c	/^static int setChildPtrmaps(MemPage *pPage){$/;"	f	file:
setChildPtrmaps	.\btree.c	3030;"	d	file:
setDateTimeToCurrent	.\date.c	/^static void setDateTimeToCurrent(sqlite3_context *context, DateTime *p){$/;"	f	file:
setJoinExpr	.\select.c	/^static void setJoinExpr(Expr *p, int iTable){$/;"	f	file:
setLikeOptFlag	.\func.c	/^static void setLikeOptFlag(sqlite3 *db, const char *zName, u8 flagVal){$/;"	f	file:
setMaster	.\pager.c	/^  u8 setMaster;               \/* True if a m-j name has been written to jrnl *\/$/;"	m	struct:Pager	file:
setPendingFd	.\os_unix.c	/^static void setPendingFd(unixFile *pFile){$/;"	f	file:
setResultStrOrError	.\vdbeapi.c	/^static void setResultStrOrError($/;"	f	file:
setSectorSize	.\pager.c	/^static void setSectorSize(Pager *pPager){$/;"	f	file:
setSharedCacheTableLock	.\btree.c	/^static int setSharedCacheTableLock(Btree *p, Pgno iTable, u8 eLock){$/;"	f	file:
setSharedCacheTableLock	.\btree.c	89;"	d	file:
setTestUnlockNotifyVars	.\tclsqlite.c	/^static void setTestUnlockNotifyVars(Tcl_Interp *interp, int iArg, int nArg){$/;"	f	file:
setTestUnlockNotifyVars	.\tclsqlite.c	634;"	d	file:
set_authorizer	.\sqlite3ext.h	/^  int  (*set_authorizer)(sqlite3*,int(*)(void*,int,const char*,const char*,const char*,const char*),void*);$/;"	m	struct:sqlite3_api_routines
set_auxdata	.\sqlite3ext.h	/^  void  (*set_auxdata)(sqlite3_context*,int,void*,void (*)(void*));$/;"	m	struct:sqlite3_api_routines
set_table_name	.\shell.c	/^static void set_table_name(struct callback_data *p, const char *zName){$/;"	f	file:
setupLookaside	.\main.c	/^static int setupLookaside(sqlite3 *db, void *pBuf, int sz, int cnt){$/;"	f	file:
sharable	.\btreeInt.h	/^  u8 sharable;       \/* True if we can share pBt with another db *\/$/;"	m	struct:Btree
shared	.\os_win.c	/^  winceLock *shared;      \/* Global shared lock memory for the file  *\/$/;"	m	struct:winFile	file:
sharedByte	.\os_unix.c	/^  unsigned long long sharedByte;  \/* for AFP simulated shared lock *\/$/;"	m	struct:unixInodeInfo	file:
sharedCacheEnabled	.\sqliteInt.h	/^  int sharedCacheEnabled;           \/* true if shared-cache mode enabled *\/$/;"	m	struct:Sqlite3Config
sharedLockByte	.\os_win.c	/^  short sharedLockByte;   \/* Randomly chosen byte used as a shared lock *\/$/;"	m	struct:winFile	file:
sharedMask	.\os_unix.c	/^  u16 sharedMask;            \/* Mask of shared locks held *\/$/;"	m	struct:unixShm	file:
sharedMask	.\os_unix.c	/^  u8 sharedMask;             \/* Mask of shared locks held *\/$/;"	m	struct:unixShmNode	file:
sharedMask	.\os_win.c	/^  u16 sharedMask;            \/* Mask of shared locks held *\/$/;"	m	struct:winShm	file:
shellLog	.\shell.c	/^static void shellLog(void *pArg, int iErrCode, const char *zMsg){$/;"	f	file:
shell_callback	.\shell.c	/^static int shell_callback(void *pArg, int nArg, char **azArg, char **azCol, int *aiType){$/;"	f	file:
shell_exec	.\shell.c	/^static int shell_exec($/;"	f	file:
shellstaticFunc	.\shell.c	/^static void shellstaticFunc($/;"	f	file:
showHeader	.\shell.c	/^  int showHeader;        \/* True to show column names in List or Column mode *\/$/;"	m	struct:callback_data	file:
showHeader	.\shell.c	/^  int showHeader;$/;"	m	struct:previous_mode_data	file:
simpleClose	.\fts3_tokenizer1.c	/^static int simpleClose(sqlite3_tokenizer_cursor *pCursor){$/;"	f	file:
simpleCreate	.\fts3_tokenizer1.c	/^static int simpleCreate($/;"	f	file:
simpleDelim	.\fts3_tokenizer1.c	/^static int simpleDelim(simple_tokenizer *t, unsigned char c){$/;"	f	file:
simpleDestroy	.\fts3_tokenizer1.c	/^static int simpleDestroy(sqlite3_tokenizer *pTokenizer){$/;"	f	file:
simpleNext	.\fts3_tokenizer1.c	/^static int simpleNext($/;"	f	file:
simpleOpen	.\fts3_tokenizer1.c	/^static int simpleOpen($/;"	f	file:
simpleTokenizerModule	.\fts3_tokenizer1.c	/^static const sqlite3_tokenizer_module simpleTokenizerModule = {$/;"	v	file:
simple_tokenizer	.\fts3_tokenizer1.c	/^typedef struct simple_tokenizer {$/;"	s	file:
simple_tokenizer	.\fts3_tokenizer1.c	/^} simple_tokenizer;$/;"	t	typeref:struct:simple_tokenizer	file:
simple_tokenizer_cursor	.\fts3_tokenizer1.c	/^typedef struct simple_tokenizer_cursor {$/;"	s	file:
simple_tokenizer_cursor	.\fts3_tokenizer1.c	/^} simple_tokenizer_cursor;$/;"	t	typeref:struct:simple_tokenizer_cursor	file:
size4x	.\mem3.c	/^      u32 size4x;     \/* 4x the size of current chunk in Mem3Block elements *\/$/;"	m	struct:Mem3Block::__anon3::__anon4	file:
sjfd	.\pager.c	/^  sqlite3_file *sjfd;         \/* File descriptor for sub-journal *\/$/;"	m	struct:Pager	file:
skipNext	.\btreeInt.h	/^  int skipNext;    \/* Prev() is noop if negative. Next() is noop if positive *\/$/;"	m	struct:BtCursor
sleep	.\sqlite3ext.h	/^  int (*sleep)(int);$/;"	m	struct:sqlite3_api_routines
snprintf	.\sqlite3ext.h	/^  char * (*snprintf)(int,char*,const char*,...);$/;"	m	struct:sqlite3_api_routines
softHeapLimitEnforcer	.\malloc.c	/^static void softHeapLimitEnforcer($/;"	f	file:
soft_heap_limit	.\sqlite3ext.h	/^  void (*soft_heap_limit)(int);$/;"	m	struct:sqlite3_api_routines
sortOrder	.\sqliteInt.h	/^    u8 sortOrder;          \/* 1 for DESC or 0 for ASC *\/$/;"	m	struct:ExprList::ExprList_item
sortingIdx	.\sqliteInt.h	/^  int sortingIdx;         \/* Cursor number of the sorting index *\/$/;"	m	struct:AggInfo
soundexFunc	.\func.c	/^static void soundexFunc($/;"	f	file:
sourceidFunc	.\func.c	/^static void sourceidFunc($/;"	f	file:
spanBinaryExpr	.\parse.c	/^  static void spanBinaryExpr($/;"	f	file:
spanExpr	.\parse.c	/^  static void spanExpr(ExprSpan *pOut, Parse *pParse, int op, Token *pValue){$/;"	f	file:
spanSet	.\parse.c	/^  static void spanSet(ExprSpan *pOut, Token *pStart, Token *pEnd){$/;"	f	file:
spanUnaryPostfix	.\parse.c	/^  static void spanUnaryPostfix($/;"	f	file:
spanUnaryPrefix	.\parse.c	/^  static void spanUnaryPrefix($/;"	f	file:
splitNodeGuttman	.\rtree.c	/^static int splitNodeGuttman($/;"	f	file:
splitNodeStartree	.\rtree.c	/^static int splitNodeStartree($/;"	f	file:
sql	.\sqlite3ext.h	/^  const char *(*sql)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines
sqlite3	.\sqlite3.h	/^typedef struct sqlite3 sqlite3;$/;"	t	typeref:struct:sqlite3
sqlite3	.\sqliteInt.h	/^struct sqlite3 {$/;"	s
sqlite3AddCheckConstraint	.\build.c	/^void sqlite3AddCheckConstraint($/;"	f
sqlite3AddCollateType	.\build.c	/^void sqlite3AddCollateType(Parse *pParse, Token *pToken){$/;"	f
sqlite3AddColumn	.\build.c	/^void sqlite3AddColumn(Parse *pParse, Token *pName){$/;"	f
sqlite3AddColumnType	.\build.c	/^void sqlite3AddColumnType(Parse *pParse, Token *pType){$/;"	f
sqlite3AddDefaultValue	.\build.c	/^void sqlite3AddDefaultValue(Parse *pParse, ExprSpan *pSpan){$/;"	f
sqlite3AddNotNull	.\build.c	/^void sqlite3AddNotNull(Parse *pParse, int onError){$/;"	f
sqlite3AddPrimaryKey	.\build.c	/^void sqlite3AddPrimaryKey($/;"	f
sqlite3AffinityType	.\build.c	/^char sqlite3AffinityType(const char *zIn){$/;"	f
sqlite3AlterBeginAddColumn	.\alter.c	/^void sqlite3AlterBeginAddColumn(Parse *pParse, SrcList *pSrc){$/;"	f
sqlite3AlterFinishAddColumn	.\alter.c	/^void sqlite3AlterFinishAddColumn(Parse *pParse, Token *pColDef){$/;"	f
sqlite3AlterFunctions	.\alter.c	/^void sqlite3AlterFunctions(void){$/;"	f
sqlite3AlterRenameTable	.\alter.c	/^void sqlite3AlterRenameTable($/;"	f
sqlite3AnalysisLoad	.\analyze.c	/^int sqlite3AnalysisLoad(sqlite3 *db, int iDb){$/;"	f
sqlite3Analyze	.\analyze.c	/^void sqlite3Analyze(Parse *pParse, Token *pName1, Token *pName2){$/;"	f
sqlite3ApiExit	.\malloc.c	/^int sqlite3ApiExit(sqlite3* db, int rc){$/;"	f
sqlite3Apis	.\loadext.c	/^static const sqlite3_api_routines sqlite3Apis = { 0 };$/;"	v	file:
sqlite3Apis	.\loadext.c	/^static const sqlite3_api_routines sqlite3Apis = {$/;"	v	file:
sqlite3ArrayAllocate	.\build.c	/^void *sqlite3ArrayAllocate($/;"	f
sqlite3AtoF	.\util.c	/^int sqlite3AtoF(const char *z, double *pResult){$/;"	f
sqlite3Atoi64	.\util.c	/^int sqlite3Atoi64(const char *zNum, i64 *pNum){$/;"	f
sqlite3Attach	.\attach.c	/^void sqlite3Attach(Parse *pParse, Expr *p, Expr *pDbname, Expr *pKey){$/;"	f
sqlite3AuthCheck	.\auth.c	/^int sqlite3AuthCheck($/;"	f
sqlite3AuthCheck	.\sqliteInt.h	2790;"	d
sqlite3AuthContextPop	.\auth.c	/^void sqlite3AuthContextPop(AuthContext *pContext){$/;"	f
sqlite3AuthContextPop	.\sqliteInt.h	2792;"	d
sqlite3AuthContextPush	.\auth.c	/^void sqlite3AuthContextPush($/;"	f
sqlite3AuthContextPush	.\sqliteInt.h	2791;"	d
sqlite3AuthRead	.\auth.c	/^void sqlite3AuthRead($/;"	f
sqlite3AuthRead	.\sqliteInt.h	2789;"	d
sqlite3AuthReadCol	.\auth.c	/^int sqlite3AuthReadCol($/;"	f
sqlite3AutoExtList	.\loadext.c	/^static SQLITE_WSD struct sqlite3AutoExtList {$/;"	s	file:
sqlite3AutoExtList	.\loadext.c	/^typedef struct sqlite3AutoExtList sqlite3AutoExtList;$/;"	t	typeref:struct:sqlite3AutoExtList	file:
sqlite3AutoLoadExtensions	.\loadext.c	/^void sqlite3AutoLoadExtensions(sqlite3 *db){$/;"	f
sqlite3Autoext	.\loadext.c	/^} sqlite3Autoext = { 0, 0 };$/;"	v	typeref:struct:sqlite3AutoExtList	file:
sqlite3AutoincrementBegin	.\insert.c	/^void sqlite3AutoincrementBegin(Parse *pParse){$/;"	f
sqlite3AutoincrementBegin	.\sqliteInt.h	2632;"	d
sqlite3AutoincrementEnd	.\insert.c	/^void sqlite3AutoincrementEnd(Parse *pParse){$/;"	f
sqlite3AutoincrementEnd	.\sqliteInt.h	2633;"	d
sqlite3BackupRestart	.\backup.c	/^void sqlite3BackupRestart(sqlite3_backup *pBackup){$/;"	f
sqlite3BackupUpdate	.\backup.c	/^void sqlite3BackupUpdate(sqlite3_backup *pBackup, Pgno iPage, const u8 *aData){$/;"	f
sqlite3BeginBenignMalloc	.\fault.c	/^void sqlite3BeginBenignMalloc(void){$/;"	f
sqlite3BeginBenignMalloc	.\sqliteInt.h	3048;"	d
sqlite3BeginParse	.\build.c	/^void sqlite3BeginParse(Parse *pParse, int explainFlag){$/;"	f
sqlite3BeginTransaction	.\build.c	/^void sqlite3BeginTransaction(Parse *pParse, int type){$/;"	f
sqlite3BeginTrigger	.\trigger.c	/^void sqlite3BeginTrigger($/;"	f
sqlite3BeginWriteOperation	.\build.c	/^void sqlite3BeginWriteOperation(Parse *pParse, int setStatement, int iDb){$/;"	f
sqlite3BenignMallocHooks	.\fault.c	/^void sqlite3BenignMallocHooks($/;"	f
sqlite3BinaryCompareCollSeq	.\expr.c	/^CollSeq *sqlite3BinaryCompareCollSeq($/;"	f
sqlite3BitvecBuiltinTest	.\bitvec.c	/^int sqlite3BitvecBuiltinTest(int sz, int *aOp){$/;"	f
sqlite3BitvecClear	.\bitvec.c	/^void sqlite3BitvecClear(Bitvec *p, u32 i, void *pBuf){$/;"	f
sqlite3BitvecCreate	.\bitvec.c	/^Bitvec *sqlite3BitvecCreate(u32 iSize){$/;"	f
sqlite3BitvecDestroy	.\bitvec.c	/^void sqlite3BitvecDestroy(Bitvec *p){$/;"	f
sqlite3BitvecSet	.\bitvec.c	/^int sqlite3BitvecSet(Bitvec *p, u32 i){$/;"	f
sqlite3BitvecSize	.\bitvec.c	/^u32 sqlite3BitvecSize(Bitvec *p){$/;"	f
sqlite3BitvecTest	.\bitvec.c	/^int sqlite3BitvecTest(Bitvec *p, u32 i){$/;"	f
sqlite3BlockedList	.\notify.c	/^static sqlite3 *SQLITE_WSD sqlite3BlockedList = 0;$/;"	v	file:
sqlite3BtreeBeginStmt	.\btree.c	/^int sqlite3BtreeBeginStmt(Btree *p, int iStatement){$/;"	f
sqlite3BtreeBeginTrans	.\btree.c	/^int sqlite3BtreeBeginTrans(Btree *p, int wrflag){$/;"	f
sqlite3BtreeCacheOverflow	.\btree.c	/^void sqlite3BtreeCacheOverflow(BtCursor *pCur){$/;"	f
sqlite3BtreeCheckpoint	.\btree.c	/^int sqlite3BtreeCheckpoint(Btree *p){$/;"	f
sqlite3BtreeClearCursor	.\btree.c	/^void sqlite3BtreeClearCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeClearTable	.\btree.c	/^int sqlite3BtreeClearTable(Btree *p, int iTable, int *pnChange){$/;"	f
sqlite3BtreeClose	.\btree.c	/^int sqlite3BtreeClose(Btree *p){$/;"	f
sqlite3BtreeCloseCursor	.\btree.c	/^int sqlite3BtreeCloseCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeCommit	.\btree.c	/^int sqlite3BtreeCommit(Btree *p){$/;"	f
sqlite3BtreeCommitPhaseOne	.\btree.c	/^int sqlite3BtreeCommitPhaseOne(Btree *p, const char *zMaster){$/;"	f
sqlite3BtreeCommitPhaseTwo	.\btree.c	/^int sqlite3BtreeCommitPhaseTwo(Btree *p){$/;"	f
sqlite3BtreeCopyFile	.\backup.c	/^int sqlite3BtreeCopyFile(Btree *pTo, Btree *pFrom){$/;"	f
sqlite3BtreeCount	.\btree.c	/^int sqlite3BtreeCount(BtCursor *pCur, i64 *pnEntry){$/;"	f
sqlite3BtreeCreateTable	.\btree.c	/^int sqlite3BtreeCreateTable(Btree *p, int *piTable, int flags){$/;"	f
sqlite3BtreeCursor	.\btree.c	/^int sqlite3BtreeCursor($/;"	f
sqlite3BtreeCursorHasMoved	.\btree.c	/^int sqlite3BtreeCursorHasMoved(BtCursor *pCur, int *pHasMoved){$/;"	f
sqlite3BtreeCursorIsValid	.\btree.c	/^int sqlite3BtreeCursorIsValid(BtCursor *pCur){$/;"	f
sqlite3BtreeCursorSize	.\btree.c	/^int sqlite3BtreeCursorSize(void){$/;"	f
sqlite3BtreeCursorZero	.\btree.c	/^void sqlite3BtreeCursorZero(BtCursor *p){$/;"	f
sqlite3BtreeData	.\btree.c	/^int sqlite3BtreeData(BtCursor *pCur, u32 offset, u32 amt, void *pBuf){$/;"	f
sqlite3BtreeDataFetch	.\btree.c	/^const void *sqlite3BtreeDataFetch(BtCursor *pCur, int *pAmt){$/;"	f
sqlite3BtreeDataSize	.\btree.c	/^int sqlite3BtreeDataSize(BtCursor *pCur, u32 *pSize){$/;"	f
sqlite3BtreeDelete	.\btree.c	/^int sqlite3BtreeDelete(BtCursor *pCur){$/;"	f
sqlite3BtreeDropTable	.\btree.c	/^int sqlite3BtreeDropTable(Btree *p, int iTable, int *piMoved){$/;"	f
sqlite3BtreeEnter	.\btmutex.c	/^void sqlite3BtreeEnter(Btree *p){$/;"	f
sqlite3BtreeEnter	.\btree.h	217;"	d
sqlite3BtreeEnterAll	.\btmutex.c	/^void sqlite3BtreeEnterAll(sqlite3 *db){$/;"	f
sqlite3BtreeEnterAll	.\btree.h	218;"	d
sqlite3BtreeEnterCursor	.\btmutex.c	/^void sqlite3BtreeEnterCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeEnterCursor	.\btree.h	237;"	d
sqlite3BtreeEof	.\btree.c	/^int sqlite3BtreeEof(BtCursor *pCur){$/;"	f
sqlite3BtreeFactory	.\main.c	/^int sqlite3BtreeFactory($/;"	f
sqlite3BtreeFirst	.\btree.c	/^int sqlite3BtreeFirst(BtCursor *pCur, int *pRes){$/;"	f
sqlite3BtreeGetAutoVacuum	.\btree.c	/^int sqlite3BtreeGetAutoVacuum(Btree *p){$/;"	f
sqlite3BtreeGetCachedRowid	.\btree.c	/^sqlite3_int64 sqlite3BtreeGetCachedRowid(BtCursor *pCur){$/;"	f
sqlite3BtreeGetFilename	.\btree.c	/^const char *sqlite3BtreeGetFilename(Btree *p){$/;"	f
sqlite3BtreeGetJournalname	.\btree.c	/^const char *sqlite3BtreeGetJournalname(Btree *p){$/;"	f
sqlite3BtreeGetMeta	.\btree.c	/^void sqlite3BtreeGetMeta(Btree *p, int idx, u32 *pMeta){$/;"	f
sqlite3BtreeGetPageSize	.\btree.c	/^int sqlite3BtreeGetPageSize(Btree *p){$/;"	f
sqlite3BtreeGetReserve	.\btree.c	/^int sqlite3BtreeGetReserve(Btree *p){$/;"	f
sqlite3BtreeHoldsAllMutexes	.\btmutex.c	/^int sqlite3BtreeHoldsAllMutexes(sqlite3 *db){$/;"	f
sqlite3BtreeHoldsAllMutexes	.\btree.h	245;"	d
sqlite3BtreeHoldsMutex	.\btmutex.c	/^int sqlite3BtreeHoldsMutex(Btree *p){$/;"	f
sqlite3BtreeHoldsMutex	.\btree.h	244;"	d
sqlite3BtreeIncrVacuum	.\btree.c	/^int sqlite3BtreeIncrVacuum(Btree *p){$/;"	f
sqlite3BtreeInsert	.\btree.c	/^int sqlite3BtreeInsert($/;"	f
sqlite3BtreeIntegrityCheck	.\btree.c	/^char *sqlite3BtreeIntegrityCheck($/;"	f
sqlite3BtreeIsInBackup	.\btree.c	/^int sqlite3BtreeIsInBackup(Btree *p){$/;"	f
sqlite3BtreeIsInReadTrans	.\btree.c	/^int sqlite3BtreeIsInReadTrans(Btree *p){$/;"	f
sqlite3BtreeIsInTrans	.\btree.c	/^int sqlite3BtreeIsInTrans(Btree *p){$/;"	f
sqlite3BtreeKey	.\btree.c	/^int sqlite3BtreeKey(BtCursor *pCur, u32 offset, u32 amt, void *pBuf){$/;"	f
sqlite3BtreeKeyFetch	.\btree.c	/^const void *sqlite3BtreeKeyFetch(BtCursor *pCur, int *pAmt){$/;"	f
sqlite3BtreeKeySize	.\btree.c	/^int sqlite3BtreeKeySize(BtCursor *pCur, i64 *pSize){$/;"	f
sqlite3BtreeLast	.\btree.c	/^int sqlite3BtreeLast(BtCursor *pCur, int *pRes){$/;"	f
sqlite3BtreeLastPage	.\btree.c	/^u32 sqlite3BtreeLastPage(Btree *p){$/;"	f
sqlite3BtreeLeave	.\btmutex.c	/^void sqlite3BtreeLeave(Btree *p){$/;"	f
sqlite3BtreeLeave	.\btree.h	236;"	d
sqlite3BtreeLeaveAll	.\btmutex.c	/^void sqlite3BtreeLeaveAll(sqlite3 *db){$/;"	f
sqlite3BtreeLeaveAll	.\btree.h	239;"	d
sqlite3BtreeLeaveCursor	.\btmutex.c	/^void sqlite3BtreeLeaveCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeLeaveCursor	.\btree.h	238;"	d
sqlite3BtreeLockTable	.\btree.c	/^int sqlite3BtreeLockTable(Btree *p, int iTab, u8 isWriteLock){$/;"	f
sqlite3BtreeMaxPageCount	.\btree.c	/^int sqlite3BtreeMaxPageCount(Btree *p, int mxPage){$/;"	f
sqlite3BtreeMovetoUnpacked	.\btree.c	/^int sqlite3BtreeMovetoUnpacked($/;"	f
sqlite3BtreeMutexArrayEnter	.\btmutex.c	/^void sqlite3BtreeMutexArrayEnter(BtreeMutexArray *pArray){$/;"	f
sqlite3BtreeMutexArrayEnter	.\btree.h	240;"	d
sqlite3BtreeMutexArrayInsert	.\btmutex.c	/^void sqlite3BtreeMutexArrayInsert(BtreeMutexArray *pArray, Btree *pBtree){$/;"	f
sqlite3BtreeMutexArrayInsert	.\btree.h	242;"	d
sqlite3BtreeMutexArrayLeave	.\btmutex.c	/^void sqlite3BtreeMutexArrayLeave(BtreeMutexArray *pArray){$/;"	f
sqlite3BtreeMutexArrayLeave	.\btree.h	241;"	d
sqlite3BtreeNext	.\btree.c	/^int sqlite3BtreeNext(BtCursor *pCur, int *pRes){$/;"	f
sqlite3BtreeOpen	.\btree.c	/^int sqlite3BtreeOpen($/;"	f
sqlite3BtreePager	.\btree.c	/^Pager *sqlite3BtreePager(Btree *p){$/;"	f
sqlite3BtreePrevious	.\btree.c	/^int sqlite3BtreePrevious(BtCursor *pCur, int *pRes){$/;"	f
sqlite3BtreePutData	.\btree.c	/^int sqlite3BtreePutData(BtCursor *pCsr, u32 offset, u32 amt, void *z){$/;"	f
sqlite3BtreeRollback	.\btree.c	/^int sqlite3BtreeRollback(Btree *p){$/;"	f
sqlite3BtreeSavepoint	.\btree.c	/^int sqlite3BtreeSavepoint(Btree *p, int op, int iSavepoint){$/;"	f
sqlite3BtreeSchema	.\btree.c	/^void *sqlite3BtreeSchema(Btree *p, int nBytes, void(*xFree)(void *)){$/;"	f
sqlite3BtreeSchemaLocked	.\btree.c	/^int sqlite3BtreeSchemaLocked(Btree *p){$/;"	f
sqlite3BtreeSecureDelete	.\btree.c	/^int sqlite3BtreeSecureDelete(Btree *p, int newFlag){$/;"	f
sqlite3BtreeSetAutoVacuum	.\btree.c	/^int sqlite3BtreeSetAutoVacuum(Btree *p, int autoVacuum){$/;"	f
sqlite3BtreeSetCacheSize	.\btree.c	/^int sqlite3BtreeSetCacheSize(Btree *p, int mxPage){$/;"	f
sqlite3BtreeSetCachedRowid	.\btree.c	/^void sqlite3BtreeSetCachedRowid(BtCursor *pCur, sqlite3_int64 iRowid){$/;"	f
sqlite3BtreeSetPageSize	.\btree.c	/^int sqlite3BtreeSetPageSize(Btree *p, int pageSize, int nReserve, int iFix){$/;"	f
sqlite3BtreeSetSafetyLevel	.\btree.c	/^int sqlite3BtreeSetSafetyLevel(Btree *p, int level, int fullSync){$/;"	f
sqlite3BtreeSetVersion	.\btree.c	/^int sqlite3BtreeSetVersion(Btree *pBtree, int iVersion){$/;"	f
sqlite3BtreeSyncDisabled	.\btree.c	/^int sqlite3BtreeSyncDisabled(Btree *p){$/;"	f
sqlite3BtreeTripAllCursors	.\btree.c	/^void sqlite3BtreeTripAllCursors(Btree *pBtree, int errCode){$/;"	f
sqlite3BtreeUpdateMeta	.\btree.c	/^int sqlite3BtreeUpdateMeta(Btree *p, int idx, u32 iMeta){$/;"	f
sqlite3CantopenError	.\main.c	/^int sqlite3CantopenError(int lineno){$/;"	f
sqlite3ChangeCookie	.\build.c	/^void sqlite3ChangeCookie(Parse *pParse, int iDb){$/;"	f
sqlite3CheckCollSeq	.\callback.c	/^int sqlite3CheckCollSeq(Parse *pParse, CollSeq *pColl){$/;"	f
sqlite3CheckObjectName	.\build.c	/^int sqlite3CheckObjectName(Parse *pParse, const char *zName){$/;"	f
sqlite3Checkpoint	.\main.c	/^int sqlite3Checkpoint(sqlite3 *db, int iDb){$/;"	f
sqlite3CloseExtensions	.\loadext.c	/^void sqlite3CloseExtensions(sqlite3 *db){$/;"	f
sqlite3CloseExtensions	.\sqliteInt.h	2951;"	d
sqlite3CloseSavepoints	.\main.c	/^void sqlite3CloseSavepoints(sqlite3 *db){$/;"	f
sqlite3CodeRowTrigger	.\sqliteInt.h	2772;"	d
sqlite3CodeRowTrigger	.\trigger.c	/^void sqlite3CodeRowTrigger($/;"	f
sqlite3CodeRowTriggerDirect	.\sqliteInt.h	2773;"	d
sqlite3CodeRowTriggerDirect	.\trigger.c	/^void sqlite3CodeRowTriggerDirect($/;"	f
sqlite3CodeSubselect	.\expr.c	/^int sqlite3CodeSubselect($/;"	f
sqlite3CodeVerifySchema	.\build.c	/^void sqlite3CodeVerifySchema(Parse *pParse, int iDb){$/;"	f
sqlite3ColumnDefault	.\update.c	/^void sqlite3ColumnDefault(Vdbe *v, Table *pTab, int i, int iReg){$/;"	f
sqlite3CommitInternalChanges	.\build.c	/^void sqlite3CommitInternalChanges(sqlite3 *db){$/;"	f
sqlite3CommitTransaction	.\build.c	/^void sqlite3CommitTransaction(Parse *pParse){$/;"	f
sqlite3CompareAffinity	.\expr.c	/^char sqlite3CompareAffinity(Expr *pExpr, char aff2){$/;"	f
sqlite3CompleteInsertion	.\insert.c	/^void sqlite3CompleteInsertion($/;"	f
sqlite3Config	.\global.c	/^SQLITE_WSD struct Sqlite3Config sqlite3Config = {$/;"	v	typeref:struct:Sqlite3Config
sqlite3ConnectionBlocked	.\notify.c	/^void sqlite3ConnectionBlocked(sqlite3 *db, sqlite3 *pBlocker){$/;"	f
sqlite3ConnectionBlocked	.\sqliteInt.h	3087;"	d
sqlite3ConnectionClosed	.\notify.c	/^void sqlite3ConnectionClosed(sqlite3 *db){$/;"	f
sqlite3ConnectionClosed	.\sqliteInt.h	3089;"	d
sqlite3ConnectionUnlocked	.\notify.c	/^void sqlite3ConnectionUnlocked(sqlite3 *db){$/;"	f
sqlite3ConnectionUnlocked	.\sqliteInt.h	3088;"	d
sqlite3CorruptError	.\main.c	/^int sqlite3CorruptError(int lineno){$/;"	f
sqlite3Coverage	.\util.c	/^void sqlite3Coverage(int x){$/;"	f
sqlite3CreateColumnExpr	.\resolve.c	/^Expr *sqlite3CreateColumnExpr(sqlite3 *db, SrcList *pSrc, int iSrc, int iCol){$/;"	f
sqlite3CreateForeignKey	.\build.c	/^void sqlite3CreateForeignKey($/;"	f
sqlite3CreateFunc	.\main.c	/^int sqlite3CreateFunc($/;"	f
sqlite3CreateIndex	.\build.c	/^Index *sqlite3CreateIndex($/;"	f
sqlite3CreateView	.\build.c	/^void sqlite3CreateView($/;"	f
sqlite3CtypeMap	.\global.c	/^const unsigned char sqlite3CtypeMap[256] = {$/;"	v
sqlite3DbFree	.\malloc.c	/^void sqlite3DbFree(sqlite3 *db, void *p){$/;"	f
sqlite3DbMallocRaw	.\malloc.c	/^void *sqlite3DbMallocRaw(sqlite3 *db, int n){$/;"	f
sqlite3DbMallocSize	.\malloc.c	/^int sqlite3DbMallocSize(sqlite3 *db, void *p){$/;"	f
sqlite3DbMallocZero	.\malloc.c	/^void *sqlite3DbMallocZero(sqlite3 *db, int n){$/;"	f
sqlite3DbRealloc	.\malloc.c	/^void *sqlite3DbRealloc(sqlite3 *db, void *p, int n){$/;"	f
sqlite3DbReallocOrFree	.\malloc.c	/^void *sqlite3DbReallocOrFree(sqlite3 *db, void *p, int n){$/;"	f
sqlite3DbStrDup	.\malloc.c	/^char *sqlite3DbStrDup(sqlite3 *db, const char *z){$/;"	f
sqlite3DbStrNDup	.\malloc.c	/^char *sqlite3DbStrNDup(sqlite3 *db, const char *z, int n){$/;"	f
sqlite3DebugPrintf	.\printf.c	/^void sqlite3DebugPrintf(const char *zFormat, ...){$/;"	f
sqlite3DefaultMutex	.\mutex_noop.c	/^sqlite3_mutex_methods const *sqlite3DefaultMutex(void){$/;"	f
sqlite3DefaultMutex	.\mutex_os2.c	/^sqlite3_mutex_methods const *sqlite3DefaultMutex(void){$/;"	f
sqlite3DefaultMutex	.\mutex_unix.c	/^sqlite3_mutex_methods const *sqlite3DefaultMutex(void){$/;"	f
sqlite3DefaultMutex	.\mutex_w32.c	/^sqlite3_mutex_methods const *sqlite3DefaultMutex(void){$/;"	f
sqlite3DefaultRowEst	.\build.c	/^void sqlite3DefaultRowEst(Index *pIdx){$/;"	f
sqlite3DeferForeignKey	.\build.c	/^void sqlite3DeferForeignKey(Parse *pParse, int isDeferred){$/;"	f
sqlite3DeleteFrom	.\delete.c	/^void sqlite3DeleteFrom($/;"	f
sqlite3DeleteIndexSamples	.\analyze.c	/^void sqlite3DeleteIndexSamples(sqlite3 *db, Index *pIdx){$/;"	f
sqlite3DeleteTable	.\build.c	/^void sqlite3DeleteTable(sqlite3 *db, Table *pTable){$/;"	f
sqlite3DeleteTrigger	.\sqliteInt.h	2769;"	d
sqlite3DeleteTrigger	.\trigger.c	/^void sqlite3DeleteTrigger(sqlite3 *db, Trigger *pTrigger){$/;"	f
sqlite3DeleteTriggerStep	.\trigger.c	/^void sqlite3DeleteTriggerStep(sqlite3 *db, TriggerStep *pTriggerStep){$/;"	f
sqlite3Dequote	.\util.c	/^int sqlite3Dequote(char *z){$/;"	f
sqlite3Detach	.\attach.c	/^void sqlite3Detach(Parse *pParse, Expr *pDbname){$/;"	f
sqlite3DropIndex	.\build.c	/^void sqlite3DropIndex(Parse *pParse, SrcList *pName, int ifExists){$/;"	f
sqlite3DropTable	.\build.c	/^void sqlite3DropTable(Parse *pParse, SrcList *pName, int isView, int noErr){$/;"	f
sqlite3DropTrigger	.\trigger.c	/^void sqlite3DropTrigger(Parse *pParse, SrcList *pName, int noErr){$/;"	f
sqlite3DropTriggerPtr	.\sqliteInt.h	2770;"	d
sqlite3DropTriggerPtr	.\trigger.c	/^void sqlite3DropTriggerPtr(Parse *pParse, Trigger *pTrigger){$/;"	f
sqlite3EndBenignMalloc	.\fault.c	/^void sqlite3EndBenignMalloc(void){$/;"	f
sqlite3EndBenignMalloc	.\sqliteInt.h	3049;"	d
sqlite3EndTable	.\build.c	/^void sqlite3EndTable($/;"	f
sqlite3ErrStr	.\main.c	/^const char *sqlite3ErrStr(int rc){$/;"	f
sqlite3Error	.\util.c	/^void sqlite3Error(sqlite3 *db, int err_code, const char *zFormat, ...){$/;"	f
sqlite3ErrorMsg	.\util.c	/^void sqlite3ErrorMsg(Parse *pParse, const char *zFormat, ...){$/;"	f
sqlite3ExpirePreparedStatements	.\vdbeaux.c	/^void sqlite3ExpirePreparedStatements(sqlite3 *db){$/;"	f
sqlite3Expr	.\expr.c	/^Expr *sqlite3Expr($/;"	f
sqlite3ExprAffinity	.\expr.c	/^char sqlite3ExprAffinity(Expr *pExpr){$/;"	f
sqlite3ExprAlloc	.\expr.c	/^Expr *sqlite3ExprAlloc($/;"	f
sqlite3ExprAnalyzeAggList	.\expr.c	/^void sqlite3ExprAnalyzeAggList(NameContext *pNC, ExprList *pList){$/;"	f
sqlite3ExprAnalyzeAggregates	.\expr.c	/^void sqlite3ExprAnalyzeAggregates(NameContext *pNC, Expr *pExpr){$/;"	f
sqlite3ExprAnd	.\expr.c	/^Expr *sqlite3ExprAnd(sqlite3 *db, Expr *pLeft, Expr *pRight){$/;"	f
sqlite3ExprAssignVarNumber	.\expr.c	/^void sqlite3ExprAssignVarNumber(Parse *pParse, Expr *pExpr){$/;"	f
sqlite3ExprAttachSubtrees	.\expr.c	/^void sqlite3ExprAttachSubtrees($/;"	f
sqlite3ExprCacheAffinityChange	.\expr.c	/^void sqlite3ExprCacheAffinityChange(Parse *pParse, int iStart, int iCount){$/;"	f
sqlite3ExprCacheClear	.\expr.c	/^void sqlite3ExprCacheClear(Parse *pParse){$/;"	f
sqlite3ExprCachePinRegister	.\expr.c	/^static void sqlite3ExprCachePinRegister(Parse *pParse, int iReg){$/;"	f	file:
sqlite3ExprCachePop	.\expr.c	/^void sqlite3ExprCachePop(Parse *pParse, int N){$/;"	f
sqlite3ExprCachePush	.\expr.c	/^void sqlite3ExprCachePush(Parse *pParse){$/;"	f
sqlite3ExprCacheRemove	.\expr.c	/^void sqlite3ExprCacheRemove(Parse *pParse, int iReg, int nReg){$/;"	f
sqlite3ExprCacheStore	.\expr.c	/^void sqlite3ExprCacheStore(Parse *pParse, int iTab, int iCol, int iReg){$/;"	f
sqlite3ExprCanBeNull	.\expr.c	/^int sqlite3ExprCanBeNull(const Expr *p){$/;"	f
sqlite3ExprCheckHeight	.\expr.c	/^int sqlite3ExprCheckHeight(Parse *pParse, int nHeight){$/;"	f
sqlite3ExprCheckHeight	.\sqliteInt.h	3076;"	d
sqlite3ExprCode	.\expr.c	/^int sqlite3ExprCode(Parse *pParse, Expr *pExpr, int target){$/;"	f
sqlite3ExprCodeAndCache	.\expr.c	/^int sqlite3ExprCodeAndCache(Parse *pParse, Expr *pExpr, int target){$/;"	f
sqlite3ExprCodeConstants	.\expr.c	/^void sqlite3ExprCodeConstants(Parse *pParse, Expr *pExpr){$/;"	f
sqlite3ExprCodeCopy	.\expr.c	/^void sqlite3ExprCodeCopy(Parse *pParse, int iFrom, int iTo, int nReg){$/;"	f
sqlite3ExprCodeExprList	.\expr.c	/^int sqlite3ExprCodeExprList($/;"	f
sqlite3ExprCodeGetColumn	.\expr.c	/^int sqlite3ExprCodeGetColumn($/;"	f
sqlite3ExprCodeGetColumnOfTable	.\expr.c	/^void sqlite3ExprCodeGetColumnOfTable($/;"	f
sqlite3ExprCodeIN	.\expr.c	/^static void sqlite3ExprCodeIN($/;"	f	file:
sqlite3ExprCodeIsNullJump	.\expr.c	/^void sqlite3ExprCodeIsNullJump($/;"	f
sqlite3ExprCodeMove	.\expr.c	/^void sqlite3ExprCodeMove(Parse *pParse, int iFrom, int iTo, int nReg){$/;"	f
sqlite3ExprCodeTarget	.\expr.c	/^int sqlite3ExprCodeTarget(Parse *pParse, Expr *pExpr, int target){$/;"	f
sqlite3ExprCodeTemp	.\expr.c	/^int sqlite3ExprCodeTemp(Parse *pParse, Expr *pExpr, int *pReg){$/;"	f
sqlite3ExprCollSeq	.\expr.c	/^CollSeq *sqlite3ExprCollSeq(Parse *pParse, Expr *pExpr){$/;"	f
sqlite3ExprCompare	.\expr.c	/^int sqlite3ExprCompare(Expr *pA, Expr *pB){$/;"	f
sqlite3ExprDelete	.\expr.c	/^void sqlite3ExprDelete(sqlite3 *db, Expr *p){$/;"	f
sqlite3ExprDup	.\expr.c	/^Expr *sqlite3ExprDup(sqlite3 *db, Expr *p, int flags){$/;"	f
sqlite3ExprFunction	.\expr.c	/^Expr *sqlite3ExprFunction(Parse *pParse, ExprList *pList, Token *pToken){$/;"	f
sqlite3ExprHardCopy	.\expr.c	/^void sqlite3ExprHardCopy(Parse *pParse, int iReg, int nReg){$/;"	f
sqlite3ExprIfFalse	.\expr.c	/^void sqlite3ExprIfFalse(Parse *pParse, Expr *pExpr, int dest, int jumpIfNull){$/;"	f
sqlite3ExprIfTrue	.\expr.c	/^void sqlite3ExprIfTrue(Parse *pParse, Expr *pExpr, int dest, int jumpIfNull){$/;"	f
sqlite3ExprIsConstant	.\expr.c	/^int sqlite3ExprIsConstant(Expr *p){$/;"	f
sqlite3ExprIsConstantNotJoin	.\expr.c	/^int sqlite3ExprIsConstantNotJoin(Expr *p){$/;"	f
sqlite3ExprIsConstantOrFunction	.\expr.c	/^int sqlite3ExprIsConstantOrFunction(Expr *p){$/;"	f
sqlite3ExprIsInteger	.\expr.c	/^int sqlite3ExprIsInteger(Expr *p, int *pValue){$/;"	f
sqlite3ExprListAppend	.\expr.c	/^ExprList *sqlite3ExprListAppend($/;"	f
sqlite3ExprListCheckLength	.\expr.c	/^void sqlite3ExprListCheckLength($/;"	f
sqlite3ExprListCompare	.\expr.c	/^int sqlite3ExprListCompare(ExprList *pA, ExprList *pB){$/;"	f
sqlite3ExprListDelete	.\expr.c	/^void sqlite3ExprListDelete(sqlite3 *db, ExprList *pList){$/;"	f
sqlite3ExprListDup	.\expr.c	/^ExprList *sqlite3ExprListDup(sqlite3 *db, ExprList *p, int flags){$/;"	f
sqlite3ExprListSetName	.\expr.c	/^void sqlite3ExprListSetName($/;"	f
sqlite3ExprListSetSpan	.\expr.c	/^void sqlite3ExprListSetSpan($/;"	f
sqlite3ExprNeedsNoAffinityChange	.\expr.c	/^int sqlite3ExprNeedsNoAffinityChange(const Expr *p, char aff){$/;"	f
sqlite3ExprSetColl	.\expr.c	/^Expr *sqlite3ExprSetColl(Expr *pExpr, CollSeq *pColl){$/;"	f
sqlite3ExprSetCollByToken	.\expr.c	/^Expr *sqlite3ExprSetCollByToken(Parse *pParse, Expr *pExpr, Token *pCollName){$/;"	f
sqlite3ExprSetHeight	.\expr.c	/^void sqlite3ExprSetHeight(Parse *pParse, Expr *p){$/;"	f
sqlite3ExprSetHeight	.\sqliteInt.h	3074;"	d
sqlite3FindCollSeq	.\callback.c	/^CollSeq *sqlite3FindCollSeq($/;"	f
sqlite3FindDb	.\build.c	/^int sqlite3FindDb(sqlite3 *db, Token *pName){$/;"	f
sqlite3FindDbName	.\build.c	/^int sqlite3FindDbName(sqlite3 *db, const char *zName){$/;"	f
sqlite3FindFunction	.\callback.c	/^FuncDef *sqlite3FindFunction($/;"	f
sqlite3FindInIndex	.\expr.c	/^int sqlite3FindInIndex(Parse *pParse, Expr *pX, int *prNotFound){$/;"	f
sqlite3FindIndex	.\build.c	/^Index *sqlite3FindIndex(sqlite3 *db, const char *zName, const char *zDb){$/;"	f
sqlite3FindTable	.\build.c	/^Table *sqlite3FindTable(sqlite3 *db, const char *zName, const char *zDatabase){$/;"	f
sqlite3FinishCoding	.\build.c	/^void sqlite3FinishCoding(Parse *pParse){$/;"	f
sqlite3FinishTrigger	.\trigger.c	/^void sqlite3FinishTrigger($/;"	f
sqlite3FitsIn64Bits	.\util.c	/^int sqlite3FitsIn64Bits(const char *zNum, int negFlag){$/;"	f
sqlite3FixExpr	.\attach.c	/^int sqlite3FixExpr($/;"	f
sqlite3FixExprList	.\attach.c	/^int sqlite3FixExprList($/;"	f
sqlite3FixInit	.\attach.c	/^int sqlite3FixInit($/;"	f
sqlite3FixSelect	.\attach.c	/^int sqlite3FixSelect($/;"	f
sqlite3FixSrcList	.\attach.c	/^int sqlite3FixSrcList($/;"	f
sqlite3FixTriggerStep	.\attach.c	/^int sqlite3FixTriggerStep($/;"	f
sqlite3FkActions	.\fkey.c	/^void sqlite3FkActions($/;"	f
sqlite3FkActions	.\sqliteInt.h	3020;"	d
sqlite3FkCheck	.\fkey.c	/^void sqlite3FkCheck($/;"	f
sqlite3FkCheck	.\sqliteInt.h	3021;"	d
sqlite3FkDelete	.\fkey.c	/^void sqlite3FkDelete(sqlite3 *db, Table *pTab){$/;"	f
sqlite3FkDelete	.\sqliteInt.h	3029;"	d
sqlite3FkDropTable	.\fkey.c	/^void sqlite3FkDropTable(Parse *pParse, SrcList *pName, Table *pTab){$/;"	f
sqlite3FkDropTable	.\sqliteInt.h	3022;"	d
sqlite3FkOldmask	.\fkey.c	/^u32 sqlite3FkOldmask($/;"	f
sqlite3FkOldmask	.\sqliteInt.h	3023;"	d
sqlite3FkReferences	.\fkey.c	/^FKey *sqlite3FkReferences(Table *pTab){$/;"	f
sqlite3FkRequired	.\fkey.c	/^int sqlite3FkRequired($/;"	f
sqlite3FkRequired	.\sqliteInt.h	3024;"	d
sqlite3Fts3AllSegdirs	.\fts3_write.c	/^int sqlite3Fts3AllSegdirs(Fts3Table *p, sqlite3_stmt **ppStmt){$/;"	f
sqlite3Fts3Dequote	.\fts3.c	/^void sqlite3Fts3Dequote(char *z){$/;"	f
sqlite3Fts3ExprFree	.\fts3_expr.c	/^void sqlite3Fts3ExprFree(Fts3Expr *p){$/;"	f
sqlite3Fts3ExprInitTestInterface	.\fts3_expr.c	/^int sqlite3Fts3ExprInitTestInterface(sqlite3* db){$/;"	f
sqlite3Fts3ExprLoadDoclist	.\fts3.c	/^int sqlite3Fts3ExprLoadDoclist(Fts3Table *pTab, Fts3Expr *pExpr){$/;"	f
sqlite3Fts3ExprNearTrim	.\fts3.c	/^int sqlite3Fts3ExprNearTrim(Fts3Expr *pLeft, Fts3Expr *pRight, int nNear){$/;"	f
sqlite3Fts3ExprParse	.\fts3_expr.c	/^int sqlite3Fts3ExprParse($/;"	f
sqlite3Fts3FindPositions	.\fts3.c	/^char *sqlite3Fts3FindPositions($/;"	f
sqlite3Fts3GetVarint	.\fts3.c	/^int sqlite3Fts3GetVarint(const char *p, sqlite_int64 *v){$/;"	f
sqlite3Fts3GetVarint32	.\fts3.c	/^int sqlite3Fts3GetVarint32(const char *p, int *pi){$/;"	f
sqlite3Fts3HashClear	.\fts3_hash.c	/^void sqlite3Fts3HashClear(Fts3Hash *pH){$/;"	f
sqlite3Fts3HashFind	.\fts3_hash.c	/^void *sqlite3Fts3HashFind(const Fts3Hash *pH, const void *pKey, int nKey){$/;"	f
sqlite3Fts3HashFindElem	.\fts3_hash.c	/^Fts3HashElem *sqlite3Fts3HashFindElem($/;"	f
sqlite3Fts3HashInit	.\fts3_hash.c	/^void sqlite3Fts3HashInit(Fts3Hash *pNew, char keyClass, char copyKey){$/;"	f
sqlite3Fts3HashInsert	.\fts3_hash.c	/^void *sqlite3Fts3HashInsert($/;"	f
sqlite3Fts3IcuTokenizerModule	.\fts3_icu.c	/^void sqlite3Fts3IcuTokenizerModule($/;"	f
sqlite3Fts3Init	.\fts3.c	/^int sqlite3Fts3Init(sqlite3 *db){$/;"	f
sqlite3Fts3InitHashTable	.\fts3_tokenizer.c	/^int sqlite3Fts3InitHashTable($/;"	f
sqlite3Fts3InitTokenizer	.\fts3_tokenizer.c	/^int sqlite3Fts3InitTokenizer($/;"	f
sqlite3Fts3Matchinfo	.\fts3_snippet.c	/^void sqlite3Fts3Matchinfo(sqlite3_context *pContext, Fts3Cursor *pCsr){$/;"	f
sqlite3Fts3MatchinfoDocsizeGlobal	.\fts3_write.c	/^int sqlite3Fts3MatchinfoDocsizeGlobal(Fts3Cursor *pCur, u32 *a){$/;"	f
sqlite3Fts3MatchinfoDocsizeLocal	.\fts3_write.c	/^int sqlite3Fts3MatchinfoDocsizeLocal(Fts3Cursor *pCur, u32 *a){$/;"	f
sqlite3Fts3NextToken	.\fts3_tokenizer.c	/^const char *sqlite3Fts3NextToken(const char *zStr, int *pn){$/;"	f
sqlite3Fts3Offsets	.\fts3_snippet.c	/^void sqlite3Fts3Offsets($/;"	f
sqlite3Fts3Optimize	.\fts3_write.c	/^int sqlite3Fts3Optimize(Fts3Table *p){$/;"	f
sqlite3Fts3PendingTermsClear	.\fts3_write.c	/^void sqlite3Fts3PendingTermsClear(Fts3Table *p){$/;"	f
sqlite3Fts3PendingTermsFlush	.\fts3_write.c	/^int sqlite3Fts3PendingTermsFlush(Fts3Table *p){$/;"	f
sqlite3Fts3PorterTokenizerModule	.\fts3_porter.c	/^void sqlite3Fts3PorterTokenizerModule($/;"	f
sqlite3Fts3PutVarint	.\fts3.c	/^int sqlite3Fts3PutVarint(char *p, sqlite_int64 v){$/;"	f
sqlite3Fts3ReadBlock	.\fts3_write.c	/^int sqlite3Fts3ReadBlock($/;"	f
sqlite3Fts3SegReaderFree	.\fts3_write.c	/^void sqlite3Fts3SegReaderFree(Fts3Table *p, Fts3SegReader *pReader){$/;"	f
sqlite3Fts3SegReaderIterate	.\fts3_write.c	/^int sqlite3Fts3SegReaderIterate($/;"	f
sqlite3Fts3SegReaderNew	.\fts3_write.c	/^int sqlite3Fts3SegReaderNew($/;"	f
sqlite3Fts3SegReaderPending	.\fts3_write.c	/^int sqlite3Fts3SegReaderPending($/;"	f
sqlite3Fts3SimpleTokenizerModule	.\fts3_tokenizer1.c	/^void sqlite3Fts3SimpleTokenizerModule($/;"	f
sqlite3Fts3Snippet	.\fts3_snippet.c	/^void sqlite3Fts3Snippet($/;"	f
sqlite3Fts3UpdateMethod	.\fts3_write.c	/^int sqlite3Fts3UpdateMethod($/;"	f
sqlite3Fts3VarintLen	.\fts3.c	/^int sqlite3Fts3VarintLen(sqlite3_uint64 v){$/;"	f
sqlite3FuncDefInsert	.\callback.c	/^void sqlite3FuncDefInsert($/;"	f
sqlite3GenerateConstraintChecks	.\insert.c	/^void sqlite3GenerateConstraintChecks($/;"	f
sqlite3GenerateIndexKey	.\delete.c	/^int sqlite3GenerateIndexKey($/;"	f
sqlite3GenerateRowDelete	.\delete.c	/^void sqlite3GenerateRowDelete($/;"	f
sqlite3GenerateRowIndexDelete	.\delete.c	/^void sqlite3GenerateRowIndexDelete($/;"	f
sqlite3Get4byte	.\util.c	/^u32 sqlite3Get4byte(const u8 *p){$/;"	f
sqlite3GetCollSeq	.\callback.c	/^CollSeq *sqlite3GetCollSeq($/;"	f
sqlite3GetFuncCollSeq	.\func.c	/^static CollSeq *sqlite3GetFuncCollSeq(sqlite3_context *context){$/;"	f	file:
sqlite3GetInt32	.\util.c	/^int sqlite3GetInt32(const char *zNum, int *pValue){$/;"	f
sqlite3GetTempRange	.\expr.c	/^int sqlite3GetTempRange(Parse *pParse, int nReg){$/;"	f
sqlite3GetTempReg	.\expr.c	/^int sqlite3GetTempReg(Parse *pParse){$/;"	f
sqlite3GetToken	.\tokenize.c	/^int sqlite3GetToken(const unsigned char *z, int *tokenType){$/;"	f
sqlite3GetVTable	.\vtab.c	/^VTable *sqlite3GetVTable(sqlite3 *db, Table *pTab){$/;"	f
sqlite3GetVarint	.\util.c	/^u8 sqlite3GetVarint(const unsigned char *p, u64 *v){$/;"	f
sqlite3GetVarint32	.\util.c	/^u8 sqlite3GetVarint32(const unsigned char *p, u32 *v){$/;"	f
sqlite3GetVdbe	.\select.c	/^Vdbe *sqlite3GetVdbe(Parse *pParse){$/;"	f
sqlite3GlobalConfig	.\sqliteInt.h	560;"	d
sqlite3GlobalConfig	.\sqliteInt.h	566;"	d
sqlite3GlobalFunctions	.\global.c	/^SQLITE_WSD FuncDefHash sqlite3GlobalFunctions;$/;"	v
sqlite3HaltConstraint	.\build.c	/^void sqlite3HaltConstraint(Parse *pParse, int onError, char *p4, int p4type){$/;"	f
sqlite3HashClear	.\hash.c	/^void sqlite3HashClear(Hash *pH){$/;"	f
sqlite3HashFind	.\hash.c	/^void *sqlite3HashFind(const Hash *pH, const char *pKey, int nKey){$/;"	f
sqlite3HashInit	.\hash.c	/^void sqlite3HashInit(Hash *pNew){$/;"	f
sqlite3HashInsert	.\hash.c	/^void *sqlite3HashInsert(Hash *pH, const char *pKey, int nKey, void *data){$/;"	f
sqlite3HexToBlob	.\util.c	/^void *sqlite3HexToBlob(sqlite3 *db, const char *z, int n){$/;"	f
sqlite3Hooks	.\fault.c	/^} sqlite3Hooks = { 0, 0 };$/;"	v	typeref:struct:BenignMallocHooks	file:
sqlite3Hwtime	.\hwtime.h	/^  __declspec(naked) __inline sqlite_uint64 __cdecl sqlite3Hwtime(void){$/;"	f
sqlite3Hwtime	.\hwtime.h	/^  __inline__ sqlite_uint64 sqlite3Hwtime(void){$/;"	f
sqlite3Hwtime	.\hwtime.h	/^  sqlite_uint64 sqlite3Hwtime(void){ return ((sqlite_uint64)0); }$/;"	f
sqlite3IdListAppend	.\build.c	/^IdList *sqlite3IdListAppend(sqlite3 *db, IdList *pList, Token *pToken){$/;"	f
sqlite3IdListDelete	.\build.c	/^void sqlite3IdListDelete(sqlite3 *db, IdList *pList){$/;"	f
sqlite3IdListDup	.\expr.c	/^IdList *sqlite3IdListDup(sqlite3 *db, IdList *p){$/;"	f
sqlite3IdListIndex	.\build.c	/^int sqlite3IdListIndex(IdList *pList, const char *zName){$/;"	f
sqlite3IndexAffinityOk	.\expr.c	/^int sqlite3IndexAffinityOk(Expr *pExpr, char idx_affinity){$/;"	f
sqlite3IndexAffinityStr	.\insert.c	/^const char *sqlite3IndexAffinityStr(Vdbe *v, Index *pIdx){$/;"	f
sqlite3IndexKeyinfo	.\build.c	/^KeyInfo *sqlite3IndexKeyinfo(Parse *pParse, Index *pIdx){$/;"	f
sqlite3IndexedByLookup	.\select.c	/^int sqlite3IndexedByLookup(Parse *pParse, struct SrcList_item *pFrom){$/;"	f
sqlite3Init	.\prepare.c	/^int sqlite3Init(sqlite3 *db, char **pzErrMsg){$/;"	f
sqlite3InitCallback	.\prepare.c	/^int sqlite3InitCallback(void *pInit, int argc, char **argv, char **NotUsed){$/;"	f
sqlite3InitInfo	.\sqliteInt.h	/^  struct sqlite3InitInfo {      \/* Information used during initialization *\/$/;"	s	struct:sqlite3
sqlite3InitOne	.\prepare.c	/^static int sqlite3InitOne(sqlite3 *db, int iDb, char **pzErrMsg){$/;"	f	file:
sqlite3Insert	.\insert.c	/^void sqlite3Insert($/;"	f
sqlite3IntTokens	.\global.c	/^const Token sqlite3IntTokens[] = {$/;"	v
sqlite3InvalidFunction	.\vdbeapi.c	/^void sqlite3InvalidFunction($/;"	f
sqlite3InvokeBusyHandler	.\main.c	/^int sqlite3InvokeBusyHandler(BusyHandler *p){$/;"	f
sqlite3IoTrace	.\main.c	/^void (*sqlite3IoTrace)(const char*, ...) = 0;$/;"	v
sqlite3IoTrace	.\sqliteInt.h	/^SQLITE_EXTERN void (*sqlite3IoTrace)(const char*,...);$/;"	v
sqlite3IsEbcdicIdChar	.\tokenize.c	/^const char sqlite3IsEbcdicIdChar[] = {$/;"	v
sqlite3IsLikeFunction	.\func.c	/^int sqlite3IsLikeFunction(sqlite3 *db, Expr *pExpr, int *pIsNocase, char *aWc){$/;"	f
sqlite3IsMemJournal	.\memjournal.c	/^int sqlite3IsMemJournal(sqlite3_file *pJfd){$/;"	f
sqlite3IsNaN	.\sqliteInt.h	2548;"	d
sqlite3IsNaN	.\util.c	/^int sqlite3IsNaN(double x){$/;"	f
sqlite3IsNumber	.\util.c	/^int sqlite3IsNumber(const char *z, int *realnum, u8 enc){$/;"	f
sqlite3IsNumericAffinity	.\sqliteInt.h	1124;"	d
sqlite3IsReadOnly	.\delete.c	/^int sqlite3IsReadOnly(Parse *pParse, Table *pTab, int viewOk){$/;"	f
sqlite3IsRowid	.\expr.c	/^int sqlite3IsRowid(const char *z){$/;"	f
sqlite3Isalnum	.\sqliteInt.h	2462;"	d
sqlite3Isalnum	.\sqliteInt.h	2470;"	d
sqlite3Isalpha	.\sqliteInt.h	2463;"	d
sqlite3Isalpha	.\sqliteInt.h	2471;"	d
sqlite3Isdigit	.\sqliteInt.h	2464;"	d
sqlite3Isdigit	.\sqliteInt.h	2472;"	d
sqlite3Isspace	.\sqliteInt.h	2461;"	d
sqlite3Isspace	.\sqliteInt.h	2469;"	d
sqlite3Isxdigit	.\sqliteInt.h	2465;"	d
sqlite3Isxdigit	.\sqliteInt.h	2473;"	d
sqlite3JoinType	.\select.c	/^int sqlite3JoinType(Parse *pParse, Token *pA, Token *pB, Token *pC){$/;"	f
sqlite3JournalCreate	.\journal.c	/^int sqlite3JournalCreate(sqlite3_file *p){$/;"	f
sqlite3JournalModename	.\pragma.c	/^const char *sqlite3JournalModename(int eMode){$/;"	f
sqlite3JournalOpen	.\journal.c	/^int sqlite3JournalOpen($/;"	f
sqlite3JournalSize	.\journal.c	/^int sqlite3JournalSize(sqlite3_vfs *pVfs){$/;"	f
sqlite3JournalSize	.\sqliteInt.h	3062;"	d
sqlite3KeywordCode	.\keywordhash.h	/^int sqlite3KeywordCode(const unsigned char *z, int n){$/;"	f
sqlite3LimitWhere	.\delete.c	/^Expr *sqlite3LimitWhere($/;"	f
sqlite3LoadExtension	.\loadext.c	/^static int sqlite3LoadExtension($/;"	f	file:
sqlite3LocateCollSeq	.\build.c	/^CollSeq *sqlite3LocateCollSeq(Parse *pParse, const char *zName){$/;"	f
sqlite3LocateTable	.\build.c	/^Table *sqlite3LocateTable($/;"	f
sqlite3LockAndPrepare	.\prepare.c	/^static int sqlite3LockAndPrepare($/;"	f	file:
sqlite3MAppendf	.\printf.c	/^char *sqlite3MAppendf(sqlite3 *db, char *zStr, const char *zFormat, ...){$/;"	f
sqlite3MPrintf	.\printf.c	/^char *sqlite3MPrintf(sqlite3 *db, const char *zFormat, ...){$/;"	f
sqlite3Malloc	.\malloc.c	/^void *sqlite3Malloc(int n){$/;"	f
sqlite3MallocAlarm	.\malloc.c	/^static void sqlite3MallocAlarm(int nByte){$/;"	f	file:
sqlite3MallocEnd	.\malloc.c	/^void sqlite3MallocEnd(void){$/;"	f
sqlite3MallocInit	.\malloc.c	/^int sqlite3MallocInit(void){$/;"	f
sqlite3MallocSize	.\malloc.c	/^int sqlite3MallocSize(void *p){$/;"	f
sqlite3MallocZero	.\malloc.c	/^void *sqlite3MallocZero(int n){$/;"	f
sqlite3MaterializeView	.\delete.c	/^void sqlite3MaterializeView($/;"	f
sqlite3MayAbort	.\build.c	/^void sqlite3MayAbort(Parse *pParse){$/;"	f
sqlite3MemCompare	.\vdbemem.c	/^int sqlite3MemCompare(const Mem *pMem1, const Mem *pMem2, const CollSeq *pColl){$/;"	f
sqlite3MemFree	.\mem0.c	/^static void sqlite3MemFree(void *pPrior){ return; }$/;"	f	file:
sqlite3MemFree	.\mem1.c	/^static void sqlite3MemFree(void *pPrior){$/;"	f	file:
sqlite3MemFree	.\mem2.c	/^static void sqlite3MemFree(void *pPrior){$/;"	f	file:
sqlite3MemGetMemsys3	.\mem3.c	/^const sqlite3_mem_methods *sqlite3MemGetMemsys3(void){$/;"	f
sqlite3MemGetMemsys5	.\mem5.c	/^const sqlite3_mem_methods *sqlite3MemGetMemsys5(void){$/;"	f
sqlite3MemInit	.\mem0.c	/^static int sqlite3MemInit(void *NotUsed){ return SQLITE_OK; }$/;"	f	file:
sqlite3MemInit	.\mem1.c	/^static int sqlite3MemInit(void *NotUsed){$/;"	f	file:
sqlite3MemInit	.\mem2.c	/^static int sqlite3MemInit(void *NotUsed){$/;"	f	file:
sqlite3MemJournalOpen	.\memjournal.c	/^void sqlite3MemJournalOpen(sqlite3_file *pJfd){$/;"	f
sqlite3MemJournalSize	.\memjournal.c	/^int sqlite3MemJournalSize(void){$/;"	f
sqlite3MemMalloc	.\mem0.c	/^static void *sqlite3MemMalloc(int nByte){ return 0; }$/;"	f	file:
sqlite3MemMalloc	.\mem1.c	/^static void *sqlite3MemMalloc(int nByte){$/;"	f	file:
sqlite3MemMalloc	.\mem2.c	/^static void *sqlite3MemMalloc(int nByte){$/;"	f	file:
sqlite3MemRealloc	.\mem0.c	/^static void *sqlite3MemRealloc(void *pPrior, int nByte){ return 0; }$/;"	f	file:
sqlite3MemRealloc	.\mem1.c	/^static void *sqlite3MemRealloc(void *pPrior, int nByte){$/;"	f	file:
sqlite3MemRealloc	.\mem2.c	/^static void *sqlite3MemRealloc(void *pPrior, int nByte){$/;"	f	file:
sqlite3MemRoundup	.\mem0.c	/^static int sqlite3MemRoundup(int n){ return n; }$/;"	f	file:
sqlite3MemRoundup	.\mem1.c	/^static int sqlite3MemRoundup(int n){$/;"	f	file:
sqlite3MemRoundup	.\mem2.c	/^static int sqlite3MemRoundup(int n){$/;"	f	file:
sqlite3MemSetDefault	.\mem0.c	/^void sqlite3MemSetDefault(void){$/;"	f
sqlite3MemSetDefault	.\mem1.c	/^void sqlite3MemSetDefault(void){$/;"	f
sqlite3MemSetDefault	.\mem2.c	/^void sqlite3MemSetDefault(void){$/;"	f
sqlite3MemShutdown	.\mem0.c	/^static void sqlite3MemShutdown(void *NotUsed){ return; }$/;"	f	file:
sqlite3MemShutdown	.\mem1.c	/^static void sqlite3MemShutdown(void *NotUsed){$/;"	f	file:
sqlite3MemShutdown	.\mem2.c	/^static void sqlite3MemShutdown(void *NotUsed){$/;"	f	file:
sqlite3MemSize	.\mem0.c	/^static int sqlite3MemSize(void *pPrior){ return 0; }$/;"	f	file:
sqlite3MemSize	.\mem1.c	/^static int sqlite3MemSize(void *pPrior){$/;"	f	file:
sqlite3MemSize	.\mem2.c	/^static int sqlite3MemSize(void *p){$/;"	f	file:
sqlite3MemdebugBacktrace	.\mem2.c	/^void sqlite3MemdebugBacktrace(int depth){$/;"	f
sqlite3MemdebugBacktraceCallback	.\mem2.c	/^void sqlite3MemdebugBacktraceCallback(void (*xBacktrace)(int, int, void **)){$/;"	f
sqlite3MemdebugDump	.\mem2.c	/^void sqlite3MemdebugDump(const char *zFilename){$/;"	f
sqlite3MemdebugHasType	.\mem2.c	/^int sqlite3MemdebugHasType(void *p, u8 eType){$/;"	f
sqlite3MemdebugHasType	.\sqliteInt.h	3144;"	d
sqlite3MemdebugMallocCount	.\mem2.c	/^int sqlite3MemdebugMallocCount(){$/;"	f
sqlite3MemdebugNoType	.\mem2.c	/^int sqlite3MemdebugNoType(void *p, u8 eType){$/;"	f
sqlite3MemdebugNoType	.\sqliteInt.h	3145;"	d
sqlite3MemdebugSetType	.\mem2.c	/^void sqlite3MemdebugSetType(void *p, u8 eType){$/;"	f
sqlite3MemdebugSetType	.\sqliteInt.h	3143;"	d
sqlite3MemdebugSettitle	.\mem2.c	/^void sqlite3MemdebugSettitle(const char *zTitle){$/;"	f
sqlite3MemdebugSync	.\mem2.c	/^void sqlite3MemdebugSync(){$/;"	f
sqlite3MemoryAlarm	.\malloc.c	/^int sqlite3MemoryAlarm($/;"	f
sqlite3Memsys3Dump	.\mem3.c	/^void sqlite3Memsys3Dump(const char *zFilename){$/;"	f
sqlite3Memsys5Dump	.\mem5.c	/^void sqlite3Memsys5Dump(const char *zFilename){$/;"	f
sqlite3MemsysGetHeader	.\mem2.c	/^static struct MemBlockHdr *sqlite3MemsysGetHeader(void *pAllocation){$/;"	f	file:
sqlite3MinimumFileFormat	.\alter.c	/^void sqlite3MinimumFileFormat(Parse *pParse, int iDb, int minFormat){$/;"	f
sqlite3MisuseError	.\main.c	/^int sqlite3MisuseError(int lineno){$/;"	f
sqlite3MultiWrite	.\build.c	/^void sqlite3MultiWrite(Parse *pParse){$/;"	f
sqlite3MutexAlloc	.\mutex.c	/^sqlite3_mutex *sqlite3MutexAlloc(int id){$/;"	f
sqlite3MutexAlloc	.\mutex.h	68;"	d
sqlite3MutexEnd	.\mutex.c	/^int sqlite3MutexEnd(void){$/;"	f
sqlite3MutexEnd	.\mutex.h	70;"	d
sqlite3MutexInit	.\mutex.c	/^int sqlite3MutexInit(void){ $/;"	f
sqlite3MutexInit	.\mutex.h	69;"	d
sqlite3NameFromToken	.\build.c	/^char *sqlite3NameFromToken(sqlite3 *db, Token *pName){$/;"	f
sqlite3NestedParse	.\build.c	/^void sqlite3NestedParse(Parse *pParse, const char *zFormat, ...){$/;"	f
sqlite3NoopMutex	.\mutex_noop.c	/^sqlite3_mutex_methods const *sqlite3NoopMutex(void){$/;"	f
sqlite3OSTrace	.\os_common.h	/^int sqlite3OSTrace = 0;$/;"	v
sqlite3OpcodeName	.\opcodes.c	/^const char *sqlite3OpcodeName(int i){$/;"	f
sqlite3OpcodeProperty	.\global.c	/^const unsigned char sqlite3OpcodeProperty[] = OPFLG_INITIALIZER;$/;"	v
sqlite3OpenMasterTable	.\build.c	/^void sqlite3OpenMasterTable(Parse *p, int iDb){$/;"	f
sqlite3OpenTable	.\insert.c	/^void sqlite3OpenTable($/;"	f
sqlite3OpenTableAndIndices	.\insert.c	/^int sqlite3OpenTableAndIndices($/;"	f
sqlite3OpenTempDatabase	.\build.c	/^int sqlite3OpenTempDatabase(Parse *pParse){$/;"	f
sqlite3OsAccess	.\os.c	/^int sqlite3OsAccess($/;"	f
sqlite3OsCheckReservedLock	.\os.c	/^int sqlite3OsCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f
sqlite3OsClose	.\os.c	/^int sqlite3OsClose(sqlite3_file *pId){$/;"	f
sqlite3OsCloseFree	.\os.c	/^int sqlite3OsCloseFree(sqlite3_file *pFile){$/;"	f
sqlite3OsCurrentTimeInt64	.\os.c	/^int sqlite3OsCurrentTimeInt64(sqlite3_vfs *pVfs, sqlite3_int64 *pTimeOut){$/;"	f
sqlite3OsDelete	.\os.c	/^int sqlite3OsDelete(sqlite3_vfs *pVfs, const char *zPath, int dirSync){$/;"	f
sqlite3OsDeviceCharacteristics	.\os.c	/^int sqlite3OsDeviceCharacteristics(sqlite3_file *id){$/;"	f
sqlite3OsDlClose	.\os.c	/^void sqlite3OsDlClose(sqlite3_vfs *pVfs, void *pHandle){$/;"	f
sqlite3OsDlError	.\os.c	/^void sqlite3OsDlError(sqlite3_vfs *pVfs, int nByte, char *zBufOut){$/;"	f
sqlite3OsDlOpen	.\os.c	/^void *sqlite3OsDlOpen(sqlite3_vfs *pVfs, const char *zPath){$/;"	f
sqlite3OsDlSym	.\os.c	/^void (*sqlite3OsDlSym(sqlite3_vfs *pVfs, void *pHdle, const char *zSym))(void){$/;"	f
sqlite3OsFileControl	.\os.c	/^int sqlite3OsFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f
sqlite3OsFileSize	.\os.c	/^int sqlite3OsFileSize(sqlite3_file *id, i64 *pSize){$/;"	f
sqlite3OsFullPathname	.\os.c	/^int sqlite3OsFullPathname($/;"	f
sqlite3OsInit	.\os.c	/^int sqlite3OsInit(void){$/;"	f
sqlite3OsLock	.\os.c	/^int sqlite3OsLock(sqlite3_file *id, int lockType){$/;"	f
sqlite3OsOpen	.\os.c	/^int sqlite3OsOpen($/;"	f
sqlite3OsOpenMalloc	.\os.c	/^int sqlite3OsOpenMalloc($/;"	f
sqlite3OsRandomness	.\os.c	/^int sqlite3OsRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut){$/;"	f
sqlite3OsRead	.\os.c	/^int sqlite3OsRead(sqlite3_file *id, void *pBuf, int amt, i64 offset){$/;"	f
sqlite3OsSectorSize	.\os.c	/^int sqlite3OsSectorSize(sqlite3_file *id){$/;"	f
sqlite3OsShmBarrier	.\os.c	/^void sqlite3OsShmBarrier(sqlite3_file *id){$/;"	f
sqlite3OsShmLock	.\os.c	/^int sqlite3OsShmLock(sqlite3_file *id, int offset, int n, int flags){$/;"	f
sqlite3OsShmMap	.\os.c	/^int sqlite3OsShmMap($/;"	f
sqlite3OsShmUnmap	.\os.c	/^int sqlite3OsShmUnmap(sqlite3_file *id, int deleteFlag){$/;"	f
sqlite3OsSleep	.\os.c	/^int sqlite3OsSleep(sqlite3_vfs *pVfs, int nMicro){$/;"	f
sqlite3OsSync	.\os.c	/^int sqlite3OsSync(sqlite3_file *id, int flags){$/;"	f
sqlite3OsTruncate	.\os.c	/^int sqlite3OsTruncate(sqlite3_file *id, i64 size){$/;"	f
sqlite3OsUnlock	.\os.c	/^int sqlite3OsUnlock(sqlite3_file *id, int lockType){$/;"	f
sqlite3OsWrite	.\os.c	/^int sqlite3OsWrite(sqlite3_file *id, const void *pBuf, int amt, i64 offset){$/;"	f
sqlite3PCacheBufferSetup	.\pcache1.c	/^void sqlite3PCacheBufferSetup(void *pBuf, int sz, int n){$/;"	f
sqlite3PCacheSetDefault	.\pcache1.c	/^void sqlite3PCacheSetDefault(void){$/;"	f
sqlite3PExpr	.\expr.c	/^Expr *sqlite3PExpr($/;"	f
sqlite3PageFree	.\pcache1.c	/^void sqlite3PageFree(void *p){$/;"	f
sqlite3PageMalloc	.\pcache1.c	/^void *sqlite3PageMalloc(int sz){$/;"	f
sqlite3PagerAcquire	.\pager.c	/^int sqlite3PagerAcquire($/;"	f
sqlite3PagerBackupPtr	.\pager.c	/^sqlite3_backup **sqlite3PagerBackupPtr(Pager *pPager){$/;"	f
sqlite3PagerBegin	.\pager.c	/^int sqlite3PagerBegin(Pager *pPager, int exFlag, int subjInMemory){$/;"	f
sqlite3PagerCheckpoint	.\pager.c	/^int sqlite3PagerCheckpoint(Pager *pPager){$/;"	f
sqlite3PagerClose	.\pager.c	/^int sqlite3PagerClose(Pager *pPager){$/;"	f
sqlite3PagerCloseWal	.\pager.c	/^int sqlite3PagerCloseWal(Pager *pPager){$/;"	f
sqlite3PagerCodec	.\pager.c	/^void *sqlite3PagerCodec(PgHdr *pPg){$/;"	f
sqlite3PagerCommitPhaseOne	.\pager.c	/^int sqlite3PagerCommitPhaseOne($/;"	f
sqlite3PagerCommitPhaseTwo	.\pager.c	/^int sqlite3PagerCommitPhaseTwo(Pager *pPager){$/;"	f
sqlite3PagerDontWrite	.\pager.c	/^void sqlite3PagerDontWrite(PgHdr *pPg){$/;"	f
sqlite3PagerExclusiveLock	.\pager.c	/^int sqlite3PagerExclusiveLock(Pager *pPager){$/;"	f
sqlite3PagerFile	.\pager.c	/^sqlite3_file *sqlite3PagerFile(Pager *pPager){$/;"	f
sqlite3PagerFilename	.\pager.c	/^const char *sqlite3PagerFilename(Pager *pPager){$/;"	f
sqlite3PagerGet	.\pager.h	115;"	d
sqlite3PagerGetCodec	.\pager.c	/^void *sqlite3PagerGetCodec(Pager *pPager){$/;"	f
sqlite3PagerGetData	.\pager.c	/^void *sqlite3PagerGetData(DbPage *pPg){$/;"	f
sqlite3PagerGetExtra	.\pager.c	/^void *sqlite3PagerGetExtra(DbPage *pPg){$/;"	f
sqlite3PagerGetJournalMode	.\pager.c	/^int sqlite3PagerGetJournalMode(Pager *pPager){$/;"	f
sqlite3PagerIsMemdb	.\pager.c	/^int sqlite3PagerIsMemdb(Pager *pPager){$/;"	f
sqlite3PagerIsreadonly	.\pager.c	/^u8 sqlite3PagerIsreadonly(Pager *pPager){$/;"	f
sqlite3PagerIswriteable	.\pager.c	/^int sqlite3PagerIswriteable(DbPage *pPg){$/;"	f
sqlite3PagerJournalSizeLimit	.\pager.c	/^i64 sqlite3PagerJournalSizeLimit(Pager *pPager, i64 iLimit){$/;"	f
sqlite3PagerJournalname	.\pager.c	/^const char *sqlite3PagerJournalname(Pager *pPager){$/;"	f
sqlite3PagerLockingMode	.\pager.c	/^int sqlite3PagerLockingMode(Pager *pPager, int eMode){$/;"	f
sqlite3PagerLookup	.\pager.c	/^DbPage *sqlite3PagerLookup(Pager *pPager, Pgno pgno){$/;"	f
sqlite3PagerMaxPageCount	.\pager.c	/^int sqlite3PagerMaxPageCount(Pager *pPager, int mxPage){$/;"	f
sqlite3PagerMemUsed	.\pager.c	/^int sqlite3PagerMemUsed(Pager *pPager){$/;"	f
sqlite3PagerMovepage	.\pager.c	/^int sqlite3PagerMovepage(Pager *pPager, DbPage *pPg, Pgno pgno, int isCommit){$/;"	f
sqlite3PagerNosync	.\pager.c	/^int sqlite3PagerNosync(Pager *pPager){$/;"	f
sqlite3PagerOkToChangeJournalMode	.\pager.c	/^int sqlite3PagerOkToChangeJournalMode(Pager *pPager){$/;"	f
sqlite3PagerOpen	.\pager.c	/^int sqlite3PagerOpen($/;"	f
sqlite3PagerOpenSavepoint	.\pager.c	/^int sqlite3PagerOpenSavepoint(Pager *pPager, int nSavepoint){$/;"	f
sqlite3PagerOpenWal	.\pager.c	/^int sqlite3PagerOpenWal($/;"	f
sqlite3PagerPageRefcount	.\pager.c	/^int sqlite3PagerPageRefcount(DbPage *pPage){$/;"	f
sqlite3PagerPagecount	.\pager.c	/^void sqlite3PagerPagecount(Pager *pPager, int *pnPage){$/;"	f
sqlite3PagerPagenumber	.\pager.c	/^Pgno sqlite3PagerPagenumber(DbPage *pPg){$/;"	f
sqlite3PagerReadFileheader	.\pager.c	/^int sqlite3PagerReadFileheader(Pager *pPager, int N, unsigned char *pDest){$/;"	f
sqlite3PagerRef	.\pager.c	/^void sqlite3PagerRef(DbPage *pPg){$/;"	f
sqlite3PagerRefcount	.\pager.c	/^int sqlite3PagerRefcount(Pager *pPager){$/;"	f
sqlite3PagerRollback	.\pager.c	/^int sqlite3PagerRollback(Pager *pPager){$/;"	f
sqlite3PagerSavepoint	.\pager.c	/^int sqlite3PagerSavepoint(Pager *pPager, int op, int iSavepoint){$/;"	f
sqlite3PagerSetBusyhandler	.\pager.c	/^void sqlite3PagerSetBusyhandler($/;"	f
sqlite3PagerSetCachesize	.\pager.c	/^void sqlite3PagerSetCachesize(Pager *pPager, int mxPage){$/;"	f
sqlite3PagerSetCodec	.\pager.c	/^void sqlite3PagerSetCodec($/;"	f
sqlite3PagerSetJournalMode	.\pager.c	/^int sqlite3PagerSetJournalMode(Pager *pPager, int eMode){$/;"	f
sqlite3PagerSetPagesize	.\pager.c	/^int sqlite3PagerSetPagesize(Pager *pPager, u32 *pPageSize, int nReserve){$/;"	f
sqlite3PagerSetSafetyLevel	.\pager.c	/^void sqlite3PagerSetSafetyLevel(Pager *pPager, int level, int bFullFsync){$/;"	f
sqlite3PagerSharedLock	.\pager.c	/^int sqlite3PagerSharedLock(Pager *pPager){$/;"	f
sqlite3PagerStats	.\pager.c	/^int *sqlite3PagerStats(Pager *pPager){$/;"	f
sqlite3PagerSync	.\pager.c	/^int sqlite3PagerSync(Pager *pPager){$/;"	f
sqlite3PagerTempSpace	.\pager.c	/^void *sqlite3PagerTempSpace(Pager *pPager){$/;"	f
sqlite3PagerTruncateImage	.\pager.c	/^void sqlite3PagerTruncateImage(Pager *pPager, Pgno nPage){$/;"	f
sqlite3PagerUnref	.\pager.c	/^void sqlite3PagerUnref(DbPage *pPg){$/;"	f
sqlite3PagerVfs	.\pager.c	/^const sqlite3_vfs *sqlite3PagerVfs(Pager *pPager){$/;"	f
sqlite3PagerWalCallback	.\pager.c	/^int sqlite3PagerWalCallback(Pager *pPager){$/;"	f
sqlite3PagerWalSupported	.\pager.c	/^int sqlite3PagerWalSupported(Pager *pPager){$/;"	f
sqlite3PagerWrite	.\pager.c	/^int sqlite3PagerWrite(DbPage *pDbPage){$/;"	f
sqlite3ParseToplevel	.\sqliteInt.h	2766;"	d
sqlite3ParseToplevel	.\sqliteInt.h	2775;"	d
sqlite3Parser	.\parse.c	/^void sqlite3Parser($/;"	f
sqlite3ParserARG_FETCH	.\parse.c	217;"	d	file:
sqlite3ParserARG_PDECL	.\parse.c	216;"	d	file:
sqlite3ParserARG_SDECL	.\parse.c	215;"	d	file:
sqlite3ParserARG_STORE	.\parse.c	218;"	d	file:
sqlite3ParserAlloc	.\parse.c	/^void *sqlite3ParserAlloc(void *(*mallocProc)(size_t)){$/;"	f
sqlite3ParserFree	.\parse.c	/^void sqlite3ParserFree($/;"	f
sqlite3ParserStackPeak	.\parse.c	/^int sqlite3ParserStackPeak(void *p){$/;"	f
sqlite3ParserTOKENTYPE	.\parse.c	194;"	d	file:
sqlite3ParserTrace	.\parse.c	/^void sqlite3ParserTrace(FILE *TraceFILE, char *zTracePrompt){$/;"	f
sqlite3PcacheCleanAll	.\pcache.c	/^void sqlite3PcacheCleanAll(PCache *pCache){$/;"	f
sqlite3PcacheClear	.\pcache.c	/^void sqlite3PcacheClear(PCache *pCache){$/;"	f
sqlite3PcacheClearSyncFlags	.\pcache.c	/^void sqlite3PcacheClearSyncFlags(PCache *pCache){$/;"	f
sqlite3PcacheClose	.\pcache.c	/^void sqlite3PcacheClose(PCache *pCache){$/;"	f
sqlite3PcacheDirtyList	.\pcache.c	/^PgHdr *sqlite3PcacheDirtyList(PCache *pCache){$/;"	f
sqlite3PcacheDrop	.\pcache.c	/^void sqlite3PcacheDrop(PgHdr *p){$/;"	f
sqlite3PcacheFetch	.\pcache.c	/^int sqlite3PcacheFetch($/;"	f
sqlite3PcacheGetCachesize	.\pcache.c	/^int sqlite3PcacheGetCachesize(PCache *pCache){$/;"	f
sqlite3PcacheInitialize	.\pcache.c	/^int sqlite3PcacheInitialize(void){$/;"	f
sqlite3PcacheIterateDirty	.\pcache.c	/^void sqlite3PcacheIterateDirty(PCache *pCache, void (*xIter)(PgHdr *)){$/;"	f
sqlite3PcacheMakeClean	.\pcache.c	/^void sqlite3PcacheMakeClean(PgHdr *p){$/;"	f
sqlite3PcacheMakeDirty	.\pcache.c	/^void sqlite3PcacheMakeDirty(PgHdr *p){$/;"	f
sqlite3PcacheMove	.\pcache.c	/^void sqlite3PcacheMove(PgHdr *p, Pgno newPgno){$/;"	f
sqlite3PcacheOpen	.\pcache.c	/^void sqlite3PcacheOpen($/;"	f
sqlite3PcachePageRefcount	.\pcache.c	/^int sqlite3PcachePageRefcount(PgHdr *p){$/;"	f
sqlite3PcachePagecount	.\pcache.c	/^int sqlite3PcachePagecount(PCache *pCache){$/;"	f
sqlite3PcacheRef	.\pcache.c	/^void sqlite3PcacheRef(PgHdr *p){$/;"	f
sqlite3PcacheRefCount	.\pcache.c	/^int sqlite3PcacheRefCount(PCache *pCache){$/;"	f
sqlite3PcacheRelease	.\pcache.c	/^void sqlite3PcacheRelease(PgHdr *p){$/;"	f
sqlite3PcacheReleaseMemory	.\pcache1.c	/^int sqlite3PcacheReleaseMemory(int nReq){$/;"	f
sqlite3PcacheSetCachesize	.\pcache.c	/^void sqlite3PcacheSetCachesize(PCache *pCache, int mxPage){$/;"	f
sqlite3PcacheSetPageSize	.\pcache.c	/^void sqlite3PcacheSetPageSize(PCache *pCache, int szPage){$/;"	f
sqlite3PcacheShutdown	.\pcache.c	/^void sqlite3PcacheShutdown(void){$/;"	f
sqlite3PcacheSize	.\pcache.c	/^int sqlite3PcacheSize(void){ return sizeof(PCache); }$/;"	f
sqlite3PcacheStats	.\pcache1.c	/^void sqlite3PcacheStats($/;"	f
sqlite3PcacheTruncate	.\pcache.c	/^void sqlite3PcacheTruncate(PCache *pCache, Pgno pgno){$/;"	f
sqlite3PendingByte	.\global.c	/^int sqlite3PendingByte = 0x40000000;$/;"	v
sqlite3Pragma	.\pragma.c	/^void sqlite3Pragma($/;"	f
sqlite3Prepare	.\prepare.c	/^static int sqlite3Prepare($/;"	f	file:
sqlite3Prepare16	.\prepare.c	/^static int sqlite3Prepare16($/;"	f	file:
sqlite3PrintExpr	.\select.c	/^void sqlite3PrintExpr(Expr *p){$/;"	f
sqlite3PrintExprList	.\select.c	/^void sqlite3PrintExprList(ExprList *pList){$/;"	f
sqlite3PrintSelect	.\select.c	/^void sqlite3PrintSelect(Select *p, int indent){$/;"	f
sqlite3Prng	.\random.c	/^} sqlite3Prng;$/;"	v	typeref:struct:sqlite3PrngType	file:
sqlite3PrngResetState	.\random.c	/^void sqlite3PrngResetState(void){$/;"	f
sqlite3PrngRestoreState	.\random.c	/^void sqlite3PrngRestoreState(void){$/;"	f
sqlite3PrngSaveState	.\random.c	/^void sqlite3PrngSaveState(void){$/;"	f
sqlite3PrngType	.\random.c	/^static SQLITE_WSD struct sqlite3PrngType {$/;"	s	file:
sqlite3Put4byte	.\util.c	/^void sqlite3Put4byte(unsigned char *p, u32 v){$/;"	f
sqlite3PutVarint	.\util.c	/^int sqlite3PutVarint(unsigned char *p, u64 v){$/;"	f
sqlite3PutVarint32	.\util.c	/^int sqlite3PutVarint32(unsigned char *p, u32 v){$/;"	f
sqlite3ReadSchema	.\prepare.c	/^int sqlite3ReadSchema(Parse *pParse){$/;"	f
sqlite3Realloc	.\malloc.c	/^void *sqlite3Realloc(void *pOld, int nBytes){$/;"	f
sqlite3RefillIndex	.\build.c	/^static void sqlite3RefillIndex(Parse *pParse, Index *pIndex, int memRootPage){$/;"	f	file:
sqlite3RegisterBuiltinFunctions	.\func.c	/^void sqlite3RegisterBuiltinFunctions(sqlite3 *db){$/;"	f
sqlite3RegisterDateTimeFunctions	.\date.c	/^void sqlite3RegisterDateTimeFunctions(void){$/;"	f
sqlite3RegisterGlobalFunctions	.\func.c	/^void sqlite3RegisterGlobalFunctions(void){$/;"	f
sqlite3RegisterLikeFunctions	.\func.c	/^void sqlite3RegisterLikeFunctions(sqlite3 *db, int caseSensitive){$/;"	f
sqlite3Reindex	.\build.c	/^void sqlite3Reindex(Parse *pParse, Token *pName1, Token *pName2){$/;"	f
sqlite3ReleaseTempRange	.\expr.c	/^void sqlite3ReleaseTempRange(Parse *pParse, int iReg, int nReg){$/;"	f
sqlite3ReleaseTempReg	.\expr.c	/^void sqlite3ReleaseTempReg(Parse *pParse, int iReg){$/;"	f
sqlite3Reprepare	.\prepare.c	/^int sqlite3Reprepare(Vdbe *p){$/;"	f
sqlite3ResetInternalSchema	.\build.c	/^void sqlite3ResetInternalSchema(sqlite3 *db, int iDb){$/;"	f
sqlite3ResolveExprNames	.\resolve.c	/^int sqlite3ResolveExprNames( $/;"	f
sqlite3ResolveOrderGroupBy	.\resolve.c	/^int sqlite3ResolveOrderGroupBy($/;"	f
sqlite3ResolveSelectNames	.\resolve.c	/^void sqlite3ResolveSelectNames($/;"	f
sqlite3ResultSetOfSelect	.\select.c	/^Table *sqlite3ResultSetOfSelect(Parse *pParse, Select *pSelect){$/;"	f
sqlite3RollbackAll	.\main.c	/^void sqlite3RollbackAll(sqlite3 *db){$/;"	f
sqlite3RollbackTransaction	.\build.c	/^void sqlite3RollbackTransaction(Parse *pParse){$/;"	f
sqlite3RootPageMoved	.\build.c	/^void sqlite3RootPageMoved(Db *pDb, int iFrom, int iTo){$/;"	f
sqlite3RowSetClear	.\rowset.c	/^void sqlite3RowSetClear(RowSet *p){$/;"	f
sqlite3RowSetInit	.\rowset.c	/^RowSet *sqlite3RowSetInit(sqlite3 *db, void *pSpace, unsigned int N){$/;"	f
sqlite3RowSetInsert	.\rowset.c	/^void sqlite3RowSetInsert(RowSet *p, i64 rowid){$/;"	f
sqlite3RowSetNext	.\rowset.c	/^int sqlite3RowSetNext(RowSet *p, i64 *pRowid){$/;"	f
sqlite3RowSetTest	.\rowset.c	/^int sqlite3RowSetTest(RowSet *pRowSet, u8 iBatch, sqlite3_int64 iRowid){$/;"	f
sqlite3RtreeInit	.\rtree.c	/^int sqlite3RtreeInit(sqlite3 *db){$/;"	f
sqlite3RunParser	.\tokenize.c	/^int sqlite3RunParser(Parse *pParse, const char *zSql, char **pzErrMsg){$/;"	f
sqlite3RunVacuum	.\vacuum.c	/^int sqlite3RunVacuum(char **pzErrMsg, sqlite3 *db){$/;"	f
sqlite3SafetyCheckOk	.\util.c	/^int sqlite3SafetyCheckOk(sqlite3 *db){$/;"	f
sqlite3SafetyCheckSickOrOk	.\util.c	/^int sqlite3SafetyCheckSickOrOk(sqlite3 *db){$/;"	f
sqlite3SavedPrng	.\random.c	/^static SQLITE_WSD struct sqlite3PrngType sqlite3SavedPrng;$/;"	v	typeref:struct:sqlite3PrngType	file:
sqlite3Savepoint	.\build.c	/^void sqlite3Savepoint(Parse *pParse, int op, Token *pName){$/;"	f
sqlite3SchemaFree	.\callback.c	/^void sqlite3SchemaFree(void *p){$/;"	f
sqlite3SchemaGet	.\callback.c	/^Schema *sqlite3SchemaGet(sqlite3 *db, Btree *pBt){$/;"	f
sqlite3SchemaToIndex	.\prepare.c	/^int sqlite3SchemaToIndex(sqlite3 *db, Schema *pSchema){$/;"	f
sqlite3ScratchFree	.\malloc.c	/^void sqlite3ScratchFree(void *p){$/;"	f
sqlite3ScratchMalloc	.\malloc.c	/^void *sqlite3ScratchMalloc(int n){$/;"	f
sqlite3Select	.\select.c	/^int sqlite3Select($/;"	f
sqlite3SelectAddTypeInfo	.\select.c	/^static void sqlite3SelectAddTypeInfo(Parse *pParse, Select *pSelect){$/;"	f	file:
sqlite3SelectDelete	.\select.c	/^void sqlite3SelectDelete(sqlite3 *db, Select *p){$/;"	f
sqlite3SelectDestInit	.\select.c	/^void sqlite3SelectDestInit(SelectDest *pDest, int eDest, int iParm){$/;"	f
sqlite3SelectDup	.\expr.c	/^Select *sqlite3SelectDup(sqlite3 *db, Select *p, int flags){$/;"	f
sqlite3SelectExpand	.\select.c	/^static void sqlite3SelectExpand(Parse *pParse, Select *pSelect){$/;"	f	file:
sqlite3SelectExprHeight	.\expr.c	/^int sqlite3SelectExprHeight(Select *p){$/;"	f
sqlite3SelectExprHeight	.\sqliteInt.h	3075;"	d
sqlite3SelectNew	.\select.c	/^Select *sqlite3SelectNew($/;"	f
sqlite3SelectPrep	.\select.c	/^void sqlite3SelectPrep($/;"	f
sqlite3SetString	.\malloc.c	/^void sqlite3SetString(char **pz, sqlite3 *db, const char *zFormat, ...){$/;"	f
sqlite3SharedCacheList	.\btree.c	/^BtShared *SQLITE_WSD sqlite3SharedCacheList = 0;$/;"	v
sqlite3SharedCacheList	.\btree.c	/^static BtShared *SQLITE_WSD sqlite3SharedCacheList = 0;$/;"	v	file:
sqlite3SrcListAppend	.\build.c	/^SrcList *sqlite3SrcListAppend($/;"	f
sqlite3SrcListAppendFromTerm	.\build.c	/^SrcList *sqlite3SrcListAppendFromTerm($/;"	f
sqlite3SrcListAssignCursors	.\build.c	/^void sqlite3SrcListAssignCursors(Parse *pParse, SrcList *pList){$/;"	f
sqlite3SrcListDelete	.\build.c	/^void sqlite3SrcListDelete(sqlite3 *db, SrcList *pList){$/;"	f
sqlite3SrcListDup	.\expr.c	/^SrcList *sqlite3SrcListDup(sqlite3 *db, SrcList *p, int flags){$/;"	f
sqlite3SrcListEnlarge	.\build.c	/^SrcList *sqlite3SrcListEnlarge($/;"	f
sqlite3SrcListIndexedBy	.\build.c	/^void sqlite3SrcListIndexedBy(Parse *pParse, SrcList *p, Token *pIndexedBy){$/;"	f
sqlite3SrcListLookup	.\delete.c	/^Table *sqlite3SrcListLookup(Parse *pParse, SrcList *pSrc){$/;"	f
sqlite3SrcListShiftJoinType	.\build.c	/^void sqlite3SrcListShiftJoinType(SrcList *p){$/;"	f
sqlite3StackAllocRaw	.\sqliteInt.h	2516;"	d
sqlite3StackAllocRaw	.\sqliteInt.h	2520;"	d
sqlite3StackAllocZero	.\sqliteInt.h	2517;"	d
sqlite3StackAllocZero	.\sqliteInt.h	2521;"	d
sqlite3StackFree	.\sqliteInt.h	2518;"	d
sqlite3StackFree	.\sqliteInt.h	2522;"	d
sqlite3StartTable	.\build.c	/^void sqlite3StartTable($/;"	f
sqlite3Stat	.\status.c	/^} sqlite3Stat = { {0,}, {0,} };$/;"	v	typeref:struct:sqlite3StatType	file:
sqlite3StatType	.\status.c	/^static SQLITE_WSD struct sqlite3StatType {$/;"	s	file:
sqlite3StatType	.\status.c	/^typedef struct sqlite3StatType sqlite3StatType;$/;"	t	typeref:struct:sqlite3StatType	file:
sqlite3StatusAdd	.\status.c	/^void sqlite3StatusAdd(int op, int N){$/;"	f
sqlite3StatusSet	.\status.c	/^void sqlite3StatusSet(int op, int X){$/;"	f
sqlite3StatusValue	.\status.c	/^int sqlite3StatusValue(int op){$/;"	f
sqlite3Step	.\vdbeapi.c	/^static int sqlite3Step(Vdbe *p){$/;"	f	file:
sqlite3StrAccumAppend	.\printf.c	/^void sqlite3StrAccumAppend(StrAccum *p, const char *z, int N){$/;"	f
sqlite3StrAccumFinish	.\printf.c	/^char *sqlite3StrAccumFinish(StrAccum *p){$/;"	f
sqlite3StrAccumInit	.\printf.c	/^void sqlite3StrAccumInit(StrAccum *p, char *zBase, int n, int mx){$/;"	f
sqlite3StrAccumReset	.\printf.c	/^void sqlite3StrAccumReset(StrAccum *p){$/;"	f
sqlite3StrICmp	.\util.c	/^int sqlite3StrICmp(const char *zLeft, const char *zRight){$/;"	f
sqlite3StrNICmp	.\sqliteInt.h	2483;"	d
sqlite3Strlen30	.\util.c	/^int sqlite3Strlen30(const char *z){$/;"	f
sqlite3TableAffinityStr	.\insert.c	/^void sqlite3TableAffinityStr(Vdbe *v, Table *pTab){$/;"	f
sqlite3TableLock	.\build.c	/^void sqlite3TableLock($/;"	f
sqlite3TableLock	.\sqliteInt.h	2957;"	d
sqlite3TempInMemory	.\main.c	/^int sqlite3TempInMemory(const sqlite3 *db){$/;"	f
sqlite3Tolower	.\sqliteInt.h	2466;"	d
sqlite3Tolower	.\sqliteInt.h	2474;"	d
sqlite3Toupper	.\sqliteInt.h	2460;"	d
sqlite3Toupper	.\sqliteInt.h	2468;"	d
sqlite3TransferBindings	.\vdbeapi.c	/^int sqlite3TransferBindings(sqlite3_stmt *pFromStmt, sqlite3_stmt *pToStmt){$/;"	f
sqlite3TriggerColmask	.\sqliteInt.h	2776;"	d
sqlite3TriggerColmask	.\trigger.c	/^u32 sqlite3TriggerColmask($/;"	f
sqlite3TriggerDeleteStep	.\trigger.c	/^TriggerStep *sqlite3TriggerDeleteStep($/;"	f
sqlite3TriggerInsertStep	.\trigger.c	/^TriggerStep *sqlite3TriggerInsertStep($/;"	f
sqlite3TriggerList	.\sqliteInt.h	2774;"	d
sqlite3TriggerList	.\trigger.c	/^Trigger *sqlite3TriggerList(Parse *pParse, Table *pTab){$/;"	f
sqlite3TriggerSelectStep	.\trigger.c	/^TriggerStep *sqlite3TriggerSelectStep(sqlite3 *db, Select *pSelect){$/;"	f
sqlite3TriggerUpdateStep	.\trigger.c	/^TriggerStep *sqlite3TriggerUpdateStep($/;"	f
sqlite3TriggersExist	.\sqliteInt.h	2768;"	d
sqlite3TriggersExist	.\trigger.c	/^Trigger *sqlite3TriggersExist($/;"	f
sqlite3TwoPartName	.\build.c	/^int sqlite3TwoPartName($/;"	f
sqlite3UnlinkAndDeleteIndex	.\build.c	/^void sqlite3UnlinkAndDeleteIndex(sqlite3 *db, int iDb, const char *zIdxName){$/;"	f
sqlite3UnlinkAndDeleteTable	.\build.c	/^void sqlite3UnlinkAndDeleteTable(sqlite3 *db, int iDb, const char *zTabName){$/;"	f
sqlite3UnlinkAndDeleteTrigger	.\sqliteInt.h	2771;"	d
sqlite3UnlinkAndDeleteTrigger	.\trigger.c	/^void sqlite3UnlinkAndDeleteTrigger(sqlite3 *db, int iDb, const char *zName){$/;"	f
sqlite3Update	.\update.c	/^void sqlite3Update($/;"	f
sqlite3UpperToLower	.\global.c	/^const unsigned char sqlite3UpperToLower[] = {$/;"	v
sqlite3Utf16ByteLen	.\utf.c	/^int sqlite3Utf16ByteLen(const void *zIn, int nChar){$/;"	f
sqlite3Utf16to8	.\utf.c	/^char *sqlite3Utf16to8(sqlite3 *db, const void *z, int nByte, u8 enc){$/;"	f
sqlite3Utf8CharLen	.\utf.c	/^int sqlite3Utf8CharLen(const char *zIn, int nByte){$/;"	f
sqlite3Utf8Read	.\func.c	509;"	d	file:
sqlite3Utf8Read	.\utf.c	/^int sqlite3Utf8Read($/;"	f
sqlite3Utf8To8	.\utf.c	/^int sqlite3Utf8To8(unsigned char *zIn){$/;"	f
sqlite3Utf8Trans1	.\utf.c	/^static const unsigned char sqlite3Utf8Trans1[] = {$/;"	v	file:
sqlite3Utf8to16	.\utf.c	/^char *sqlite3Utf8to16(sqlite3 *db, u8 enc, char *z, int n, int *pnOut){$/;"	f
sqlite3UtfSelfTest	.\utf.c	/^void sqlite3UtfSelfTest(void){$/;"	f
sqlite3VMPrintf	.\printf.c	/^char *sqlite3VMPrintf(sqlite3 *db, const char *zFormat, va_list ap){$/;"	f
sqlite3VXPrintf	.\printf.c	/^void sqlite3VXPrintf($/;"	f
sqlite3Vacuum	.\vacuum.c	/^void sqlite3Vacuum(Parse *pParse){$/;"	f
sqlite3ValueApplyAffinity	.\vdbe.c	/^void sqlite3ValueApplyAffinity($/;"	f
sqlite3ValueBytes	.\vdbemem.c	/^int sqlite3ValueBytes(sqlite3_value *pVal, u8 enc){$/;"	f
sqlite3ValueFree	.\vdbemem.c	/^void sqlite3ValueFree(sqlite3_value *v){$/;"	f
sqlite3ValueFromExpr	.\vdbemem.c	/^int sqlite3ValueFromExpr($/;"	f
sqlite3ValueNew	.\vdbemem.c	/^sqlite3_value *sqlite3ValueNew(sqlite3 *db){$/;"	f
sqlite3ValueSetStr	.\vdbemem.c	/^void sqlite3ValueSetStr($/;"	f
sqlite3ValueText	.\vdbemem.c	/^const void *sqlite3ValueText(sqlite3_value* pVal, u8 enc){$/;"	f
sqlite3VarintLen	.\util.c	/^int sqlite3VarintLen(u64 v){$/;"	f
sqlite3VdbeAddOp0	.\vdbeaux.c	/^int sqlite3VdbeAddOp0(Vdbe *p, int op){$/;"	f
sqlite3VdbeAddOp1	.\vdbeaux.c	/^int sqlite3VdbeAddOp1(Vdbe *p, int op, int p1){$/;"	f
sqlite3VdbeAddOp2	.\vdbeaux.c	/^int sqlite3VdbeAddOp2(Vdbe *p, int op, int p1, int p2){$/;"	f
sqlite3VdbeAddOp3	.\vdbeaux.c	/^int sqlite3VdbeAddOp3(Vdbe *p, int op, int p1, int p2, int p3){$/;"	f
sqlite3VdbeAddOp4	.\vdbeaux.c	/^int sqlite3VdbeAddOp4($/;"	f
sqlite3VdbeAddOp4Int	.\vdbeaux.c	/^int sqlite3VdbeAddOp4Int($/;"	f
sqlite3VdbeAddOpList	.\vdbeaux.c	/^int sqlite3VdbeAddOpList(Vdbe *p, int nOp, VdbeOpList const *aOp){$/;"	f
sqlite3VdbeAddopTrace	.\vdbeaux.c	/^int sqlite3VdbeAddopTrace = 0;$/;"	v
sqlite3VdbeAssertMayAbort	.\vdbeaux.c	/^int sqlite3VdbeAssertMayAbort(Vdbe *v, int mayAbort){$/;"	f
sqlite3VdbeChangeEncoding	.\vdbemem.c	/^int sqlite3VdbeChangeEncoding(Mem *pMem, int desiredEnc){$/;"	f
sqlite3VdbeChangeP1	.\vdbeaux.c	/^void sqlite3VdbeChangeP1(Vdbe *p, int addr, int val){$/;"	f
sqlite3VdbeChangeP2	.\vdbeaux.c	/^void sqlite3VdbeChangeP2(Vdbe *p, int addr, int val){$/;"	f
sqlite3VdbeChangeP3	.\vdbeaux.c	/^void sqlite3VdbeChangeP3(Vdbe *p, int addr, int val){$/;"	f
sqlite3VdbeChangeP4	.\vdbeaux.c	/^void sqlite3VdbeChangeP4(Vdbe *p, int addr, const char *zP4, int n){$/;"	f
sqlite3VdbeChangeP5	.\vdbeaux.c	/^void sqlite3VdbeChangeP5(Vdbe *p, u8 val){$/;"	f
sqlite3VdbeChangeToNoop	.\vdbeaux.c	/^void sqlite3VdbeChangeToNoop(Vdbe *p, int addr, int N){$/;"	f
sqlite3VdbeCheckFk	.\vdbeInt.h	397;"	d
sqlite3VdbeCheckFk	.\vdbeaux.c	/^int sqlite3VdbeCheckFk(Vdbe *p, int deferred){$/;"	f
sqlite3VdbeCloseStatement	.\vdbeaux.c	/^int sqlite3VdbeCloseStatement(Vdbe *p, int eOp){$/;"	f
sqlite3VdbeComment	.\vdbeaux.c	/^void sqlite3VdbeComment(Vdbe *p, const char *zFormat, ...){$/;"	f
sqlite3VdbeCountChanges	.\vdbeaux.c	/^void sqlite3VdbeCountChanges(Vdbe *v){$/;"	f
sqlite3VdbeCreate	.\vdbeaux.c	/^Vdbe *sqlite3VdbeCreate(sqlite3 *db){$/;"	f
sqlite3VdbeCurrentAddr	.\vdbeaux.c	/^int sqlite3VdbeCurrentAddr(Vdbe *p){$/;"	f
sqlite3VdbeCursorMoveto	.\vdbeaux.c	/^int sqlite3VdbeCursorMoveto(VdbeCursor *p){$/;"	f
sqlite3VdbeDb	.\vdbeaux.c	/^sqlite3 *sqlite3VdbeDb(Vdbe *v){$/;"	f
sqlite3VdbeDelete	.\vdbeaux.c	/^void sqlite3VdbeDelete(Vdbe *p){$/;"	f
sqlite3VdbeDeleteAuxData	.\vdbeaux.c	/^void sqlite3VdbeDeleteAuxData(VdbeFunc *pVdbeFunc, int mask){$/;"	f
sqlite3VdbeDeleteObject	.\vdbeaux.c	/^void sqlite3VdbeDeleteObject(sqlite3 *db, Vdbe *p){$/;"	f
sqlite3VdbeDeleteUnpackedRecord	.\vdbeaux.c	/^void sqlite3VdbeDeleteUnpackedRecord(UnpackedRecord *p){$/;"	f
sqlite3VdbeExec	.\vdbe.c	/^int sqlite3VdbeExec($/;"	f
sqlite3VdbeExpandSql	.\vdbetrace.c	/^char *sqlite3VdbeExpandSql($/;"	f
sqlite3VdbeFinalize	.\vdbeaux.c	/^int sqlite3VdbeFinalize(Vdbe *p){$/;"	f
sqlite3VdbeFrameDelete	.\vdbeaux.c	/^void sqlite3VdbeFrameDelete(VdbeFrame *p){$/;"	f
sqlite3VdbeFrameRestore	.\vdbeaux.c	/^int sqlite3VdbeFrameRestore(VdbeFrame *pFrame){$/;"	f
sqlite3VdbeFreeCursor	.\vdbeaux.c	/^void sqlite3VdbeFreeCursor(Vdbe *p, VdbeCursor *pCx){$/;"	f
sqlite3VdbeGetOp	.\vdbeaux.c	/^VdbeOp *sqlite3VdbeGetOp(Vdbe *p, int addr){$/;"	f
sqlite3VdbeGetValue	.\vdbeaux.c	/^sqlite3_value *sqlite3VdbeGetValue(Vdbe *v, int iVar, u8 aff){$/;"	f
sqlite3VdbeHalt	.\vdbeaux.c	/^int sqlite3VdbeHalt(Vdbe *p){$/;"	f
sqlite3VdbeIOTraceSql	.\sqliteInt.h	3107;"	d
sqlite3VdbeIOTraceSql	.\vdbeaux.c	/^void sqlite3VdbeIOTraceSql(Vdbe *p){$/;"	f
sqlite3VdbeIdxKeyCompare	.\vdbeaux.c	/^int sqlite3VdbeIdxKeyCompare($/;"	f
sqlite3VdbeIdxRowid	.\vdbeaux.c	/^int sqlite3VdbeIdxRowid(sqlite3 *db, BtCursor *pCur, i64 *rowid){$/;"	f
sqlite3VdbeIntValue	.\vdbemem.c	/^i64 sqlite3VdbeIntValue(Mem *pMem){$/;"	f
sqlite3VdbeIntegerAffinity	.\vdbemem.c	/^void sqlite3VdbeIntegerAffinity(Mem *pMem){$/;"	f
sqlite3VdbeJumpHere	.\vdbeaux.c	/^void sqlite3VdbeJumpHere(Vdbe *p, int addr){$/;"	f
sqlite3VdbeLinkSubProgram	.\vdbeaux.c	/^void sqlite3VdbeLinkSubProgram(Vdbe *pVdbe, SubProgram *p){$/;"	f
sqlite3VdbeList	.\vdbeaux.c	/^int sqlite3VdbeList($/;"	f
sqlite3VdbeMakeLabel	.\vdbeaux.c	/^int sqlite3VdbeMakeLabel(Vdbe *p){$/;"	f
sqlite3VdbeMakeReady	.\vdbeaux.c	/^void sqlite3VdbeMakeReady($/;"	f
sqlite3VdbeMemCopy	.\vdbemem.c	/^int sqlite3VdbeMemCopy(Mem *pTo, const Mem *pFrom){$/;"	f
sqlite3VdbeMemExpandBlob	.\vdbeInt.h	416;"	d
sqlite3VdbeMemExpandBlob	.\vdbemem.c	/^int sqlite3VdbeMemExpandBlob(Mem *pMem){$/;"	f
sqlite3VdbeMemFinalize	.\vdbemem.c	/^int sqlite3VdbeMemFinalize(Mem *pMem, FuncDef *pFunc){$/;"	f
sqlite3VdbeMemFromBtree	.\vdbemem.c	/^int sqlite3VdbeMemFromBtree($/;"	f
sqlite3VdbeMemGrow	.\vdbemem.c	/^int sqlite3VdbeMemGrow(Mem *pMem, int n, int preserve){$/;"	f
sqlite3VdbeMemHandleBom	.\utf.c	/^int sqlite3VdbeMemHandleBom(Mem *pMem){$/;"	f
sqlite3VdbeMemIntegerify	.\vdbemem.c	/^int sqlite3VdbeMemIntegerify(Mem *pMem){$/;"	f
sqlite3VdbeMemMakeWriteable	.\vdbemem.c	/^int sqlite3VdbeMemMakeWriteable(Mem *pMem){$/;"	f
sqlite3VdbeMemMove	.\vdbemem.c	/^void sqlite3VdbeMemMove(Mem *pTo, Mem *pFrom){$/;"	f
sqlite3VdbeMemNulTerminate	.\vdbemem.c	/^int sqlite3VdbeMemNulTerminate(Mem *pMem){$/;"	f
sqlite3VdbeMemNumerify	.\vdbemem.c	/^int sqlite3VdbeMemNumerify(Mem *pMem){$/;"	f
sqlite3VdbeMemPrettyPrint	.\vdbe.c	/^void sqlite3VdbeMemPrettyPrint(Mem *pMem, char *zBuf){$/;"	f
sqlite3VdbeMemRealify	.\vdbemem.c	/^int sqlite3VdbeMemRealify(Mem *pMem){$/;"	f
sqlite3VdbeMemRelease	.\vdbemem.c	/^void sqlite3VdbeMemRelease(Mem *p){$/;"	f
sqlite3VdbeMemReleaseExternal	.\vdbemem.c	/^void sqlite3VdbeMemReleaseExternal(Mem *p){$/;"	f
sqlite3VdbeMemSetDouble	.\vdbeInt.h	368;"	d
sqlite3VdbeMemSetDouble	.\vdbemem.c	/^void sqlite3VdbeMemSetDouble(Mem *pMem, double val){$/;"	f
sqlite3VdbeMemSetInt64	.\vdbemem.c	/^void sqlite3VdbeMemSetInt64(Mem *pMem, i64 val){$/;"	f
sqlite3VdbeMemSetNull	.\vdbemem.c	/^void sqlite3VdbeMemSetNull(Mem *pMem){$/;"	f
sqlite3VdbeMemSetRowSet	.\vdbemem.c	/^void sqlite3VdbeMemSetRowSet(Mem *pMem){$/;"	f
sqlite3VdbeMemSetStr	.\vdbemem.c	/^int sqlite3VdbeMemSetStr($/;"	f
sqlite3VdbeMemSetZeroBlob	.\vdbemem.c	/^void sqlite3VdbeMemSetZeroBlob(Mem *pMem, int n){$/;"	f
sqlite3VdbeMemShallowCopy	.\vdbemem.c	/^void sqlite3VdbeMemShallowCopy(Mem *pTo, const Mem *pFrom, int srcType){$/;"	f
sqlite3VdbeMemStoreType	.\vdbe.c	/^void sqlite3VdbeMemStoreType(Mem *pMem){$/;"	f
sqlite3VdbeMemStringify	.\vdbemem.c	/^int sqlite3VdbeMemStringify(Mem *pMem, int enc){$/;"	f
sqlite3VdbeMemTooBig	.\vdbemem.c	/^int sqlite3VdbeMemTooBig(Mem *p){$/;"	f
sqlite3VdbeMemTranslate	.\utf.c	/^int sqlite3VdbeMemTranslate(Mem *pMem, u8 desiredEnc){$/;"	f
sqlite3VdbeMutexArrayEnter	.\vdbeInt.h	403;"	d
sqlite3VdbeMutexArrayEnter	.\vdbeaux.c	/^void sqlite3VdbeMutexArrayEnter(Vdbe *p){$/;"	f
sqlite3VdbeNoopComment	.\vdbeaux.c	/^void sqlite3VdbeNoopComment(Vdbe *p, const char *zFormat, ...){$/;"	f
sqlite3VdbeParameterIndex	.\vdbeapi.c	/^int sqlite3VdbeParameterIndex(Vdbe *p, const char *zName, int nName){$/;"	f
sqlite3VdbePrintOp	.\vdbeaux.c	/^void sqlite3VdbePrintOp(FILE *pOut, int pc, Op *pOp){$/;"	f
sqlite3VdbePrintSql	.\vdbeaux.c	/^void sqlite3VdbePrintSql(Vdbe *p){$/;"	f
sqlite3VdbeRealValue	.\vdbemem.c	/^double sqlite3VdbeRealValue(Mem *pMem){$/;"	f
sqlite3VdbeRecordCompare	.\vdbeaux.c	/^int sqlite3VdbeRecordCompare($/;"	f
sqlite3VdbeRecordUnpack	.\vdbeaux.c	/^UnpackedRecord *sqlite3VdbeRecordUnpack($/;"	f
sqlite3VdbeReset	.\vdbeaux.c	/^int sqlite3VdbeReset(Vdbe *p){$/;"	f
sqlite3VdbeResetStepResult	.\vdbeaux.c	/^void sqlite3VdbeResetStepResult(Vdbe *p){$/;"	f
sqlite3VdbeResolveLabel	.\vdbeaux.c	/^void sqlite3VdbeResolveLabel(Vdbe *p, int x){$/;"	f
sqlite3VdbeRunOnlyOnce	.\vdbeaux.c	/^void sqlite3VdbeRunOnlyOnce(Vdbe *p){$/;"	f
sqlite3VdbeSerialGet	.\vdbeaux.c	/^u32 sqlite3VdbeSerialGet($/;"	f
sqlite3VdbeSerialPut	.\vdbeaux.c	/^u32 sqlite3VdbeSerialPut(u8 *buf, int nBuf, Mem *pMem, int file_format){$/;"	f
sqlite3VdbeSerialType	.\vdbeaux.c	/^u32 sqlite3VdbeSerialType(Mem *pMem, int file_format){$/;"	f
sqlite3VdbeSerialTypeLen	.\vdbeaux.c	/^u32 sqlite3VdbeSerialTypeLen(u32 serial_type){$/;"	f
sqlite3VdbeSetChanges	.\vdbeaux.c	/^void sqlite3VdbeSetChanges(sqlite3 *db, int nChange){$/;"	f
sqlite3VdbeSetColName	.\vdbeaux.c	/^int sqlite3VdbeSetColName($/;"	f
sqlite3VdbeSetNumCols	.\vdbeaux.c	/^void sqlite3VdbeSetNumCols(Vdbe *p, int nResColumn){$/;"	f
sqlite3VdbeSetSql	.\vdbeaux.c	/^void sqlite3VdbeSetSql(Vdbe *p, const char *z, int n, int isPrepareV2){$/;"	f
sqlite3VdbeSetVarmask	.\vdbeaux.c	/^void sqlite3VdbeSetVarmask(Vdbe *v, int iVar){$/;"	f
sqlite3VdbeSwap	.\vdbeaux.c	/^void sqlite3VdbeSwap(Vdbe *pA, Vdbe *pB){$/;"	f
sqlite3VdbeTakeOpArray	.\vdbeaux.c	/^VdbeOp *sqlite3VdbeTakeOpArray(Vdbe *p, int *pnOp, int *pnMaxArg){$/;"	f
sqlite3VdbeTrace	.\vdbeaux.c	/^void sqlite3VdbeTrace(Vdbe *p, FILE *trace){$/;"	f
sqlite3VdbeUsesBtree	.\vdbeaux.c	/^void sqlite3VdbeUsesBtree(Vdbe *p, int i){$/;"	f
sqlite3ViewGetColumnNames	.\build.c	/^int sqlite3ViewGetColumnNames(Parse *pParse, Table *pTable){$/;"	f
sqlite3ViewGetColumnNames	.\sqliteInt.h	2623;"	d
sqlite3VtabArgExtend	.\vtab.c	/^void sqlite3VtabArgExtend(Parse *pParse, Token *p){$/;"	f
sqlite3VtabArgInit	.\vtab.c	/^void sqlite3VtabArgInit(Parse *pParse){$/;"	f
sqlite3VtabBegin	.\vtab.c	/^int sqlite3VtabBegin(sqlite3 *db, VTable *pVTab){$/;"	f
sqlite3VtabBeginParse	.\vtab.c	/^void sqlite3VtabBeginParse($/;"	f
sqlite3VtabCallConnect	.\vtab.c	/^int sqlite3VtabCallConnect(Parse *pParse, Table *pTab){$/;"	f
sqlite3VtabCallCreate	.\vtab.c	/^int sqlite3VtabCallCreate(sqlite3 *db, int iDb, const char *zTab, char **pzErr){$/;"	f
sqlite3VtabCallDestroy	.\vtab.c	/^int sqlite3VtabCallDestroy(sqlite3 *db, int iDb, const char *zTab){$/;"	f
sqlite3VtabClear	.\sqliteInt.h	2965;"	d
sqlite3VtabClear	.\vtab.c	/^void sqlite3VtabClear(sqlite3 *db, Table *p){$/;"	f
sqlite3VtabCommit	.\sqliteInt.h	2968;"	d
sqlite3VtabCommit	.\vtab.c	/^int sqlite3VtabCommit(sqlite3 *db){$/;"	f
sqlite3VtabFinishParse	.\vtab.c	/^void sqlite3VtabFinishParse(Parse *pParse, Token *pEnd){$/;"	f
sqlite3VtabInSync	.\sqliteInt.h	2969;"	d
sqlite3VtabInSync	.\sqliteInt.h	2981;"	d
sqlite3VtabLock	.\sqliteInt.h	2970;"	d
sqlite3VtabLock	.\vtab.c	/^void sqlite3VtabLock(VTable *pVTab){$/;"	f
sqlite3VtabMakeWritable	.\vtab.c	/^void sqlite3VtabMakeWritable(Parse *pParse, Table *pTab){$/;"	f
sqlite3VtabOverloadFunction	.\vtab.c	/^FuncDef *sqlite3VtabOverloadFunction($/;"	f
sqlite3VtabRollback	.\sqliteInt.h	2967;"	d
sqlite3VtabRollback	.\vtab.c	/^int sqlite3VtabRollback(sqlite3 *db){$/;"	f
sqlite3VtabSync	.\sqliteInt.h	2966;"	d
sqlite3VtabSync	.\vtab.c	/^int sqlite3VtabSync(sqlite3 *db, char **pzErrmsg){$/;"	f
sqlite3VtabUnlock	.\sqliteInt.h	2971;"	d
sqlite3VtabUnlock	.\vtab.c	/^void sqlite3VtabUnlock(VTable *pVTab){$/;"	f
sqlite3VtabUnlockList	.\sqliteInt.h	2972;"	d
sqlite3VtabUnlockList	.\vtab.c	/^void sqlite3VtabUnlockList(sqlite3 *db){$/;"	f
sqlite3WalBeginReadTransaction	.\wal.c	/^int sqlite3WalBeginReadTransaction(Wal *pWal, int *pChanged){$/;"	f
sqlite3WalBeginReadTransaction	.\wal.h	25;"	d
sqlite3WalBeginWriteTransaction	.\wal.c	/^int sqlite3WalBeginWriteTransaction(Wal *pWal){$/;"	f
sqlite3WalBeginWriteTransaction	.\wal.h	29;"	d
sqlite3WalCallback	.\wal.c	/^int sqlite3WalCallback(Wal *pWal){$/;"	f
sqlite3WalCallback	.\wal.h	36;"	d
sqlite3WalCheckpoint	.\wal.c	/^int sqlite3WalCheckpoint($/;"	f
sqlite3WalCheckpoint	.\wal.h	35;"	d
sqlite3WalClose	.\wal.c	/^int sqlite3WalClose($/;"	f
sqlite3WalClose	.\wal.h	24;"	d
sqlite3WalDbsize	.\wal.c	/^Pgno sqlite3WalDbsize(Wal *pWal){$/;"	f
sqlite3WalDbsize	.\wal.h	28;"	d
sqlite3WalDefaultHook	.\main.c	/^int sqlite3WalDefaultHook($/;"	f
sqlite3WalEndReadTransaction	.\wal.c	/^void sqlite3WalEndReadTransaction(Wal *pWal){$/;"	f
sqlite3WalEndReadTransaction	.\wal.h	26;"	d
sqlite3WalEndWriteTransaction	.\wal.c	/^int sqlite3WalEndWriteTransaction(Wal *pWal){$/;"	f
sqlite3WalEndWriteTransaction	.\wal.h	30;"	d
sqlite3WalExclusiveMode	.\wal.c	/^int sqlite3WalExclusiveMode(Wal *pWal, int op){$/;"	f
sqlite3WalExclusiveMode	.\wal.h	37;"	d
sqlite3WalFrames	.\wal.c	/^int sqlite3WalFrames($/;"	f
sqlite3WalFrames	.\wal.h	34;"	d
sqlite3WalOpen	.\wal.c	/^int sqlite3WalOpen($/;"	f
sqlite3WalOpen	.\wal.h	23;"	d
sqlite3WalRead	.\wal.c	/^int sqlite3WalRead($/;"	f
sqlite3WalRead	.\wal.h	27;"	d
sqlite3WalSavepoint	.\wal.c	/^void sqlite3WalSavepoint(Wal *pWal, u32 *aWalData){$/;"	f
sqlite3WalSavepoint	.\wal.h	32;"	d
sqlite3WalSavepointUndo	.\wal.c	/^int sqlite3WalSavepointUndo(Wal *pWal, u32 *aWalData){$/;"	f
sqlite3WalSavepointUndo	.\wal.h	33;"	d
sqlite3WalTrace	.\wal.c	/^int sqlite3WalTrace = 0;$/;"	v
sqlite3WalUndo	.\wal.c	/^int sqlite3WalUndo(Wal *pWal, int (*xUndo)(void *, Pgno), void *pUndoCtx){$/;"	f
sqlite3WalUndo	.\wal.h	31;"	d
sqlite3WalkExpr	.\walker.c	/^int sqlite3WalkExpr(Walker *pWalker, Expr *pExpr){$/;"	f
sqlite3WalkExprList	.\walker.c	/^int sqlite3WalkExprList(Walker *pWalker, ExprList *p){$/;"	f
sqlite3WalkSelect	.\walker.c	/^int sqlite3WalkSelect(Walker *pWalker, Select *p){$/;"	f
sqlite3WalkSelectExpr	.\walker.c	/^int sqlite3WalkSelectExpr(Walker *pWalker, Select *p){$/;"	f
sqlite3WalkSelectFrom	.\walker.c	/^int sqlite3WalkSelectFrom(Walker *pWalker, Select *p){$/;"	f
sqlite3WhereBegin	.\where.c	/^WhereInfo *sqlite3WhereBegin($/;"	f
sqlite3WhereEnd	.\where.c	/^void sqlite3WhereEnd(WhereInfo *pWInfo){$/;"	f
sqlite3WhereTrace	.\where.c	/^int sqlite3WhereTrace = 0;$/;"	v
sqlite3XPrintf	.\printf.c	/^void sqlite3XPrintf(StrAccum *p, const char *zFormat, ...){$/;"	f
sqlite3_aggregate_context	.\sqlite3ext.h	208;"	d
sqlite3_aggregate_context	.\vdbeapi.c	/^void *sqlite3_aggregate_context(sqlite3_context *p, int nByte){$/;"	f
sqlite3_aggregate_count	.\sqlite3ext.h	210;"	d
sqlite3_aggregate_count	.\vdbeapi.c	/^int sqlite3_aggregate_count(sqlite3_context *p){$/;"	f
sqlite3_api_routines	.\sqlite3ext.h	/^struct sqlite3_api_routines {$/;"	s
sqlite3_api_routines	.\sqlite3ext.h	/^typedef struct sqlite3_api_routines sqlite3_api_routines;$/;"	t	typeref:struct:sqlite3_api_routines
sqlite3_auto_extension	.\loadext.c	/^int sqlite3_auto_extension(void (*xInit)(void)){$/;"	f
sqlite3_backup	.\backup.c	/^struct sqlite3_backup {$/;"	s	file:
sqlite3_backup	.\sqlite3.h	/^typedef struct sqlite3_backup sqlite3_backup;$/;"	t	typeref:struct:sqlite3_backup
sqlite3_backup_finish	.\backup.c	/^int sqlite3_backup_finish(sqlite3_backup *p){$/;"	f
sqlite3_backup_init	.\backup.c	/^sqlite3_backup *sqlite3_backup_init($/;"	f
sqlite3_backup_pagecount	.\backup.c	/^int sqlite3_backup_pagecount(sqlite3_backup *p){$/;"	f
sqlite3_backup_remaining	.\backup.c	/^int sqlite3_backup_remaining(sqlite3_backup *p){$/;"	f
sqlite3_backup_step	.\backup.c	/^int sqlite3_backup_step(sqlite3_backup *p, int nPage){$/;"	f
sqlite3_bind_blob	.\sqlite3ext.h	212;"	d
sqlite3_bind_blob	.\vdbeapi.c	/^int sqlite3_bind_blob($/;"	f
sqlite3_bind_double	.\sqlite3ext.h	213;"	d
sqlite3_bind_double	.\vdbeapi.c	/^int sqlite3_bind_double(sqlite3_stmt *pStmt, int i, double rValue){$/;"	f
sqlite3_bind_int	.\sqlite3ext.h	214;"	d
sqlite3_bind_int	.\vdbeapi.c	/^int sqlite3_bind_int(sqlite3_stmt *p, int i, int iValue){$/;"	f
sqlite3_bind_int64	.\sqlite3ext.h	215;"	d
sqlite3_bind_int64	.\vdbeapi.c	/^int sqlite3_bind_int64(sqlite3_stmt *pStmt, int i, sqlite_int64 iValue){$/;"	f
sqlite3_bind_null	.\sqlite3ext.h	216;"	d
sqlite3_bind_null	.\vdbeapi.c	/^int sqlite3_bind_null(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_bind_parameter_count	.\sqlite3ext.h	217;"	d
sqlite3_bind_parameter_count	.\vdbeapi.c	/^int sqlite3_bind_parameter_count(sqlite3_stmt *pStmt){$/;"	f
sqlite3_bind_parameter_index	.\sqlite3ext.h	218;"	d
sqlite3_bind_parameter_index	.\vdbeapi.c	/^int sqlite3_bind_parameter_index(sqlite3_stmt *pStmt, const char *zName){$/;"	f
sqlite3_bind_parameter_name	.\sqlite3ext.h	219;"	d
sqlite3_bind_parameter_name	.\vdbeapi.c	/^const char *sqlite3_bind_parameter_name(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_bind_text	.\sqlite3ext.h	220;"	d
sqlite3_bind_text	.\vdbeapi.c	/^int sqlite3_bind_text( $/;"	f
sqlite3_bind_text16	.\loadext.c	45;"	d	file:
sqlite3_bind_text16	.\sqlite3ext.h	221;"	d
sqlite3_bind_text16	.\vdbeapi.c	/^int sqlite3_bind_text16($/;"	f
sqlite3_bind_value	.\sqlite3ext.h	222;"	d
sqlite3_bind_value	.\vdbeapi.c	/^int sqlite3_bind_value(sqlite3_stmt *pStmt, int i, const sqlite3_value *pValue){$/;"	f
sqlite3_bind_zeroblob	.\loadext.c	99;"	d	file:
sqlite3_bind_zeroblob	.\sqlite3ext.h	338;"	d
sqlite3_bind_zeroblob	.\vdbeapi.c	/^int sqlite3_bind_zeroblob(sqlite3_stmt *pStmt, int i, int n){$/;"	f
sqlite3_blob	.\sqlite3.h	/^typedef struct sqlite3_blob sqlite3_blob;$/;"	t	typeref:struct:sqlite3_blob
sqlite3_blob_bytes	.\loadext.c	100;"	d	file:
sqlite3_blob_bytes	.\sqlite3ext.h	339;"	d
sqlite3_blob_bytes	.\vdbeblob.c	/^int sqlite3_blob_bytes(sqlite3_blob *pBlob){$/;"	f
sqlite3_blob_close	.\loadext.c	101;"	d	file:
sqlite3_blob_close	.\sqlite3ext.h	340;"	d
sqlite3_blob_close	.\vdbeblob.c	/^int sqlite3_blob_close(sqlite3_blob *pBlob){$/;"	f
sqlite3_blob_open	.\loadext.c	102;"	d	file:
sqlite3_blob_open	.\sqlite3ext.h	341;"	d
sqlite3_blob_open	.\vdbeblob.c	/^int sqlite3_blob_open($/;"	f
sqlite3_blob_read	.\loadext.c	103;"	d	file:
sqlite3_blob_read	.\sqlite3ext.h	342;"	d
sqlite3_blob_read	.\vdbeblob.c	/^int sqlite3_blob_read(sqlite3_blob *pBlob, void *z, int n, int iOffset){$/;"	f
sqlite3_blob_write	.\loadext.c	104;"	d	file:
sqlite3_blob_write	.\sqlite3ext.h	343;"	d
sqlite3_blob_write	.\vdbeblob.c	/^int sqlite3_blob_write(sqlite3_blob *pBlob, const void *z, int n, int iOffset){$/;"	f
sqlite3_busy_handler	.\main.c	/^int sqlite3_busy_handler($/;"	f
sqlite3_busy_handler	.\sqlite3ext.h	223;"	d
sqlite3_busy_timeout	.\main.c	/^int sqlite3_busy_timeout(sqlite3 *db, int ms){$/;"	f
sqlite3_busy_timeout	.\sqlite3ext.h	224;"	d
sqlite3_callback	.\sqlite3.h	/^typedef int (*sqlite3_callback)(void*,int,char**, char**);$/;"	t
sqlite3_changes	.\main.c	/^int sqlite3_changes(sqlite3 *db){$/;"	f
sqlite3_changes	.\sqlite3ext.h	225;"	d
sqlite3_clear_bindings	.\sqlite3ext.h	337;"	d
sqlite3_clear_bindings	.\vdbeapi.c	/^int sqlite3_clear_bindings(sqlite3_stmt *pStmt){$/;"	f
sqlite3_close	.\main.c	/^int sqlite3_close(sqlite3 *db){$/;"	f
sqlite3_close	.\sqlite3ext.h	226;"	d
sqlite3_collation_needed	.\main.c	/^int sqlite3_collation_needed($/;"	f
sqlite3_collation_needed	.\sqlite3ext.h	227;"	d
sqlite3_collation_needed16	.\loadext.c	46;"	d	file:
sqlite3_collation_needed16	.\main.c	/^int sqlite3_collation_needed16($/;"	f
sqlite3_collation_needed16	.\sqlite3ext.h	228;"	d
sqlite3_column_blob	.\sqlite3ext.h	229;"	d
sqlite3_column_blob	.\vdbeapi.c	/^const void *sqlite3_column_blob(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_bytes	.\sqlite3ext.h	230;"	d
sqlite3_column_bytes	.\vdbeapi.c	/^int sqlite3_column_bytes(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_bytes16	.\sqlite3ext.h	231;"	d
sqlite3_column_bytes16	.\vdbeapi.c	/^int sqlite3_column_bytes16(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_count	.\sqlite3ext.h	232;"	d
sqlite3_column_count	.\vdbeapi.c	/^int sqlite3_column_count(sqlite3_stmt *pStmt){$/;"	f
sqlite3_column_database_name	.\loadext.c	31;"	d	file:
sqlite3_column_database_name	.\sqlite3ext.h	233;"	d
sqlite3_column_database_name	.\vdbeapi.c	/^const char *sqlite3_column_database_name(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_database_name16	.\loadext.c	32;"	d	file:
sqlite3_column_database_name16	.\loadext.c	64;"	d	file:
sqlite3_column_database_name16	.\sqlite3ext.h	234;"	d
sqlite3_column_database_name16	.\vdbeapi.c	/^const void *sqlite3_column_database_name16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_decltype	.\sqlite3ext.h	235;"	d
sqlite3_column_decltype	.\vdbeapi.c	/^const char *sqlite3_column_decltype(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_decltype16	.\loadext.c	47;"	d	file:
sqlite3_column_decltype16	.\sqlite3ext.h	236;"	d
sqlite3_column_decltype16	.\vdbeapi.c	/^const void *sqlite3_column_decltype16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_double	.\sqlite3ext.h	237;"	d
sqlite3_column_double	.\vdbeapi.c	/^double sqlite3_column_double(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_int	.\sqlite3ext.h	238;"	d
sqlite3_column_int	.\vdbeapi.c	/^int sqlite3_column_int(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_int64	.\sqlite3ext.h	239;"	d
sqlite3_column_int64	.\vdbeapi.c	/^sqlite_int64 sqlite3_column_int64(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_name	.\sqlite3ext.h	240;"	d
sqlite3_column_name	.\vdbeapi.c	/^const char *sqlite3_column_name(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_name16	.\loadext.c	48;"	d	file:
sqlite3_column_name16	.\sqlite3ext.h	241;"	d
sqlite3_column_name16	.\vdbeapi.c	/^const void *sqlite3_column_name16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_origin_name	.\loadext.c	35;"	d	file:
sqlite3_column_origin_name	.\sqlite3ext.h	242;"	d
sqlite3_column_origin_name	.\vdbeapi.c	/^const char *sqlite3_column_origin_name(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_origin_name16	.\loadext.c	36;"	d	file:
sqlite3_column_origin_name16	.\loadext.c	66;"	d	file:
sqlite3_column_origin_name16	.\sqlite3ext.h	243;"	d
sqlite3_column_origin_name16	.\vdbeapi.c	/^const void *sqlite3_column_origin_name16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_table_name	.\loadext.c	33;"	d	file:
sqlite3_column_table_name	.\sqlite3ext.h	244;"	d
sqlite3_column_table_name	.\vdbeapi.c	/^const char *sqlite3_column_table_name(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_table_name16	.\loadext.c	34;"	d	file:
sqlite3_column_table_name16	.\loadext.c	65;"	d	file:
sqlite3_column_table_name16	.\sqlite3ext.h	245;"	d
sqlite3_column_table_name16	.\vdbeapi.c	/^const void *sqlite3_column_table_name16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_text	.\sqlite3ext.h	246;"	d
sqlite3_column_text	.\vdbeapi.c	/^const unsigned char *sqlite3_column_text(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_text16	.\loadext.c	49;"	d	file:
sqlite3_column_text16	.\sqlite3ext.h	247;"	d
sqlite3_column_text16	.\vdbeapi.c	/^const void *sqlite3_column_text16(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_type	.\sqlite3ext.h	248;"	d
sqlite3_column_type	.\vdbeapi.c	/^int sqlite3_column_type(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_value	.\sqlite3ext.h	249;"	d
sqlite3_column_value	.\vdbeapi.c	/^sqlite3_value *sqlite3_column_value(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_commit_hook	.\main.c	/^void *sqlite3_commit_hook($/;"	f
sqlite3_commit_hook	.\sqlite3ext.h	250;"	d
sqlite3_compileoption_get	.\ctime.c	/^const char *sqlite3_compileoption_get(int N){$/;"	f
sqlite3_compileoption_used	.\ctime.c	/^int sqlite3_compileoption_used(const char *zOptName){$/;"	f
sqlite3_complete	.\complete.c	/^int sqlite3_complete(const char *zSql){$/;"	f
sqlite3_complete	.\loadext.c	70;"	d	file:
sqlite3_complete	.\sqlite3ext.h	251;"	d
sqlite3_complete16	.\complete.c	/^int sqlite3_complete16(const void *zSql){$/;"	f
sqlite3_complete16	.\loadext.c	50;"	d	file:
sqlite3_complete16	.\loadext.c	71;"	d	file:
sqlite3_complete16	.\sqlite3ext.h	252;"	d
sqlite3_config	.\main.c	/^int sqlite3_config(int op, ...){$/;"	f
sqlite3_context	.\sqlite3.h	/^typedef struct sqlite3_context sqlite3_context;$/;"	t	typeref:struct:sqlite3_context
sqlite3_context	.\vdbeInt.h	/^struct sqlite3_context {$/;"	s
sqlite3_context_db_handle	.\sqlite3ext.h	367;"	d
sqlite3_context_db_handle	.\vdbeapi.c	/^sqlite3 *sqlite3_context_db_handle(sqlite3_context *p){$/;"	f
sqlite3_create_collation	.\main.c	/^int sqlite3_create_collation($/;"	f
sqlite3_create_collation	.\sqlite3ext.h	253;"	d
sqlite3_create_collation16	.\loadext.c	51;"	d	file:
sqlite3_create_collation16	.\main.c	/^int sqlite3_create_collation16($/;"	f
sqlite3_create_collation16	.\sqlite3ext.h	254;"	d
sqlite3_create_collation_v2	.\main.c	/^int sqlite3_create_collation_v2($/;"	f
sqlite3_create_collation_v2	.\sqlite3ext.h	344;"	d
sqlite3_create_function	.\main.c	/^int sqlite3_create_function($/;"	f
sqlite3_create_function	.\sqlite3ext.h	255;"	d
sqlite3_create_function16	.\loadext.c	52;"	d	file:
sqlite3_create_function16	.\main.c	/^int sqlite3_create_function16($/;"	f
sqlite3_create_function16	.\sqlite3ext.h	256;"	d
sqlite3_create_module	.\loadext.c	79;"	d	file:
sqlite3_create_module	.\sqlite3ext.h	257;"	d
sqlite3_create_module	.\vtab.c	/^int sqlite3_create_module($/;"	f
sqlite3_create_module_v2	.\loadext.c	80;"	d	file:
sqlite3_create_module_v2	.\sqlite3ext.h	258;"	d
sqlite3_create_module_v2	.\vtab.c	/^int sqlite3_create_module_v2($/;"	f
sqlite3_current_time	.\os_os2.c	/^int sqlite3_current_time = 0;$/;"	v
sqlite3_current_time	.\os_unix.c	/^int sqlite3_current_time = 0;  \/* Fake system time in seconds since 1970. *\/$/;"	v
sqlite3_current_time	.\os_win.c	/^int sqlite3_current_time = 0;  \/* Fake system time in seconds since 1970. *\/$/;"	v
sqlite3_data_count	.\sqlite3ext.h	259;"	d
sqlite3_data_count	.\vdbeapi.c	/^int sqlite3_data_count(sqlite3_stmt *pStmt){$/;"	f
sqlite3_db_config	.\main.c	/^int sqlite3_db_config(sqlite3 *db, int op, ...){$/;"	f
sqlite3_db_handle	.\sqlite3ext.h	260;"	d
sqlite3_db_handle	.\vdbeapi.c	/^sqlite3 *sqlite3_db_handle(sqlite3_stmt *pStmt){$/;"	f
sqlite3_db_mutex	.\main.c	/^sqlite3_mutex *sqlite3_db_mutex(sqlite3 *db){$/;"	f
sqlite3_db_status	.\status.c	/^int sqlite3_db_status($/;"	f
sqlite3_debug_mutex	.\mutex_noop.c	/^typedef struct sqlite3_debug_mutex {$/;"	s	file:
sqlite3_debug_mutex	.\mutex_noop.c	/^} sqlite3_debug_mutex;$/;"	t	typeref:struct:sqlite3_debug_mutex	file:
sqlite3_declare_vtab	.\loadext.c	81;"	d	file:
sqlite3_declare_vtab	.\sqlite3ext.h	261;"	d
sqlite3_declare_vtab	.\vtab.c	/^int sqlite3_declare_vtab(sqlite3 *db, const char *zCreateTable){$/;"	f
sqlite3_destructor_type	.\sqlite3.h	/^typedef void (*sqlite3_destructor_type)(void*);$/;"	t
sqlite3_diskfull	.\os_common.h	/^int sqlite3_diskfull = 0;$/;"	v
sqlite3_diskfull_pending	.\os_common.h	/^int sqlite3_diskfull_pending = 0;$/;"	v
sqlite3_enable_load_extension	.\loadext.c	/^int sqlite3_enable_load_extension(sqlite3 *db, int onoff){$/;"	f
sqlite3_enable_shared_cache	.\btree.c	/^int sqlite3_enable_shared_cache(int enable){$/;"	f
sqlite3_enable_shared_cache	.\loadext.c	85;"	d	file:
sqlite3_enable_shared_cache	.\sqlite3ext.h	262;"	d
sqlite3_errcode	.\main.c	/^int sqlite3_errcode(sqlite3 *db){$/;"	f
sqlite3_errcode	.\sqlite3ext.h	263;"	d
sqlite3_errmsg	.\main.c	/^const char *sqlite3_errmsg(sqlite3 *db){$/;"	f
sqlite3_errmsg	.\sqlite3ext.h	264;"	d
sqlite3_errmsg16	.\loadext.c	53;"	d	file:
sqlite3_errmsg16	.\main.c	/^const void *sqlite3_errmsg16(sqlite3 *db){$/;"	f
sqlite3_errmsg16	.\sqlite3ext.h	265;"	d
sqlite3_exec	.\legacy.c	/^int sqlite3_exec($/;"	f
sqlite3_exec	.\sqlite3ext.h	266;"	d
sqlite3_expired	.\sqlite3ext.h	268;"	d
sqlite3_expired	.\vdbeapi.c	/^int sqlite3_expired(sqlite3_stmt *pStmt){$/;"	f
sqlite3_extended_errcode	.\main.c	/^int sqlite3_extended_errcode(sqlite3 *db){$/;"	f
sqlite3_extended_result_codes	.\main.c	/^int sqlite3_extended_result_codes(sqlite3 *db, int onoff){$/;"	f
sqlite3_extended_result_codes	.\sqlite3ext.h	368;"	d
sqlite3_extension_init	.\fts3.c	/^int sqlite3_extension_init($/;"	f
sqlite3_extension_init	.\rtree.c	/^int sqlite3_extension_init($/;"	f
sqlite3_file	.\sqlite3.h	/^struct sqlite3_file {$/;"	s
sqlite3_file	.\sqlite3.h	/^typedef struct sqlite3_file sqlite3_file;$/;"	t	typeref:struct:sqlite3_file
sqlite3_file_control	.\main.c	/^int sqlite3_file_control(sqlite3 *db, const char *zDbName, int op, void *pArg){$/;"	f
sqlite3_file_control	.\sqlite3ext.h	345;"	d
sqlite3_finalize	.\sqlite3ext.h	270;"	d
sqlite3_finalize	.\vdbeapi.c	/^int sqlite3_finalize(sqlite3_stmt *pStmt){$/;"	f
sqlite3_found_count	.\vdbe.c	/^int sqlite3_found_count = 0;$/;"	v
sqlite3_free	.\malloc.c	/^void sqlite3_free(void *p){$/;"	f
sqlite3_free	.\sqlite3ext.h	271;"	d
sqlite3_free_table	.\loadext.c	94;"	d	file:
sqlite3_free_table	.\sqlite3ext.h	272;"	d
sqlite3_free_table	.\table.c	/^void sqlite3_free_table($/;"	f
sqlite3_fts3_enable_parentheses	.\fts3_expr.c	/^int sqlite3_fts3_enable_parentheses = 0;$/;"	v
sqlite3_fts3_enable_parentheses	.\fts3_expr.c	69;"	d	file:
sqlite3_fts3_enable_parentheses	.\fts3_expr.c	71;"	d	file:
sqlite3_fullsync_count	.\os_os2.c	/^int sqlite3_fullsync_count = 0;$/;"	v
sqlite3_fullsync_count	.\os_unix.c	/^int sqlite3_fullsync_count = 0;$/;"	v
sqlite3_fullsync_count	.\os_win.c	/^int sqlite3_fullsync_count = 0;$/;"	v
sqlite3_get_autocommit	.\main.c	/^int sqlite3_get_autocommit(sqlite3 *db){$/;"	f
sqlite3_get_autocommit	.\sqlite3ext.h	273;"	d
sqlite3_get_auxdata	.\sqlite3ext.h	274;"	d
sqlite3_get_auxdata	.\vdbeapi.c	/^void *sqlite3_get_auxdata(sqlite3_context *pCtx, int iArg){$/;"	f
sqlite3_get_table	.\loadext.c	95;"	d	file:
sqlite3_get_table	.\sqlite3ext.h	275;"	d
sqlite3_get_table	.\table.c	/^int sqlite3_get_table($/;"	f
sqlite3_get_table_cb	.\table.c	/^static int sqlite3_get_table_cb(void *pArg, int nCol, char **argv, char **colv){$/;"	f	file:
sqlite3_global_recover	.\main.c	/^int sqlite3_global_recover(void){$/;"	f
sqlite3_global_recover	.\sqlite3ext.h	277;"	d
sqlite3_hostid_num	.\os_unix.c	/^int sqlite3_hostid_num = 0;$/;"	v
sqlite3_index_constraint	.\sqlite3.h	/^  struct sqlite3_index_constraint {$/;"	s	struct:sqlite3_index_info
sqlite3_index_constraint_usage	.\sqlite3.h	/^  struct sqlite3_index_constraint_usage {$/;"	s	struct:sqlite3_index_info
sqlite3_index_info	.\sqlite3.h	/^struct sqlite3_index_info {$/;"	s
sqlite3_index_info	.\sqlite3.h	/^typedef struct sqlite3_index_info sqlite3_index_info;$/;"	t	typeref:struct:sqlite3_index_info
sqlite3_index_orderby	.\sqlite3.h	/^  struct sqlite3_index_orderby {$/;"	s	struct:sqlite3_index_info
sqlite3_initialize	.\main.c	/^int sqlite3_initialize(void){$/;"	f
sqlite3_int64	.\sqlite3.h	/^typedef sqlite_int64 sqlite3_int64;$/;"	t
sqlite3_interrupt	.\main.c	/^void sqlite3_interrupt(sqlite3 *db){$/;"	f
sqlite3_interrupt	.\sqlite3ext.h	279;"	d
sqlite3_interrupt_count	.\vdbe.c	/^int sqlite3_interrupt_count = 0;$/;"	v
sqlite3_io_error_benign	.\os_common.h	/^int sqlite3_io_error_benign = 0;         \/* True if errors are benign *\/$/;"	v
sqlite3_io_error_hardhit	.\os_common.h	/^int sqlite3_io_error_hardhit = 0;        \/* Number of non-benign errors *\/$/;"	v
sqlite3_io_error_hit	.\os_common.h	/^int sqlite3_io_error_hit = 0;            \/* Total number of I\/O Errors *\/$/;"	v
sqlite3_io_error_pending	.\os_common.h	/^int sqlite3_io_error_pending = 0;        \/* Count down to first I\/O error *\/$/;"	v
sqlite3_io_error_persist	.\os_common.h	/^int sqlite3_io_error_persist = 0;        \/* True if I\/O errors persist *\/$/;"	v
sqlite3_io_methods	.\sqlite3.h	/^struct sqlite3_io_methods {$/;"	s
sqlite3_io_methods	.\sqlite3.h	/^typedef struct sqlite3_io_methods sqlite3_io_methods;$/;"	t	typeref:struct:sqlite3_io_methods
sqlite3_last_insert_rowid	.\main.c	/^sqlite_int64 sqlite3_last_insert_rowid(sqlite3 *db){$/;"	f
sqlite3_last_insert_rowid	.\sqlite3ext.h	280;"	d
sqlite3_libversion	.\main.c	/^const char *sqlite3_libversion(void){ return sqlite3_version; }$/;"	f
sqlite3_libversion	.\sqlite3ext.h	281;"	d
sqlite3_libversion_number	.\main.c	/^int sqlite3_libversion_number(void){ return SQLITE_VERSION_NUMBER; }$/;"	f
sqlite3_libversion_number	.\sqlite3ext.h	282;"	d
sqlite3_like_count	.\func.c	/^int sqlite3_like_count = 0;$/;"	v
sqlite3_limit	.\main.c	/^int sqlite3_limit(sqlite3 *db, int limitId, int newLimit){$/;"	f
sqlite3_limit	.\sqlite3ext.h	369;"	d
sqlite3_load_extension	.\loadext.c	/^int sqlite3_load_extension($/;"	f
sqlite3_log	.\printf.c	/^void sqlite3_log(int iErrCode, const char *zFormat, ...){$/;"	f
sqlite3_malloc	.\malloc.c	/^void *sqlite3_malloc(int n){$/;"	f
sqlite3_malloc	.\sqlite3ext.h	283;"	d
sqlite3_max_blobsize	.\vdbe.c	/^int sqlite3_max_blobsize = 0;$/;"	v
sqlite3_mem_methods	.\sqlite3.h	/^struct sqlite3_mem_methods {$/;"	s
sqlite3_mem_methods	.\sqlite3.h	/^typedef struct sqlite3_mem_methods sqlite3_mem_methods;$/;"	t	typeref:struct:sqlite3_mem_methods
sqlite3_memdebug_vfs_oom_test	.\os.c	/^int sqlite3_memdebug_vfs_oom_test = 1;$/;"	v
sqlite3_memory_alarm	.\malloc.c	/^int sqlite3_memory_alarm($/;"	f
sqlite3_memory_highwater	.\malloc.c	/^sqlite3_int64 sqlite3_memory_highwater(int resetFlag){$/;"	f
sqlite3_memory_highwater	.\sqlite3ext.h	346;"	d
sqlite3_memory_used	.\malloc.c	/^sqlite3_int64 sqlite3_memory_used(void){$/;"	f
sqlite3_memory_used	.\sqlite3ext.h	347;"	d
sqlite3_module	.\sqlite3.h	/^struct sqlite3_module {$/;"	s
sqlite3_module	.\sqlite3.h	/^typedef struct sqlite3_module sqlite3_module;$/;"	t	typeref:struct:sqlite3_module
sqlite3_mprintf	.\printf.c	/^char *sqlite3_mprintf(const char *zFormat, ...){$/;"	f
sqlite3_mprintf	.\sqlite3ext.h	284;"	d
sqlite3_mutex	.\mutex_os2.c	/^struct sqlite3_mutex {$/;"	s	file:
sqlite3_mutex	.\mutex_unix.c	/^struct sqlite3_mutex {$/;"	s	file:
sqlite3_mutex	.\mutex_w32.c	/^struct sqlite3_mutex {$/;"	s	file:
sqlite3_mutex	.\sqlite3.h	/^typedef struct sqlite3_mutex sqlite3_mutex;$/;"	t	typeref:struct:sqlite3_mutex
sqlite3_mutex_alloc	.\mutex.c	/^sqlite3_mutex *sqlite3_mutex_alloc(int id){$/;"	f
sqlite3_mutex_alloc	.\mutex.h	61;"	d
sqlite3_mutex_alloc	.\sqlite3ext.h	348;"	d
sqlite3_mutex_enter	.\mutex.c	/^void sqlite3_mutex_enter(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_enter	.\mutex.h	63;"	d
sqlite3_mutex_enter	.\sqlite3ext.h	349;"	d
sqlite3_mutex_free	.\mutex.c	/^void sqlite3_mutex_free(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_free	.\mutex.h	62;"	d
sqlite3_mutex_free	.\sqlite3ext.h	350;"	d
sqlite3_mutex_held	.\mutex.c	/^int sqlite3_mutex_held(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_held	.\mutex.h	66;"	d
sqlite3_mutex_leave	.\mutex.c	/^void sqlite3_mutex_leave(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_leave	.\mutex.h	65;"	d
sqlite3_mutex_leave	.\sqlite3ext.h	351;"	d
sqlite3_mutex_methods	.\sqlite3.h	/^struct sqlite3_mutex_methods {$/;"	s
sqlite3_mutex_methods	.\sqlite3.h	/^typedef struct sqlite3_mutex_methods sqlite3_mutex_methods;$/;"	t	typeref:struct:sqlite3_mutex_methods
sqlite3_mutex_notheld	.\mutex.c	/^int sqlite3_mutex_notheld(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_notheld	.\mutex.h	67;"	d
sqlite3_mutex_try	.\mutex.c	/^int sqlite3_mutex_try(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_try	.\mutex.h	64;"	d
sqlite3_mutex_try	.\sqlite3ext.h	352;"	d
sqlite3_next_stmt	.\sqlite3ext.h	370;"	d
sqlite3_next_stmt	.\vdbeapi.c	/^sqlite3_stmt *sqlite3_next_stmt(sqlite3 *pDb, sqlite3_stmt *pStmt){$/;"	f
sqlite3_open	.\main.c	/^int sqlite3_open($/;"	f
sqlite3_open	.\sqlite3ext.h	285;"	d
sqlite3_open16	.\loadext.c	54;"	d	file:
sqlite3_open16	.\main.c	/^int sqlite3_open16($/;"	f
sqlite3_open16	.\sqlite3ext.h	286;"	d
sqlite3_open_file_count	.\os_common.h	/^int sqlite3_open_file_count = 0;$/;"	v
sqlite3_open_v2	.\main.c	/^int sqlite3_open_v2($/;"	f
sqlite3_open_v2	.\sqlite3ext.h	353;"	d
sqlite3_opentemp_count	.\pager.c	/^int sqlite3_opentemp_count = 0;$/;"	v
sqlite3_os_end	.\os_os2.c	/^int sqlite3_os_end(void){$/;"	f
sqlite3_os_end	.\os_unix.c	/^int sqlite3_os_end(void){ $/;"	f
sqlite3_os_end	.\os_win.c	/^int sqlite3_os_end(void){ $/;"	f
sqlite3_os_init	.\os_os2.c	/^int sqlite3_os_init(void){$/;"	f
sqlite3_os_init	.\os_unix.c	/^int sqlite3_os_init(void){ $/;"	f
sqlite3_os_init	.\os_win.c	/^int sqlite3_os_init(void){$/;"	f
sqlite3_os_type	.\os_win.c	/^int sqlite3_os_type = 0;$/;"	v
sqlite3_os_type	.\os_win.c	/^static int sqlite3_os_type = 0;$/;"	v	file:
sqlite3_overload_function	.\main.c	/^int sqlite3_overload_function($/;"	f
sqlite3_overload_function	.\sqlite3ext.h	334;"	d
sqlite3_pager_readdb_count	.\pager.c	/^int sqlite3_pager_readdb_count = 0;    \/* Number of full pages read from DB *\/$/;"	v
sqlite3_pager_writedb_count	.\pager.c	/^int sqlite3_pager_writedb_count = 0;   \/* Number of full pages written to DB *\/$/;"	v
sqlite3_pager_writej_count	.\pager.c	/^int sqlite3_pager_writej_count = 0;    \/* Number of pages written to journal *\/$/;"	v
sqlite3_pcache	.\sqlite3.h	/^typedef struct sqlite3_pcache sqlite3_pcache;$/;"	t	typeref:struct:sqlite3_pcache
sqlite3_pcache_methods	.\sqlite3.h	/^struct sqlite3_pcache_methods {$/;"	s
sqlite3_pcache_methods	.\sqlite3.h	/^typedef struct sqlite3_pcache_methods sqlite3_pcache_methods;$/;"	t	typeref:struct:sqlite3_pcache_methods
sqlite3_prepare	.\prepare.c	/^int sqlite3_prepare($/;"	f
sqlite3_prepare	.\sqlite3ext.h	287;"	d
sqlite3_prepare16	.\loadext.c	55;"	d	file:
sqlite3_prepare16	.\prepare.c	/^int sqlite3_prepare16($/;"	f
sqlite3_prepare16	.\sqlite3ext.h	288;"	d
sqlite3_prepare16_v2	.\loadext.c	56;"	d	file:
sqlite3_prepare16_v2	.\prepare.c	/^int sqlite3_prepare16_v2($/;"	f
sqlite3_prepare16_v2	.\sqlite3ext.h	290;"	d
sqlite3_prepare16_v2	.\sqlite3ext.h	336;"	d
sqlite3_prepare_v2	.\prepare.c	/^int sqlite3_prepare_v2($/;"	f
sqlite3_prepare_v2	.\sqlite3ext.h	289;"	d
sqlite3_prepare_v2	.\sqlite3ext.h	335;"	d
sqlite3_profile	.\loadext.c	89;"	d	file:
sqlite3_profile	.\main.c	/^void *sqlite3_profile($/;"	f
sqlite3_profile	.\sqlite3ext.h	291;"	d
sqlite3_progress_handler	.\loadext.c	75;"	d	file:
sqlite3_progress_handler	.\main.c	/^void sqlite3_progress_handler($/;"	f
sqlite3_progress_handler	.\sqlite3ext.h	292;"	d
sqlite3_query_plan	.\where.c	/^char sqlite3_query_plan[BMS*2*40];  \/* Text of the join *\/$/;"	v
sqlite3_randomness	.\random.c	/^void sqlite3_randomness(int N, void *pBuf){$/;"	f
sqlite3_randomness	.\sqlite3ext.h	366;"	d
sqlite3_realloc	.\malloc.c	/^void *sqlite3_realloc(void *pOld, int n){$/;"	f
sqlite3_realloc	.\sqlite3ext.h	293;"	d
sqlite3_release_memory	.\malloc.c	/^int sqlite3_release_memory(int n){$/;"	f
sqlite3_release_memory	.\sqlite3ext.h	354;"	d
sqlite3_reset	.\sqlite3ext.h	294;"	d
sqlite3_reset	.\vdbeapi.c	/^int sqlite3_reset(sqlite3_stmt *pStmt){$/;"	f
sqlite3_reset_auto_extension	.\loadext.c	/^void sqlite3_reset_auto_extension(void){$/;"	f
sqlite3_result_blob	.\sqlite3ext.h	295;"	d
sqlite3_result_blob	.\vdbeapi.c	/^void sqlite3_result_blob($/;"	f
sqlite3_result_double	.\sqlite3ext.h	296;"	d
sqlite3_result_double	.\vdbeapi.c	/^void sqlite3_result_double(sqlite3_context *pCtx, double rVal){$/;"	f
sqlite3_result_error	.\sqlite3ext.h	297;"	d
sqlite3_result_error	.\vdbeapi.c	/^void sqlite3_result_error(sqlite3_context *pCtx, const char *z, int n){$/;"	f
sqlite3_result_error16	.\loadext.c	57;"	d	file:
sqlite3_result_error16	.\sqlite3ext.h	298;"	d
sqlite3_result_error16	.\vdbeapi.c	/^void sqlite3_result_error16(sqlite3_context *pCtx, const void *z, int n){$/;"	f
sqlite3_result_error_code	.\sqlite3ext.h	364;"	d
sqlite3_result_error_code	.\vdbeapi.c	/^void sqlite3_result_error_code(sqlite3_context *pCtx, int errCode){$/;"	f
sqlite3_result_error_nomem	.\sqlite3ext.h	355;"	d
sqlite3_result_error_nomem	.\vdbeapi.c	/^void sqlite3_result_error_nomem(sqlite3_context *pCtx){$/;"	f
sqlite3_result_error_toobig	.\sqlite3ext.h	356;"	d
sqlite3_result_error_toobig	.\vdbeapi.c	/^void sqlite3_result_error_toobig(sqlite3_context *pCtx){$/;"	f
sqlite3_result_int	.\sqlite3ext.h	299;"	d
sqlite3_result_int	.\vdbeapi.c	/^void sqlite3_result_int(sqlite3_context *pCtx, int iVal){$/;"	f
sqlite3_result_int64	.\sqlite3ext.h	300;"	d
sqlite3_result_int64	.\vdbeapi.c	/^void sqlite3_result_int64(sqlite3_context *pCtx, i64 iVal){$/;"	f
sqlite3_result_null	.\sqlite3ext.h	301;"	d
sqlite3_result_null	.\vdbeapi.c	/^void sqlite3_result_null(sqlite3_context *pCtx){$/;"	f
sqlite3_result_text	.\sqlite3ext.h	302;"	d
sqlite3_result_text	.\vdbeapi.c	/^void sqlite3_result_text($/;"	f
sqlite3_result_text16	.\loadext.c	58;"	d	file:
sqlite3_result_text16	.\sqlite3ext.h	303;"	d
sqlite3_result_text16	.\vdbeapi.c	/^void sqlite3_result_text16($/;"	f
sqlite3_result_text16be	.\loadext.c	59;"	d	file:
sqlite3_result_text16be	.\sqlite3ext.h	304;"	d
sqlite3_result_text16be	.\vdbeapi.c	/^void sqlite3_result_text16be($/;"	f
sqlite3_result_text16le	.\loadext.c	60;"	d	file:
sqlite3_result_text16le	.\sqlite3ext.h	305;"	d
sqlite3_result_text16le	.\vdbeapi.c	/^void sqlite3_result_text16le($/;"	f
sqlite3_result_value	.\sqlite3ext.h	306;"	d
sqlite3_result_value	.\vdbeapi.c	/^void sqlite3_result_value(sqlite3_context *pCtx, sqlite3_value *pValue){$/;"	f
sqlite3_result_zeroblob	.\sqlite3ext.h	363;"	d
sqlite3_result_zeroblob	.\vdbeapi.c	/^void sqlite3_result_zeroblob(sqlite3_context *pCtx, int n){$/;"	f
sqlite3_rollback_hook	.\main.c	/^void *sqlite3_rollback_hook($/;"	f
sqlite3_rollback_hook	.\sqlite3ext.h	307;"	d
sqlite3_search_count	.\vdbe.c	/^int sqlite3_search_count = 0;$/;"	v
sqlite3_set_authorizer	.\auth.c	/^int sqlite3_set_authorizer($/;"	f
sqlite3_set_authorizer	.\loadext.c	41;"	d	file:
sqlite3_set_authorizer	.\sqlite3ext.h	308;"	d
sqlite3_set_auxdata	.\sqlite3ext.h	309;"	d
sqlite3_set_auxdata	.\vdbeapi.c	/^void sqlite3_set_auxdata($/;"	f
sqlite3_shutdown	.\main.c	/^int sqlite3_shutdown(void){$/;"	f
sqlite3_sleep	.\main.c	/^int sqlite3_sleep(int ms){$/;"	f
sqlite3_sleep	.\sqlite3ext.h	357;"	d
sqlite3_snprintf	.\printf.c	/^char *sqlite3_snprintf(int n, char *zBuf, const char *zFormat, ...){$/;"	f
sqlite3_snprintf	.\sqlite3ext.h	310;"	d
sqlite3_soft_heap_limit	.\malloc.c	/^void sqlite3_soft_heap_limit(int n){$/;"	f
sqlite3_soft_heap_limit	.\sqlite3ext.h	358;"	d
sqlite3_sort_count	.\vdbe.c	/^int sqlite3_sort_count = 0;$/;"	v
sqlite3_sourceid	.\main.c	/^const char *sqlite3_sourceid(void){ return SQLITE_SOURCE_ID; }$/;"	f
sqlite3_sql	.\sqlite3ext.h	371;"	d
sqlite3_sql	.\vdbeaux.c	/^const char *sqlite3_sql(sqlite3_stmt *pStmt){$/;"	f
sqlite3_status	.\sqlite3ext.h	372;"	d
sqlite3_status	.\status.c	/^int sqlite3_status(int op, int *pCurrent, int *pHighwater, int resetFlag){$/;"	f
sqlite3_step	.\sqlite3ext.h	311;"	d
sqlite3_step	.\vdbeapi.c	/^int sqlite3_step(sqlite3_stmt *pStmt){$/;"	f
sqlite3_stmt	.\sqlite3.h	/^typedef struct sqlite3_stmt sqlite3_stmt;$/;"	t	typeref:struct:sqlite3_stmt
sqlite3_stmt_status	.\vdbeapi.c	/^int sqlite3_stmt_status(sqlite3_stmt *pStmt, int op, int resetFlag){$/;"	f
sqlite3_strnicmp	.\util.c	/^int sqlite3_strnicmp(const char *zLeft, const char *zRight, int N){$/;"	f
sqlite3_sync_count	.\os_os2.c	/^int sqlite3_sync_count = 0;$/;"	v
sqlite3_sync_count	.\os_unix.c	/^int sqlite3_sync_count = 0;$/;"	v
sqlite3_sync_count	.\os_win.c	/^int sqlite3_sync_count = 0;$/;"	v
sqlite3_table_column_metadata	.\loadext.c	37;"	d	file:
sqlite3_table_column_metadata	.\main.c	/^int sqlite3_table_column_metadata($/;"	f
sqlite3_table_column_metadata	.\sqlite3ext.h	312;"	d
sqlite3_temp_directory	.\main.c	/^char *sqlite3_temp_directory = 0;$/;"	v
sqlite3_temp_directory	.\sqlite3.h	/^SQLITE_API SQLITE_EXTERN char *sqlite3_temp_directory;$/;"	v
sqlite3_test_control	.\main.c	/^int sqlite3_test_control(int op, ...){$/;"	f
sqlite3_test_control	.\sqlite3ext.h	365;"	d
sqlite3_thread_cleanup	.\main.c	/^void sqlite3_thread_cleanup(void){$/;"	f
sqlite3_thread_cleanup	.\sqlite3ext.h	313;"	d
sqlite3_threadsafe	.\main.c	/^int sqlite3_threadsafe(void){ return SQLITE_THREADSAFE; }$/;"	f
sqlite3_threadsafe	.\sqlite3ext.h	362;"	d
sqlite3_tokenizer	.\fts3_tokenizer.h	/^struct sqlite3_tokenizer {$/;"	s
sqlite3_tokenizer	.\fts3_tokenizer.h	/^typedef struct sqlite3_tokenizer sqlite3_tokenizer;$/;"	t	typeref:struct:sqlite3_tokenizer
sqlite3_tokenizer_cursor	.\fts3_tokenizer.h	/^struct sqlite3_tokenizer_cursor {$/;"	s
sqlite3_tokenizer_cursor	.\fts3_tokenizer.h	/^typedef struct sqlite3_tokenizer_cursor sqlite3_tokenizer_cursor;$/;"	t	typeref:struct:sqlite3_tokenizer_cursor
sqlite3_tokenizer_module	.\fts3_tokenizer.h	/^struct sqlite3_tokenizer_module {$/;"	s
sqlite3_tokenizer_module	.\fts3_tokenizer.h	/^typedef struct sqlite3_tokenizer_module sqlite3_tokenizer_module;$/;"	t	typeref:struct:sqlite3_tokenizer_module
sqlite3_total_changes	.\main.c	/^int sqlite3_total_changes(sqlite3 *db){$/;"	f
sqlite3_total_changes	.\sqlite3ext.h	314;"	d
sqlite3_trace	.\loadext.c	90;"	d	file:
sqlite3_trace	.\main.c	/^void *sqlite3_trace(sqlite3 *db, void (*xTrace)(void*,const char*), void *pArg){$/;"	f
sqlite3_trace	.\sqlite3ext.h	315;"	d
sqlite3_transfer_bindings	.\sqlite3ext.h	317;"	d
sqlite3_transfer_bindings	.\vdbeapi.c	/^int sqlite3_transfer_bindings(sqlite3_stmt *pFromStmt, sqlite3_stmt *pToStmt){$/;"	f
sqlite3_uint64	.\sqlite3.h	/^typedef sqlite_uint64 sqlite3_uint64;$/;"	t
sqlite3_unlock_notify	.\notify.c	/^int sqlite3_unlock_notify($/;"	f
sqlite3_update_hook	.\main.c	/^void *sqlite3_update_hook($/;"	f
sqlite3_update_hook	.\sqlite3ext.h	319;"	d
sqlite3_user_data	.\sqlite3ext.h	320;"	d
sqlite3_user_data	.\vdbeapi.c	/^void *sqlite3_user_data(sqlite3_context *p){$/;"	f
sqlite3_value	.\sqlite3.h	/^typedef struct Mem sqlite3_value;$/;"	t	typeref:struct:Mem
sqlite3_value_blob	.\sqlite3ext.h	321;"	d
sqlite3_value_blob	.\vdbeapi.c	/^const void *sqlite3_value_blob(sqlite3_value *pVal){$/;"	f
sqlite3_value_bytes	.\sqlite3ext.h	322;"	d
sqlite3_value_bytes	.\vdbeapi.c	/^int sqlite3_value_bytes(sqlite3_value *pVal){$/;"	f
sqlite3_value_bytes16	.\sqlite3ext.h	323;"	d
sqlite3_value_bytes16	.\vdbeapi.c	/^int sqlite3_value_bytes16(sqlite3_value *pVal){$/;"	f
sqlite3_value_double	.\sqlite3ext.h	324;"	d
sqlite3_value_double	.\vdbeapi.c	/^double sqlite3_value_double(sqlite3_value *pVal){$/;"	f
sqlite3_value_int	.\sqlite3ext.h	325;"	d
sqlite3_value_int	.\vdbeapi.c	/^int sqlite3_value_int(sqlite3_value *pVal){$/;"	f
sqlite3_value_int64	.\sqlite3ext.h	326;"	d
sqlite3_value_int64	.\vdbeapi.c	/^sqlite_int64 sqlite3_value_int64(sqlite3_value *pVal){$/;"	f
sqlite3_value_numeric_type	.\sqlite3ext.h	327;"	d
sqlite3_value_numeric_type	.\vdbe.c	/^int sqlite3_value_numeric_type(sqlite3_value *pVal){$/;"	f
sqlite3_value_text	.\sqlite3ext.h	328;"	d
sqlite3_value_text	.\vdbeapi.c	/^const unsigned char *sqlite3_value_text(sqlite3_value *pVal){$/;"	f
sqlite3_value_text16	.\loadext.c	61;"	d	file:
sqlite3_value_text16	.\sqlite3ext.h	329;"	d
sqlite3_value_text16	.\vdbeapi.c	/^const void *sqlite3_value_text16(sqlite3_value* pVal){$/;"	f
sqlite3_value_text16be	.\loadext.c	62;"	d	file:
sqlite3_value_text16be	.\sqlite3ext.h	330;"	d
sqlite3_value_text16be	.\vdbeapi.c	/^const void *sqlite3_value_text16be(sqlite3_value *pVal){$/;"	f
sqlite3_value_text16le	.\loadext.c	63;"	d	file:
sqlite3_value_text16le	.\sqlite3ext.h	331;"	d
sqlite3_value_text16le	.\vdbeapi.c	/^const void *sqlite3_value_text16le(sqlite3_value *pVal){$/;"	f
sqlite3_value_type	.\sqlite3ext.h	332;"	d
sqlite3_value_type	.\vdbeapi.c	/^int sqlite3_value_type(sqlite3_value* pVal){$/;"	f
sqlite3_version	.\main.c	/^const char sqlite3_version[] = SQLITE_VERSION;$/;"	v
sqlite3_version	.\sqlite3.h	/^SQLITE_API SQLITE_EXTERN const char sqlite3_version[];$/;"	v
sqlite3_vfs	.\sqlite3.h	/^struct sqlite3_vfs {$/;"	s
sqlite3_vfs	.\sqlite3.h	/^typedef struct sqlite3_vfs sqlite3_vfs;$/;"	t	typeref:struct:sqlite3_vfs
sqlite3_vfs_find	.\os.c	/^sqlite3_vfs *sqlite3_vfs_find(const char *zVfs){$/;"	f
sqlite3_vfs_find	.\sqlite3ext.h	359;"	d
sqlite3_vfs_register	.\os.c	/^int sqlite3_vfs_register(sqlite3_vfs *pVfs, int makeDflt){$/;"	f
sqlite3_vfs_register	.\sqlite3ext.h	360;"	d
sqlite3_vfs_unregister	.\os.c	/^int sqlite3_vfs_unregister(sqlite3_vfs *pVfs){$/;"	f
sqlite3_vfs_unregister	.\sqlite3ext.h	361;"	d
sqlite3_vmprintf	.\printf.c	/^char *sqlite3_vmprintf(const char *zFormat, va_list ap){$/;"	f
sqlite3_vmprintf	.\sqlite3ext.h	333;"	d
sqlite3_vtab	.\sqlite3.h	/^struct sqlite3_vtab {$/;"	s
sqlite3_vtab	.\sqlite3.h	/^typedef struct sqlite3_vtab sqlite3_vtab;$/;"	t	typeref:struct:sqlite3_vtab
sqlite3_vtab_cursor	.\sqlite3.h	/^struct sqlite3_vtab_cursor {$/;"	s
sqlite3_vtab_cursor	.\sqlite3.h	/^typedef struct sqlite3_vtab_cursor sqlite3_vtab_cursor;$/;"	t	typeref:struct:sqlite3_vtab_cursor
sqlite3_wal_autocheckpoint	.\main.c	/^int sqlite3_wal_autocheckpoint(sqlite3 *db, int nFrame){$/;"	f
sqlite3_wal_checkpoint	.\main.c	/^int sqlite3_wal_checkpoint(sqlite3 *db, const char *zDb){$/;"	f
sqlite3_wal_hook	.\main.c	/^void *sqlite3_wal_hook($/;"	f
sqlite3_win32_mbcs_to_utf8	.\os_win.c	/^char *sqlite3_win32_mbcs_to_utf8(const char *zFilename){$/;"	f
sqlite3_xferopt_count	.\insert.c	/^int sqlite3_xferopt_count;$/;"	v
sqlite3one	.\sqliteInt.h	/^const int sqlite3one = 1;$/;"	v
sqlite3one	.\utf.c	/^const int sqlite3one = 1;$/;"	v
sqliteAuthBadReturnCode	.\auth.c	/^static void sqliteAuthBadReturnCode(Parse *pParse){$/;"	f	file:
sqliteDefaultBusyCallback	.\main.c	/^static int sqliteDefaultBusyCallback($/;"	f	file:
sqliteDeleteColumnNames	.\build.c	/^static void sqliteDeleteColumnNames(sqlite3 *db, Table *pTable){$/;"	f	file:
sqliteErrorFromPosixError	.\os_unix.c	/^static int sqliteErrorFromPosixError(int posixError, int sqliteIOErr) {$/;"	f	file:
sqliteHashData	.\hash.h	87;"	d
sqliteHashFirst	.\hash.h	85;"	d
sqliteHashNext	.\hash.h	86;"	d
sqliteProcessJoin	.\select.c	/^static int sqliteProcessJoin(Parse *pParse, Select *p){$/;"	f	file:
sqliteViewResetAll	.\build.c	/^static void sqliteViewResetAll(sqlite3 *db, int idx){$/;"	f	file:
sqliteViewResetAll	.\build.c	1814;"	d	file:
sqlite_int64	.\sqlite3.h	/^  typedef SQLITE_INT64_TYPE sqlite_int64;$/;"	t
sqlite_int64	.\sqlite3.h	/^  typedef __int64 sqlite_int64;$/;"	t
sqlite_int64	.\sqlite3.h	/^  typedef long long int sqlite_int64;$/;"	t
sqlite_uint64	.\sqlite3.h	/^  typedef unsigned SQLITE_INT64_TYPE sqlite_uint64;$/;"	t
sqlite_uint64	.\sqlite3.h	/^  typedef unsigned __int64 sqlite_uint64;$/;"	t
sqlite_uint64	.\sqlite3.h	/^  typedef unsigned long long int sqlite_uint64;$/;"	t
star_oh	.\fts3_porter.c	/^static int star_oh(const char *z){$/;"	f	file:
startEndFlag	.\os_unix.c	/^  unsigned char startEndFlag;       \/* 1=rel to end of fork, 0=rel to start *\/$/;"	m	struct:ByteRangeLockPB2	file:
startTime	.\vdbeInt.h	/^  i64 startTime;          \/* Time when query started - used for profiling *\/$/;"	m	struct:Vdbe
stateno	.\parse.c	/^  YYACTIONTYPE stateno;  \/* The state-number *\/$/;"	m	struct:yyStackEntry	file:
statsOn	.\shell.c	/^  int statsOn;           \/* True to display memory stats before each finalize *\/$/;"	m	struct:callback_data	file:
status	.\sqlite3ext.h	/^  int (*status)(int,int*,int*,int);$/;"	m	struct:sqlite3_api_routines
stdin_is_interactive	.\shell.c	/^static int stdin_is_interactive = 1;$/;"	v	file:
stem	.\fts3_porter.c	/^static int stem($/;"	f	file:
step	.\sqlite3ext.h	/^  int  (*step)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines
step_list	.\sqliteInt.h	/^  TriggerStep *step_list; \/* Link list of trigger program steps             *\/$/;"	m	struct:Trigger
stifle_history	.\shell.c	49;"	d	file:
stmtLast	.\tclsqlite.c	/^  SqlPreparedStmt *stmtLast; \/* Last statement in the list *\/$/;"	m	struct:SqliteDb	file:
stmtList	.\tclsqlite.c	/^  SqlPreparedStmt *stmtList; \/* List of prepared statements*\/$/;"	m	struct:SqliteDb	file:
strHash	.\hash.c	/^static unsigned int strHash(const char *z, int nKey){$/;"	f	file:
strftimeFunc	.\date.c	/^static void strftimeFunc($/;"	f	file:
strlen30	.\shell.c	/^static int strlen30(const char *z){$/;"	f	file:
strlen30	.\tclsqlite.c	/^static int strlen30(const char *z){$/;"	f	file:
subjInMemory	.\pager.c	/^  u8 subjInMemory;            \/* True to use in-memory sub-journals *\/$/;"	m	struct:Pager	file:
subjRequiresPage	.\pager.c	/^static int subjRequiresPage(PgHdr *pPg){$/;"	f	file:
subjournalPage	.\pager.c	/^static int subjournalPage(PgHdr *pPg){$/;"	f	file:
substExpr	.\select.c	/^static Expr *substExpr($/;"	f	file:
substExprList	.\select.c	/^static void substExprList($/;"	f	file:
substSelect	.\select.c	/^static void substSelect($/;"	f	file:
substrFunc	.\func.c	/^static void substrFunc($/;"	f	file:
sumFinalize	.\func.c	/^static void sumFinalize(sqlite3_context *context){$/;"	f	file:
sumStep	.\func.c	/^static void sumStep(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
suppressErr	.\sqliteInt.h	/^  u8 suppressErr;               \/* Do not issue error messages if true *\/$/;"	m	struct:sqlite3
swapMixedEndianFloat	.\vdbeaux.c	2571;"	d	file:
swapMixedEndianFloat	.\vdbeaux.c	2573;"	d	file:
switchLockProxyPath	.\os_unix.c	/^static int switchLockProxyPath(unixFile *pFile, const char *path) {$/;"	f	file:
syncJournal	.\pager.c	/^static int syncJournal(Pager *pPager, int newHdr){$/;"	f	file:
sync_flags	.\pager.c	/^  u8 sync_flags;              \/* One of SYNC_NORMAL or SYNC_FULL *\/$/;"	m	struct:Pager	file:
synthCollSeq	.\callback.c	/^static int synthCollSeq(sqlite3 *db, CollSeq *pColl){$/;"	f	file:
sz	.\sqliteInt.h	/^  u16 sz;                 \/* Size of each buffer in bytes *\/$/;"	m	struct:Lookaside
szAtom	.\mem5.c	/^  int szAtom;      \/* Smallest possible allocation in bytes *\/$/;"	m	struct:Mem5Global	file:
szChunk	.\os_unix.c	/^  int szChunk;                        \/* Configured by FCNTL_CHUNK_SIZE *\/$/;"	m	struct:unixFile	file:
szChunk	.\os_win.c	/^  int szChunk;            \/* Chunk size configured by FCNTL_CHUNK_SIZE *\/$/;"	m	struct:winFile	file:
szExtra	.\pcache.c	/^  int szExtra;                        \/* Size of extra space for each page *\/$/;"	m	struct:PCache	file:
szLookaside	.\sqliteInt.h	/^  int szLookaside;                  \/* Default lookaside buffer size *\/$/;"	m	struct:Sqlite3Config
szMaster	.\mem3.c	/^  u32 szMaster;$/;"	m	struct:Mem3Global	file:
szOsFile	.\sqlite3.h	/^  int szOsFile;            \/* Size of subclassed sqlite3_file *\/$/;"	m	struct:sqlite3_vfs
szPage	.\pcache.c	/^  int szPage;                         \/* Size of every page in this cache *\/$/;"	m	struct:PCache	file:
szPage	.\pcache1.c	/^  int szPage;                         \/* Size of allocated pages in bytes *\/$/;"	m	struct:PCache1	file:
szPage	.\sqliteInt.h	/^  int szPage;                       \/* Size of each page in pPage[] *\/$/;"	m	struct:Sqlite3Config
szPage	.\wal.c	/^  u16 szPage;                     \/* Database page size in bytes. 1==64K *\/$/;"	m	struct:WalIndexHdr	file:
szPage	.\wal.c	/^  u32 szPage;                \/* Database page size *\/$/;"	m	struct:Wal	file:
szRegion	.\os_unix.c	/^  int szRegion;              \/* Size of shared-memory regions *\/$/;"	m	struct:unixShmNode	file:
szRegion	.\os_win.c	/^  int szRegion;              \/* Size of shared-memory regions *\/$/;"	m	struct:winShmNode	file:
szScratch	.\sqliteInt.h	/^  int szScratch;                    \/* Size of each scratch buffer *\/$/;"	m	struct:Sqlite3Config
szSlot	.\pcache1.c	/^  int szSlot;                         \/* Size of each free slot *\/$/;"	m	struct:PCacheGlobal	file:
tabFlags	.\sqliteInt.h	/^  u8 tabFlags;         \/* Mask of TF_* values *\/$/;"	m	struct:Table
table	.\sqliteInt.h	/^  char *table;            \/* The table or view to which the trigger applies *\/$/;"	m	struct:Trigger
tableAndColumnIndex	.\select.c	/^static int tableAndColumnIndex($/;"	f	file:
tableOfTrigger	.\trigger.c	/^static Table *tableOfTrigger(Trigger *pTrigger){$/;"	f	file:
table_column_metadata	.\sqlite3ext.h	/^  int  (*table_column_metadata)(sqlite3*,const char*,const char*,const char*,char const**,char const**,int*,int*,int*);$/;"	m	struct:sqlite3_api_routines
target	.\sqliteInt.h	/^  Token target;        \/* Target table for DELETE, UPDATE, INSERT *\/$/;"	m	struct:TriggerStep
targetSrcList	.\trigger.c	/^static SrcList *targetSrcList($/;"	f	file:
tblHash	.\sqliteInt.h	/^  Hash tblHash;        \/* All tables indexed by name *\/$/;"	m	struct:Schema
tclCollateNeeded	.\tclsqlite.c	/^static void tclCollateNeeded($/;"	f	file:
tclSqlCollate	.\tclsqlite.c	/^static int tclSqlCollate($/;"	f	file:
tclSqlFunc	.\tclsqlite.c	/^static void tclSqlFunc(sqlite3_context *context, int argc, sqlite3_value**argv){$/;"	f	file:
tempFile	.\pager.c	/^  u8 tempFile;                \/* zFilename is a temporary file *\/$/;"	m	struct:Pager	file:
tempReg	.\sqliteInt.h	/^    u8 tempReg;           \/* iReg is a temp register that needs to be freed *\/$/;"	m	struct:Parse::yColCache
temp_store	.\sqliteInt.h	/^  u8 temp_store;                \/* 1: file 2: memory 0: default *\/$/;"	m	struct:sqlite3
termCanDriveIndex	.\where.c	/^static int termCanDriveIndex($/;"	f	file:
testFunc	.\fts3_tokenizer.c	/^static void testFunc($/;"	f	file:
testRtreeCell	.\rtree.c	/^static int testRtreeCell(Rtree *pRtree, RtreeCursor *pCursor){$/;"	f	file:
testRtreeEntry	.\rtree.c	/^static int testRtreeEntry(Rtree *pRtree, RtreeCursor *pCursor){$/;"	f	file:
test_control	.\sqlite3ext.h	/^  int (*test_control)(int, ...);$/;"	m	struct:sqlite3_api_routines
testcase	.\fts3Int.h	61;"	d
testcase	.\sqliteInt.h	219;"	d
testcase	.\sqliteInt.h	221;"	d
thread_cleanup	.\sqlite3ext.h	/^  void  (*thread_cleanup)(void);$/;"	m	struct:sqlite3_api_routines
threadid	.\os_unix.c	286;"	d	file:
threadid	.\os_unix.c	288;"	d	file:
timeDiff	.\shell.c	/^static double timeDiff(FILETIME *pStart, FILETIME *pEnd){$/;"	f	file:
timeDiff	.\shell.c	/^static double timeDiff(struct timeval *pStart, struct timeval *pEnd){$/;"	f	file:
timeFunc	.\date.c	/^static void timeFunc($/;"	f	file:
tkCREATE	.\complete.c	45;"	d	file:
tkEND	.\complete.c	48;"	d	file:
tkEXPLAIN	.\complete.c	44;"	d	file:
tkOTHER	.\complete.c	42;"	d	file:
tkSEMI	.\complete.c	40;"	d	file:
tkTEMP	.\complete.c	46;"	d	file:
tkTRIGGER	.\complete.c	47;"	d	file:
tkWS	.\complete.c	41;"	d	file:
tmask	.\insert.c	1058;"	d	file:
tnum	.\sqliteInt.h	/^  int tnum;            \/* Root BTree node for this table (see note above) *\/$/;"	m	struct:Table
tnum	.\sqliteInt.h	/^  int tnum;        \/* Page containing root of this index in database file *\/$/;"	m	struct:Index
token	.\vdbe.h	/^  void *token;                  \/* id that may be used to recursive triggers *\/$/;"	m	struct:SubProgram
token	.\vdbeInt.h	/^  void *token;            \/* Copy of SubProgram.token *\/$/;"	m	struct:VdbeFrame
tooBig	.\sqliteInt.h	/^  u8   tooBig;         \/* Becomes true if string size exceeds limits *\/$/;"	m	struct:StrAccum
totalAlloc	.\mem5.c	/^  u64 totalAlloc;     \/* Total of all malloc calls - includes internal frag *\/$/;"	m	struct:Mem5Global	file:
totalExcess	.\mem5.c	/^  u64 totalExcess;    \/* Total internal fragmentation *\/$/;"	m	struct:Mem5Global	file:
totalFinalize	.\func.c	/^static void totalFinalize(sqlite3_context *context){$/;"	f	file:
total_changes	.\func.c	/^static void total_changes($/;"	f	file:
total_changes	.\sqlite3ext.h	/^  int  (*total_changes)(sqlite3*);$/;"	m	struct:sqlite3_api_routines
tr_tm	.\sqliteInt.h	/^  u8 tr_tm;               \/* One of TRIGGER_BEFORE, TRIGGER_AFTER *\/$/;"	m	struct:Trigger
trace	.\mutex_unix.c	/^  int trace;                 \/* True to trace changes *\/$/;"	m	struct:sqlite3_mutex	file:
trace	.\mutex_w32.c	/^  int trace;                 \/* True to trace changes *\/$/;"	m	struct:sqlite3_mutex	file:
trace	.\sqlite3ext.h	/^  void * (*trace)(sqlite3*,void(*xTrace)(void*,const char*),void*);$/;"	m	struct:sqlite3_api_routines
trace	.\vdbeInt.h	/^  FILE *trace;            \/* Write an execution trace here, if not NULL *\/$/;"	m	struct:Vdbe
transCntrChng	.\os_unix.c	/^  unsigned char transCntrChng;   \/* True if the transaction counter changed *\/$/;"	m	struct:unixFile	file:
transferJoinMarkings	.\where.c	/^static void transferJoinMarkings(Expr *pDerived, Expr *pBase){$/;"	f	file:
transferParseError	.\trigger.c	/^static void transferParseError(Parse *pTo, Parse *pFrom){$/;"	f	file:
transfer_bindings	.\sqlite3ext.h	/^  int  (*transfer_bindings)(sqlite3_stmt*,sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines
trigHash	.\sqliteInt.h	/^  Hash trigHash;       \/* All triggers indexed by name *\/$/;"	m	struct:Schema
triggerStepAllocate	.\trigger.c	/^static TriggerStep *triggerStepAllocate($/;"	f	file:
trimFunc	.\func.c	/^static void trimFunc($/;"	f	file:
type	.\parse.c	/^struct AttachKey { int type;  Token key; };$/;"	m	struct:AttachKey	file:
type	.\printf.c	/^  etByte type;             \/* Conversion paradigm *\/$/;"	m	struct:et_info	file:
type	.\sqliteInt.h	/^  u8 type;              \/* One of the SQLITE_COLL_... values below *\/$/;"	m	struct:CollSeq
type	.\vdbeInt.h	/^  u8  type;           \/* One of SQLITE_NULL, SQLITE_TEXT, SQLITE_INTEGER, etc *\/$/;"	m	struct:Mem
typeofFunc	.\func.c	/^static void typeofFunc($/;"	f	file:
tz	.\date.c	/^  int tz;            \/* Timezone offset in minutes *\/$/;"	m	struct:DateTime	file:
u	.\bitvec.c	/^  } u;$/;"	m	struct:Bitvec	typeref:union:Bitvec::__anon1	file:
u	.\mem3.c	/^  } u;$/;"	m	struct:Mem3Block	typeref:union:Mem3Block::__anon3	file:
u	.\sqliteInt.h	/^  } u;$/;"	m	struct:Expr	typeref:union:Expr::__anon11
u	.\sqliteInt.h	/^  } u;$/;"	m	struct:IndexSample	typeref:union:IndexSample::__anon10
u	.\sqliteInt.h	/^  } u;$/;"	m	struct:Walker	typeref:union:Walker::__anon17
u	.\sqliteInt.h	/^  } u;$/;"	m	struct:WhereLevel	typeref:union:WhereLevel::__anon14
u	.\sqliteInt.h	/^  } u;$/;"	m	struct:WherePlan	typeref:union:WherePlan::__anon13
u	.\vdbeInt.h	/^  } u;$/;"	m	struct:Mem	typeref:union:Mem::__anon19
u	.\where.c	/^  } u;$/;"	m	struct:WhereTerm	typeref:union:WhereTerm::__anon20	file:
u1	.\sqliteInt.h	/^  } u1;$/;"	m	struct:sqlite3	typeref:union:sqlite3::__anon9
u16	.\sqliteInt.h	/^typedef UINT16_TYPE u16;           \/* 2-byte unsigned integer *\/$/;"	t
u32	.\fts3Int.h	/^typedef unsigned int u32;         \/* 4-byte unsigned integer *\/$/;"	t
u32	.\rtree.c	/^typedef unsigned int u32;$/;"	t	file:
u32	.\sqliteInt.h	/^typedef UINT32_TYPE u32;           \/* 4-byte unsigned integer *\/$/;"	t
u64	.\fts3Int.h	/^typedef sqlite3_uint64 u64;       \/* 8-byte unsigned integer *\/$/;"	t
u64	.\sqliteInt.h	/^typedef sqlite_uint64 u64;         \/* 8-byte unsigned integer *\/$/;"	t
u8	.\fts3Int.h	/^typedef unsigned char u8;         \/* 1-byte (or larger) unsigned integer *\/$/;"	t
u8	.\rtree.c	/^typedef unsigned char u8;$/;"	t	file:
u8	.\sqliteInt.h	/^typedef UINT8_TYPE u8;             \/* 1-byte unsigned integer *\/$/;"	t
u8	.\tclsqlite.c	/^  typedef unsigned char u8;$/;"	t	file:
ucUtf8	.\os_os2.c	/^static UconvObject ucUtf8 = NULL; \/* convert between UTF-8 and UCS-2 *\/$/;"	v	file:
uclCp	.\os_os2.c	/^static UconvObject uclCp = NULL;  \/* convert between local codepage and UCS-2 *\/$/;"	v	file:
uint32	.\tclsqlite.c	3082;"	d	file:
unLockFlag	.\os_unix.c	/^  unsigned char unLockFlag;         \/* 1 = unlock, 0 = lock *\/$/;"	m	struct:ByteRangeLockPB2	file:
unicodeToMbcs	.\os_win.c	/^static char *unicodeToMbcs(const WCHAR *zWideFilename){$/;"	f	file:
unicodeToUtf8	.\os_win.c	/^static char *unicodeToUtf8(const WCHAR *zWideFilename){$/;"	f	file:
unixAccess	.\os_unix.c	/^static int unixAccess($/;"	f	file:
unixCheckReservedLock	.\os_unix.c	/^static int unixCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
unixClose	.\os_unix.c	/^static int unixClose(sqlite3_file *id){$/;"	f	file:
unixCurrentTime	.\os_unix.c	/^static int unixCurrentTime(sqlite3_vfs *NotUsed, double *prNow){$/;"	f	file:
unixCurrentTimeInt64	.\os_unix.c	/^static int unixCurrentTimeInt64(sqlite3_vfs *NotUsed, sqlite3_int64 *piNow){$/;"	f	file:
unixDelete	.\os_unix.c	/^static int unixDelete($/;"	f	file:
unixDeviceCharacteristics	.\os_unix.c	/^static int unixDeviceCharacteristics(sqlite3_file *NotUsed){$/;"	f	file:
unixDlClose	.\os_unix.c	/^static void unixDlClose(sqlite3_vfs *NotUsed, void *pHandle){$/;"	f	file:
unixDlClose	.\os_unix.c	4881;"	d	file:
unixDlError	.\os_unix.c	/^static void unixDlError(sqlite3_vfs *NotUsed, int nBuf, char *zBufOut){$/;"	f	file:
unixDlError	.\os_unix.c	4879;"	d	file:
unixDlOpen	.\os_unix.c	/^static void *unixDlOpen(sqlite3_vfs *NotUsed, const char *zFilename){$/;"	f	file:
unixDlOpen	.\os_unix.c	4878;"	d	file:
unixDlSym	.\os_unix.c	/^static void (*unixDlSym(sqlite3_vfs *NotUsed, void *p, const char*zSym))(void){$/;"	f	file:
unixDlSym	.\os_unix.c	4880;"	d	file:
unixEnterMutex	.\os_unix.c	/^static void unixEnterMutex(void){$/;"	f	file:
unixFile	.\os_unix.c	/^struct unixFile {$/;"	s	file:
unixFile	.\os_unix.c	/^typedef struct unixFile unixFile;$/;"	t	typeref:struct:unixFile	file:
unixFileControl	.\os_unix.c	/^static int unixFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f	file:
unixFileId	.\os_unix.c	/^struct unixFileId {$/;"	s	file:
unixFileSize	.\os_unix.c	/^static int unixFileSize(sqlite3_file *id, i64 *pSize){$/;"	f	file:
unixFullPathname	.\os_unix.c	/^static int unixFullPathname($/;"	f	file:
unixGetLastError	.\os_unix.c	/^static int unixGetLastError(sqlite3_vfs *NotUsed, int NotUsed2, char *NotUsed3){$/;"	f	file:
unixGetTempname	.\os_unix.c	/^static int unixGetTempname(int nBuf, char *zBuf){$/;"	f	file:
unixInodeInfo	.\os_unix.c	/^struct unixInodeInfo {$/;"	s	file:
unixInodeInfo	.\os_unix.c	/^typedef struct unixInodeInfo unixInodeInfo;   \/* An i-node *\/$/;"	t	typeref:struct:unixInodeInfo	file:
unixLeaveMutex	.\os_unix.c	/^static void unixLeaveMutex(void){$/;"	f	file:
unixLock	.\os_unix.c	/^static int unixLock(sqlite3_file *id, int eFileLock){$/;"	f	file:
unixMutexHeld	.\os_unix.c	/^static int unixMutexHeld(void) {$/;"	f	file:
unixOpen	.\os_unix.c	/^static int unixOpen($/;"	f	file:
unixOpenSharedMemory	.\os_unix.c	/^static int unixOpenSharedMemory(unixFile *pDbFd){$/;"	f	file:
unixRandomness	.\os_unix.c	/^static int unixRandomness(sqlite3_vfs *NotUsed, int nBuf, char *zBuf){$/;"	f	file:
unixRead	.\os_unix.c	/^static int unixRead($/;"	f	file:
unixSectorSize	.\os_unix.c	/^static int unixSectorSize(sqlite3_file *NotUsed){$/;"	f	file:
unixShm	.\os_unix.c	/^struct unixShm {$/;"	s	file:
unixShm	.\os_unix.c	/^typedef struct unixShm unixShm;               \/* Connection shared memory *\/$/;"	t	typeref:struct:unixShm	file:
unixShmBarrier	.\os_unix.c	/^static void unixShmBarrier($/;"	f	file:
unixShmBarrier	.\os_unix.c	3762;"	d	file:
unixShmLock	.\os_unix.c	/^static int unixShmLock($/;"	f	file:
unixShmLock	.\os_unix.c	3761;"	d	file:
unixShmMap	.\os_unix.c	/^static int unixShmMap($/;"	f	file:
unixShmMap	.\os_unix.c	3760;"	d	file:
unixShmNode	.\os_unix.c	/^struct unixShmNode {$/;"	s	file:
unixShmNode	.\os_unix.c	/^typedef struct unixShmNode unixShmNode;       \/* Shared memory instance *\/$/;"	t	typeref:struct:unixShmNode	file:
unixShmPurge	.\os_unix.c	/^static void unixShmPurge(unixFile *pFd){$/;"	f	file:
unixShmSystemLock	.\os_unix.c	/^static int unixShmSystemLock($/;"	f	file:
unixShmUnmap	.\os_unix.c	/^static int unixShmUnmap($/;"	f	file:
unixShmUnmap	.\os_unix.c	3763;"	d	file:
unixSleep	.\os_unix.c	/^static int unixSleep(sqlite3_vfs *NotUsed, int microseconds){$/;"	f	file:
unixSync	.\os_unix.c	/^static int unixSync(sqlite3_file *id, int flags){$/;"	f	file:
unixTempFileDir	.\os_unix.c	/^static const char *unixTempFileDir(void){$/;"	f	file:
unixTruncate	.\os_unix.c	/^static int unixTruncate(sqlite3_file *id, i64 nByte){$/;"	f	file:
unixUnlock	.\os_unix.c	/^static int unixUnlock(sqlite3_file *id, int eFileLock){$/;"	f	file:
unixWrite	.\os_unix.c	/^static int unixWrite($/;"	f	file:
unlikely	.\sqliteInt.h	290;"	d
unlikely	.\sqliteInt.h	293;"	d
unlockBtreeIfUnused	.\btree.c	/^static void unlockBtreeIfUnused(BtShared *pBt){$/;"	f	file:
unlockBtreeMutex	.\btmutex.c	/^static void unlockBtreeMutex(Btree *p){$/;"	f	file:
unlockReadLock	.\os_os2.c	/^static int unlockReadLock( os2File *id ){$/;"	f	file:
unlockReadLock	.\os_win.c	/^static int unlockReadLock(winFile *pFile){$/;"	f	file:
untestedTerms	.\sqliteInt.h	/^  u8 untestedTerms;    \/* Not all WHERE terms resolved by outer loop *\/$/;"	m	struct:WhereInfo
unused	.\wal.c	/^  u32 unused;                     \/* Unused (padding) field *\/$/;"	m	struct:WalIndexHdr	file:
updateAccumulator	.\select.c	/^static void updateAccumulator(Parse *pParse, AggInfo *pAggInfo){$/;"	f	file:
updateMapping	.\rtree.c	/^static int updateMapping($/;"	f	file:
updateMaxBlobsize	.\vdbe.c	/^static void updateMaxBlobsize(Mem *p){$/;"	f	file:
updateVirtualTable	.\update.c	/^static void updateVirtualTable($/;"	f	file:
update_hook	.\sqlite3ext.h	/^  void * (*update_hook)(sqlite3*,void(*)(void*,int ,char const*,char const*,sqlite_int64),void*);$/;"	m	struct:sqlite3_api_routines
upperFunc	.\func.c	/^static void upperFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
usable	.\sqlite3.h	/^     unsigned char usable;     \/* True if this constraint is usable *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint
usableSize	.\btreeInt.h	/^  u32 usableSize;       \/* Number of usable bytes on each page *\/$/;"	m	struct:BtShared
usage	.\shell.c	/^static void usage(int showDetail){$/;"	f	file:
useEvalObjv	.\tclsqlite.c	/^  int useEvalObjv;      \/* True if it is safe to use Tcl_EvalObjv *\/$/;"	m	struct:SqlFunc	file:
useJournal	.\pager.c	/^  u8 useJournal;              \/* Use a rollback journal on this file *\/$/;"	m	struct:Pager	file:
useMalloc	.\sqliteInt.h	/^  u8   useMalloc;      \/* 0: none,  1: sqlite3DbMalloc,  2: sqlite3_malloc *\/$/;"	m	struct:StrAccum
useRandomRowid	.\vdbeInt.h	/^  Bool useRandomRowid;  \/* Generate new record numbers semi-randomly *\/$/;"	m	struct:VdbeCursor
useSortingIdx	.\sqliteInt.h	/^  u8 useSortingIdx;       \/* In direct mode, reference the sorting index rather$/;"	m	struct:AggInfo
used	.\where.c	/^  Bitmask used;      \/* Bitmask of cursors used by this plan *\/$/;"	m	struct:WhereCost	file:
usedAsColumnCache	.\expr.c	/^static int usedAsColumnCache(Parse *pParse, int iFrom, int iTo){$/;"	f	file:
user_data	.\sqlite3ext.h	/^  void * (*user_data)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines
usesStmtJournal	.\vdbeInt.h	/^  u8 usesStmtJournal;     \/* True if uses a statement journal *\/$/;"	m	struct:Vdbe
utf8ToMbcs	.\os_win.c	/^static char *utf8ToMbcs(const char *zFilename){$/;"	f	file:
utf8ToUnicode	.\os_win.c	/^static WCHAR *utf8ToUnicode(const char *zFilename){$/;"	f	file:
v	.\rowset.c	/^  i64 v;                        \/* ROWID value for this entry *\/$/;"	m	struct:RowSetEntry	file:
v	.\vdbeInt.h	/^  Vdbe *v;                \/* VM this frame belongs to *\/$/;"	m	struct:VdbeFrame
v	.\vdbeaux.c	/^  Vdbe *v;                   \/* Vdbe to iterate through the opcodes of *\/$/;"	m	struct:VdbeOpIter	file:
vacuumFinalize	.\vacuum.c	/^static int vacuumFinalize(sqlite3 *db, sqlite3_stmt *pStmt, char **pzErrMsg){$/;"	f	file:
valid	.\shell.c	/^  int valid;        \/* Is there legit data in here? *\/$/;"	m	struct:previous_mode_data	file:
validHMS	.\date.c	/^  char validHMS;     \/* True (1) if h,m,s are valid *\/$/;"	m	struct:DateTime	file:
validJD	.\date.c	/^  char validJD;      \/* True (1) if iJD is valid *\/$/;"	m	struct:DateTime	file:
validNKey	.\btreeInt.h	/^  u8 validNKey;             \/* True if info.nKey is valid *\/$/;"	m	struct:BtCursor
validTZ	.\date.c	/^  char validTZ;      \/* True (1) if tz is valid *\/$/;"	m	struct:DateTime	file:
validYMD	.\date.c	/^  char validYMD;     \/* True (1) if Y,M,D are valid *\/$/;"	m	struct:DateTime	file:
value	.\parse.c	/^  struct {int value; int mask;} yy215;$/;"	m	struct:__anon6::__anon7	file:
valueFromExpr	.\where.c	/^static int valueFromExpr($/;"	f	file:
value_blob	.\sqlite3ext.h	/^  const void * (*value_blob)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines
value_bytes	.\sqlite3ext.h	/^  int  (*value_bytes)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines
value_bytes16	.\sqlite3ext.h	/^  int  (*value_bytes16)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines
value_double	.\sqlite3ext.h	/^  double  (*value_double)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines
value_int	.\sqlite3ext.h	/^  int  (*value_int)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines
value_int64	.\sqlite3ext.h	/^  sqlite_int64  (*value_int64)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines
value_numeric_type	.\sqlite3ext.h	/^  int  (*value_numeric_type)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines
value_text	.\sqlite3ext.h	/^  const unsigned char * (*value_text)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines
value_text16	.\sqlite3ext.h	/^  const void * (*value_text16)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines
value_text16be	.\sqlite3ext.h	/^  const void * (*value_text16be)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines
value_text16le	.\sqlite3ext.h	/^  const void * (*value_text16le)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines
value_type	.\sqlite3ext.h	/^  int  (*value_type)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines
vdbeCommit	.\vdbeaux.c	/^static int vdbeCommit(sqlite3 *db, Vdbe *p){$/;"	f	file:
vdbeFreeOpArray	.\vdbeaux.c	/^static void vdbeFreeOpArray(sqlite3 *db, Op *aOp, int nOp){$/;"	f	file:
vdbeSafety	.\vdbeapi.c	/^static int vdbeSafety(Vdbe *p){$/;"	f	file:
vdbeSafetyNotNull	.\vdbeapi.c	/^static int vdbeSafetyNotNull(Vdbe *p){$/;"	f	file:
vdbeUnbind	.\vdbeapi.c	/^static int vdbeUnbind(Vdbe *p, int i){$/;"	f	file:
versionFunc	.\func.c	/^static void versionFunc($/;"	f	file:
vfsFlags	.\pager.c	/^  u32 vfsFlags;               \/* Flags for sqlite3_vfs.xOpen() *\/$/;"	m	struct:Pager	file:
vfsList	.\os.c	/^static sqlite3_vfs * SQLITE_WSD vfsList = 0;$/;"	v	file:
vfsList	.\os.c	241;"	d	file:
vfsUnlink	.\os.c	/^static void vfsUnlink(sqlite3_vfs *pVfs){$/;"	f	file:
vfs_find	.\sqlite3ext.h	/^  sqlite3_vfs *(*vfs_find)(const char*);$/;"	m	struct:sqlite3_api_routines
vfs_register	.\sqlite3ext.h	/^  int (*vfs_register)(sqlite3_vfs*,int);$/;"	m	struct:sqlite3_api_routines
vfs_unregister	.\sqlite3ext.h	/^  int (*vfs_unregister)(sqlite3_vfs*);$/;"	m	struct:sqlite3_api_routines
vmask	.\where.c	/^  Bitmask vmask;           \/* Bitmask identifying virtual table cursors *\/$/;"	m	struct:WhereClause	file:
vmprintf	.\sqlite3ext.h	/^  char *(*vmprintf)(const char*,va_list);$/;"	m	struct:sqlite3_api_routines
vtabBestIndex	.\where.c	/^static int vtabBestIndex(Parse *pParse, Table *pTab, sqlite3_index_info *p){$/;"	f	file:
vtabCallConstructor	.\vtab.c	/^static int vtabCallConstructor($/;"	f	file:
vtabDisconnectAll	.\vtab.c	/^static VTable *vtabDisconnectAll(sqlite3 *db, Table *p){$/;"	f	file:
vxworksFileId	.\os_unix.c	/^struct vxworksFileId {$/;"	s	file:
vxworksFileList	.\os_unix.c	/^static struct vxworksFileId *vxworksFileList = 0;$/;"	v	typeref:struct:vxworksFileId	file:
vxworksFindFileId	.\os_unix.c	/^static struct vxworksFileId *vxworksFindFileId(const char *zAbsoluteName){$/;"	f	file:
vxworksReleaseFileId	.\os_unix.c	/^static void vxworksReleaseFileId(struct vxworksFileId *pId){$/;"	f	file:
vxworksSimplifyName	.\os_unix.c	/^static int vxworksSimplifyName(char *z, int n){$/;"	f	file:
walCheckpoint	.\wal.c	/^static int walCheckpoint($/;"	f	file:
walChecksumBytes	.\wal.c	/^static void walChecksumBytes($/;"	f	file:
walCkptInfo	.\wal.c	/^static volatile WalCkptInfo *walCkptInfo(Wal *pWal){$/;"	f	file:
walCleanupHash	.\wal.c	/^static void walCleanupHash(Wal *pWal){$/;"	f	file:
walDecodeFrame	.\wal.c	/^static int walDecodeFrame($/;"	f	file:
walEncodeFrame	.\wal.c	/^static void walEncodeFrame($/;"	f	file:
walFrameOffset	.\wal.c	402;"	d	file:
walFramePage	.\wal.c	/^static int walFramePage(u32 iFrame){$/;"	f	file:
walFramePgno	.\wal.c	/^static u32 walFramePgno(Wal *pWal, u32 iFrame){$/;"	f	file:
walHash	.\wal.c	/^static int walHash(u32 iPage){$/;"	f	file:
walHashGet	.\wal.c	/^static int walHashGet($/;"	f	file:
walIndexAppend	.\wal.c	/^static int walIndexAppend(Wal *pWal, u32 iFrame, u32 iPage){$/;"	f	file:
walIndexClose	.\wal.c	/^static void walIndexClose(Wal *pWal, int isDelete){$/;"	f	file:
walIndexHdr	.\wal.c	/^static volatile WalIndexHdr *walIndexHdr(Wal *pWal){$/;"	f	file:
walIndexPage	.\wal.c	/^static int walIndexPage(Wal *pWal, int iPage, volatile u32 **ppPage){$/;"	f	file:
walIndexReadHdr	.\wal.c	/^static int walIndexReadHdr(Wal *pWal, int *pChanged){$/;"	f	file:
walIndexRecover	.\wal.c	/^static int walIndexRecover(Wal *pWal){$/;"	f	file:
walIndexTryHdr	.\wal.c	/^static int walIndexTryHdr(Wal *pWal, int *pChanged){$/;"	f	file:
walIndexWriteHdr	.\wal.c	/^static void walIndexWriteHdr(Wal *pWal){$/;"	f	file:
walIteratorFree	.\wal.c	/^static void walIteratorFree(WalIterator *p){$/;"	f	file:
walIteratorInit	.\wal.c	/^static int walIteratorInit(Wal *pWal, WalIterator **pp){$/;"	f	file:
walIteratorNext	.\wal.c	/^static int walIteratorNext($/;"	f	file:
walLockExclusive	.\wal.c	/^static int walLockExclusive(Wal *pWal, int lockIdx, int n){$/;"	f	file:
walLockName	.\wal.c	/^static const char *walLockName(int lockIdx){$/;"	f	file:
walLockShared	.\wal.c	/^static int walLockShared(Wal *pWal, int lockIdx){$/;"	f	file:
walMerge	.\wal.c	/^static void walMerge($/;"	f	file:
walMergesort	.\wal.c	/^static void walMergesort($/;"	f	file:
walNextHash	.\wal.c	/^static int walNextHash(int iPriorHash){$/;"	f	file:
walRestartLog	.\wal.c	/^static int walRestartLog(Wal *pWal){$/;"	f	file:
walTryBeginRead	.\wal.c	/^static int walTryBeginRead(Wal *pWal, int *pChanged, int useWal, int cnt){$/;"	f	file:
walUnlockExclusive	.\wal.c	/^static void walUnlockExclusive(Wal *pWal, int lockIdx, int n){$/;"	f	file:
walUnlockShared	.\wal.c	/^static void walUnlockShared(Wal *pWal, int lockIdx){$/;"	f	file:
wantToLock	.\btreeInt.h	/^  int wantToLock;    \/* Number of nested calls to sqlite3BtreeEnter() *\/$/;"	m	struct:Btree
wc	.\where.c	/^  WhereClause wc;          \/* Decomposition into subterms *\/$/;"	m	struct:WhereOrInfo	file:
wc	.\where.c	/^  WhereClause wc;          \/* The subexpression broken out *\/$/;"	m	struct:WhereAndInfo	file:
wctrlFlags	.\sqliteInt.h	/^  u16 wctrlFlags;      \/* Flags originally passed to sqlite3WhereBegin() *\/$/;"	m	struct:WhereInfo
whereAndInfoDelete	.\where.c	/^static void whereAndInfoDelete(sqlite3 *db, WhereAndInfo *p){$/;"	f	file:
whereClauseClear	.\where.c	/^static void whereClauseClear(WhereClause *pWC){$/;"	f	file:
whereClauseInit	.\where.c	/^static void whereClauseInit($/;"	f	file:
whereClauseInsert	.\where.c	/^static int whereClauseInsert(WhereClause *pWC, Expr *p, u8 wtFlags){$/;"	f	file:
whereForeignKeys	.\alter.c	/^static char *whereForeignKeys(Parse *pParse, Table *pTab){$/;"	f	file:
whereInfoFree	.\where.c	/^static void whereInfoFree(sqlite3 *db, WhereInfo *pWInfo){$/;"	f	file:
whereOrInfoDelete	.\where.c	/^static void whereOrInfoDelete(sqlite3 *db, WhereOrInfo *p){$/;"	f	file:
whereOrName	.\alter.c	/^static char *whereOrName(sqlite3 *db, char *zWhere, char *zConstant){$/;"	f	file:
whereRangeRegion	.\where.c	/^static int whereRangeRegion($/;"	f	file:
whereRangeScanEst	.\where.c	/^static int whereRangeScanEst($/;"	f	file:
whereSplit	.\where.c	/^static void whereSplit(WhereClause *pWC, Expr *pExpr, int op){$/;"	f	file:
whereTempTriggers	.\alter.c	/^static char *whereTempTriggers(Parse *pParse, Table *pTab){$/;"	f	file:
winAccess	.\os_win.c	/^static int winAccess($/;"	f	file:
winCheckReservedLock	.\os_win.c	/^static int winCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
winClose	.\os_win.c	/^static int winClose(sqlite3_file *id){$/;"	f	file:
winCurrentTime	.\os_win.c	/^int winCurrentTime(sqlite3_vfs *pVfs, double *prNow){$/;"	f
winCurrentTimeInt64	.\os_win.c	/^static int winCurrentTimeInt64(sqlite3_vfs *pVfs, sqlite3_int64 *piNow){$/;"	f	file:
winDelete	.\os_win.c	/^static int winDelete($/;"	f	file:
winDeviceCharacteristics	.\os_win.c	/^static int winDeviceCharacteristics(sqlite3_file *id){$/;"	f	file:
winDlClose	.\os_win.c	/^void winDlClose(sqlite3_vfs *pVfs, void *pHandle){$/;"	f
winDlClose	.\os_win.c	2498;"	d	file:
winDlError	.\os_win.c	/^static void winDlError(sqlite3_vfs *pVfs, int nBuf, char *zBufOut){$/;"	f	file:
winDlError	.\os_win.c	2496;"	d	file:
winDlOpen	.\os_win.c	/^static void *winDlOpen(sqlite3_vfs *pVfs, const char *zFilename){$/;"	f	file:
winDlOpen	.\os_win.c	2495;"	d	file:
winDlSym	.\os_win.c	/^void (*winDlSym(sqlite3_vfs *pVfs, void *pHandle, const char *zSymbol))(void){$/;"	f
winDlSym	.\os_win.c	2497;"	d	file:
winFile	.\os_win.c	/^struct winFile {$/;"	s	file:
winFile	.\os_win.c	/^typedef struct winFile winFile;$/;"	t	typeref:struct:winFile	file:
winFileControl	.\os_win.c	/^static int winFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f	file:
winFileSize	.\os_win.c	/^static int winFileSize(sqlite3_file *id, sqlite3_int64 *pSize){$/;"	f	file:
winFullPathname	.\os_win.c	/^static int winFullPathname($/;"	f	file:
winGetLastError	.\os_win.c	/^static int winGetLastError(sqlite3_vfs *pVfs, int nBuf, char *zBuf){$/;"	f	file:
winIoMethod	.\os_win.c	/^static const sqlite3_io_methods winIoMethod = {$/;"	v	file:
winLock	.\os_win.c	/^static int winLock(sqlite3_file *id, int locktype){$/;"	f	file:
winMutexAlloc	.\mutex_w32.c	/^static sqlite3_mutex *winMutexAlloc(int iType){$/;"	f	file:
winMutexEnd	.\mutex_w32.c	/^static int winMutexEnd(void){ $/;"	f	file:
winMutexEnter	.\mutex_w32.c	/^static void winMutexEnter(sqlite3_mutex *p){$/;"	f	file:
winMutexFree	.\mutex_w32.c	/^static void winMutexFree(sqlite3_mutex *p){$/;"	f	file:
winMutexHeld	.\mutex_w32.c	/^static int winMutexHeld(sqlite3_mutex *p){$/;"	f	file:
winMutexInit	.\mutex_w32.c	/^static int winMutexInit(void){ $/;"	f	file:
winMutexLeave	.\mutex_w32.c	/^static void winMutexLeave(sqlite3_mutex *p){$/;"	f	file:
winMutexNotheld	.\mutex_w32.c	/^static int winMutexNotheld(sqlite3_mutex *p){$/;"	f	file:
winMutexNotheld2	.\mutex_w32.c	/^static int winMutexNotheld2(sqlite3_mutex *p, DWORD tid){$/;"	f	file:
winMutexTry	.\mutex_w32.c	/^static int winMutexTry(sqlite3_mutex *p){$/;"	f	file:
winMutex_isInit	.\mutex_w32.c	/^static int winMutex_isInit = 0;$/;"	v	file:
winMutex_lock	.\mutex_w32.c	/^static long winMutex_lock = 0;$/;"	v	file:
winMutex_staticMutexes	.\mutex_w32.c	/^static sqlite3_mutex winMutex_staticMutexes[6] = {$/;"	v	file:
winOpen	.\os_win.c	/^static int winOpen($/;"	f	file:
winOpenSharedMemory	.\os_win.c	/^static int winOpenSharedMemory(winFile *pDbFd){$/;"	f	file:
winRandomness	.\os_win.c	/^static int winRandomness(sqlite3_vfs *pVfs, int nBuf, char *zBuf){$/;"	f	file:
winRead	.\os_win.c	/^static int winRead($/;"	f	file:
winSectorSize	.\os_win.c	/^static int winSectorSize(sqlite3_file *id){$/;"	f	file:
winShm	.\os_win.c	/^struct winShm {$/;"	s	file:
winShm	.\os_win.c	/^typedef struct winShm winShm;           \/* A connection to shared-memory *\/$/;"	t	typeref:struct:winShm	file:
winShmBarrier	.\os_win.c	/^static void winShmBarrier($/;"	f	file:
winShmBarrier	.\os_win.c	1811;"	d	file:
winShmEnterMutex	.\os_win.c	/^static void winShmEnterMutex(void){$/;"	f	file:
winShmLeaveMutex	.\os_win.c	/^static void winShmLeaveMutex(void){$/;"	f	file:
winShmLock	.\os_win.c	/^static int winShmLock($/;"	f	file:
winShmLock	.\os_win.c	1810;"	d	file:
winShmMap	.\os_win.c	/^static int winShmMap($/;"	f	file:
winShmMap	.\os_win.c	1809;"	d	file:
winShmMutexHeld	.\os_win.c	/^static int winShmMutexHeld(void) {$/;"	f	file:
winShmNode	.\os_win.c	/^struct winShmNode {$/;"	s	file:
winShmNode	.\os_win.c	/^typedef struct winShmNode winShmNode;   \/* A region of shared-memory *\/$/;"	t	typeref:struct:winShmNode	file:
winShmNodeList	.\os_win.c	/^static winShmNode *winShmNodeList = 0;$/;"	v	file:
winShmPurge	.\os_win.c	/^static void winShmPurge(sqlite3_vfs *pVfs, int deleteFlag){$/;"	f	file:
winShmSystemLock	.\os_win.c	/^static int winShmSystemLock($/;"	f	file:
winShmUnmap	.\os_win.c	/^static int winShmUnmap($/;"	f	file:
winShmUnmap	.\os_win.c	1812;"	d	file:
winSleep	.\os_win.c	/^static int winSleep(sqlite3_vfs *pVfs, int microsec){$/;"	f	file:
winSync	.\os_win.c	/^static int winSync(sqlite3_file *id, int flags){$/;"	f	file:
winTruncate	.\os_win.c	/^static int winTruncate(sqlite3_file *id, sqlite3_int64 nByte){$/;"	f	file:
winUnlock	.\os_win.c	/^static int winUnlock(sqlite3_file *id, int locktype){$/;"	f	file:
winWrite	.\os_win.c	/^static int winWrite($/;"	f	file:
winceCreateLock	.\os_win.c	/^static BOOL winceCreateLock(const char *zFilename, winFile *pFile){$/;"	f	file:
winceDestroyLock	.\os_win.c	/^static void winceDestroyLock(winFile *pFile){$/;"	f	file:
winceLock	.\os_win.c	/^typedef struct winceLock {$/;"	s	file:
winceLock	.\os_win.c	/^} winceLock;$/;"	t	typeref:struct:winceLock	file:
winceLockFile	.\os_win.c	/^static BOOL winceLockFile($/;"	f	file:
winceLockFileEx	.\os_win.c	/^static BOOL winceLockFileEx($/;"	f	file:
winceMutexAcquire	.\os_win.c	/^static void winceMutexAcquire(HANDLE h){$/;"	f	file:
winceMutexRelease	.\os_win.c	353;"	d	file:
winceUnlockFile	.\os_win.c	/^static BOOL winceUnlockFile($/;"	f	file:
wrFlag	.\btreeInt.h	/^  u8 wrFlag;                \/* True if writable *\/$/;"	m	struct:BtCursor
writableSchema	.\shell.c	/^  int writableSchema;    \/* True if PRAGMA writable_schema=ON *\/$/;"	m	struct:callback_data	file:
write32bits	.\pager.c	/^static int write32bits(sqlite3_file *fd, i64 offset, u32 val){$/;"	f	file:
writeCoord	.\rtree.c	/^static int writeCoord(u8 *p, RtreeCoord *pCoord){$/;"	f	file:
writeInt16	.\rtree.c	/^static int writeInt16(u8 *p, int i){$/;"	f	file:
writeInt64	.\rtree.c	/^static int writeInt64(u8 *p, i64 i){$/;"	f	file:
writeJournalHdr	.\pager.c	/^static int writeJournalHdr(Pager *pPager){$/;"	f	file:
writeLock	.\wal.c	/^  u8 writeLock;              \/* True if in a write transaction *\/$/;"	m	struct:Wal	file:
writeMask	.\sqliteInt.h	/^  u32 writeMask;       \/* Start a write transaction on these databases *\/$/;"	m	struct:Parse
writeMasterJournal	.\pager.c	/^static int writeMasterJournal(Pager *pPager, const char *zMaster){$/;"	f	file:
writeVdbeCnt	.\sqliteInt.h	/^  int writeVdbeCnt;             \/* Number of active VDBEs that are writing *\/$/;"	m	struct:sqlite3
write_history	.\shell.c	48;"	d	file:
wsFlags	.\sqliteInt.h	/^  u32 wsFlags;                   \/* WHERE_* flags that describe the strategy *\/$/;"	m	struct:WherePlan
wsdAutoext	.\loadext.c	501;"	d	file:
wsdAutoext	.\loadext.c	504;"	d	file:
wsdAutoextInit	.\loadext.c	499;"	d	file:
wsdAutoextInit	.\loadext.c	503;"	d	file:
wsdHooks	.\fault.c	49;"	d	file:
wsdHooks	.\fault.c	52;"	d	file:
wsdHooksInit	.\fault.c	47;"	d	file:
wsdHooksInit	.\fault.c	51;"	d	file:
wsdPrng	.\random.c	58;"	d	file:
wsdStat	.\status.c	37;"	d	file:
wsdStat	.\status.c	40;"	d	file:
wsdStatInit	.\status.c	36;"	d	file:
wsdStatInit	.\status.c	39;"	d	file:
wtFlags	.\where.c	/^  u8 wtFlags;             \/* TERM_xxx bit flags.  See below *\/$/;"	m	struct:WhereTerm	file:
x	.\sqliteInt.h	/^  } x;$/;"	m	struct:Expr	typeref:union:Expr::__anon12
xAccess	.\sqlite3.h	/^  int (*xAccess)(sqlite3_vfs*, const char *zName, int flags, int *pResOut);$/;"	m	struct:sqlite3_vfs
xAuth	.\sqliteInt.h	/^  int (*xAuth)(void*,int,const char*,const char*,const char*,const char*);$/;"	m	struct:sqlite3
xBacktrace	.\mem2.c	/^  void (*xBacktrace)(int, int, void **);$/;"	m	struct:__anon2	file:
xBegin	.\sqlite3.h	/^  int (*xBegin)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xBenignBegin	.\fault.c	/^  void (*xBenignBegin)(void);$/;"	m	struct:BenignMallocHooks	file:
xBenignEnd	.\fault.c	/^  void (*xBenignEnd)(void);$/;"	m	struct:BenignMallocHooks	file:
xBestIndex	.\sqlite3.h	/^  int (*xBestIndex)(sqlite3_vtab *pVTab, sqlite3_index_info*);$/;"	m	struct:sqlite3_module
xBusyHandler	.\pager.c	/^  int (*xBusyHandler)(void*); \/* Function to call when busy *\/$/;"	m	struct:Pager	file:
xCachesize	.\sqlite3.h	/^  void (*xCachesize)(sqlite3_pcache*, int nCachesize);$/;"	m	struct:sqlite3_pcache_methods
xCheckReservedLock	.\sqlite3.h	/^  int (*xCheckReservedLock)(sqlite3_file*, int *pResOut);$/;"	m	struct:sqlite3_io_methods
xClose	.\fts3_tokenizer.h	/^  int (*xClose)(sqlite3_tokenizer_cursor *pCursor);$/;"	m	struct:sqlite3_tokenizer_module
xClose	.\sqlite3.h	/^  int (*xClose)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods
xClose	.\sqlite3.h	/^  int (*xClose)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module
xCmp	.\sqliteInt.h	/^  int (*xCmp)(void*,int, const void*, int, const void*);$/;"	m	struct:CollSeq
xCodec	.\pager.c	/^  void *(*xCodec)(void*,void*,Pgno,int); \/* Routine for en\/decoding data *\/$/;"	m	struct:Pager	file:
xCodecFree	.\pager.c	/^  void (*xCodecFree)(void*);             \/* Destructor for the codec *\/$/;"	m	struct:Pager	file:
xCodecSizeChng	.\pager.c	/^  void (*xCodecSizeChng)(void*,int,int); \/* Notify of page size changes *\/$/;"	m	struct:Pager	file:
xCollNeeded	.\sqliteInt.h	/^  void(*xCollNeeded)(void*,sqlite3*,int eTextRep,const char*);$/;"	m	struct:sqlite3
xCollNeeded16	.\sqliteInt.h	/^  void(*xCollNeeded16)(void*,sqlite3*,int eTextRep,const void*);$/;"	m	struct:sqlite3
xColumn	.\sqlite3.h	/^  int (*xColumn)(sqlite3_vtab_cursor*, sqlite3_context*, int);$/;"	m	struct:sqlite3_module
xCommit	.\sqlite3.h	/^  int (*xCommit)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xCommitCallback	.\sqliteInt.h	/^  int (*xCommitCallback)(void*);    \/* Invoked at every commit. *\/$/;"	m	struct:sqlite3
xConnect	.\sqlite3.h	/^  int (*xConnect)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module
xCreate	.\fts3_tokenizer.h	/^  int (*xCreate)($/;"	m	struct:sqlite3_tokenizer_module
xCreate	.\sqlite3.h	/^  int (*xCreate)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module
xCreate	.\sqlite3.h	/^  sqlite3_pcache *(*xCreate)(int szPage, int bPurgeable);$/;"	m	struct:sqlite3_pcache_methods
xCurrentTime	.\sqlite3.h	/^  int (*xCurrentTime)(sqlite3_vfs*, double*);$/;"	m	struct:sqlite3_vfs
xCurrentTimeInt64	.\sqlite3.h	/^  int (*xCurrentTimeInt64)(sqlite3_vfs*, sqlite3_int64*);$/;"	m	struct:sqlite3_vfs
xDel	.\sqliteInt.h	/^  void (*xDel)(void*);  \/* Destructor for pUser *\/$/;"	m	struct:CollSeq
xDel	.\vdbeInt.h	/^  void (*xDel)(void *);  \/* If not null, call this function to delete Mem.z *\/$/;"	m	struct:Mem
xDelete	.\sqlite3.h	/^  int (*xDelete)(sqlite3_vfs*, const char *zName, int syncDir);$/;"	m	struct:sqlite3_vfs
xDelete	.\vdbeInt.h	/^    void (*xDelete)(void *);      \/* Destructor for the aux data *\/$/;"	m	struct:VdbeFunc::AuxData
xDestroy	.\fts3_tokenizer.h	/^  int (*xDestroy)(sqlite3_tokenizer *pTokenizer);$/;"	m	struct:sqlite3_tokenizer_module
xDestroy	.\sqlite3.h	/^  int (*xDestroy)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xDestroy	.\sqlite3.h	/^  void (*xDestroy)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods
xDestroy	.\sqliteInt.h	/^  void (*xDestroy)(void *);            \/* Module destructor function *\/$/;"	m	struct:Module
xDeviceCharacteristics	.\sqlite3.h	/^  int (*xDeviceCharacteristics)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods
xDisconnect	.\sqlite3.h	/^  int (*xDisconnect)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xDlClose	.\sqlite3.h	/^  void (*xDlClose)(sqlite3_vfs*, void*);$/;"	m	struct:sqlite3_vfs
xDlError	.\sqlite3.h	/^  void (*xDlError)(sqlite3_vfs*, int nByte, char *zErrMsg);$/;"	m	struct:sqlite3_vfs
xDlOpen	.\sqlite3.h	/^  void *(*xDlOpen)(sqlite3_vfs*, const char *zFilename);$/;"	m	struct:sqlite3_vfs
xEof	.\sqlite3.h	/^  int (*xEof)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module
xExprCallback	.\sqliteInt.h	/^  int (*xExprCallback)(Walker*, Expr*);     \/* Callback for expressions *\/$/;"	m	struct:Walker
xFetch	.\sqlite3.h	/^  void *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);$/;"	m	struct:sqlite3_pcache_methods
xFileControl	.\sqlite3.h	/^  int (*xFileControl)(sqlite3_file*, int op, void *pArg);$/;"	m	struct:sqlite3_io_methods
xFileSize	.\sqlite3.h	/^  int (*xFileSize)(sqlite3_file*, sqlite3_int64 *pSize);$/;"	m	struct:sqlite3_io_methods
xFilter	.\sqlite3.h	/^  int (*xFilter)(sqlite3_vtab_cursor*, int idxNum, const char *idxStr,$/;"	m	struct:sqlite3_module
xFinalize	.\sqliteInt.h	/^  void (*xFinalize)(sqlite3_context*);                \/* Aggregate finalizer *\/$/;"	m	struct:FuncDef
xFindFunction	.\sqlite3.h	/^  int (*xFindFunction)(sqlite3_vtab *pVtab, int nArg, const char *zName,$/;"	m	struct:sqlite3_module
xFree	.\sqlite3.h	/^  void (*xFree)(void*);          \/* Free a prior allocation *\/$/;"	m	struct:sqlite3_mem_methods
xFreeSchema	.\btreeInt.h	/^  void (*xFreeSchema)(void*);  \/* Destructor for BtShared.pSchema *\/$/;"	m	struct:BtShared
xFullPathname	.\sqlite3.h	/^  int (*xFullPathname)(sqlite3_vfs*, const char *zName, int nOut, char *zOut);$/;"	m	struct:sqlite3_vfs
xFunc	.\sqliteInt.h	/^  int (*xFunc)(void *,int);  \/* The busy callback *\/$/;"	m	struct:BusyHandler
xFunc	.\sqliteInt.h	/^  void (*xFunc)(sqlite3_context*,int,sqlite3_value**); \/* Regular function *\/$/;"	m	struct:FuncDef
xGetLastError	.\sqlite3.h	/^  int (*xGetLastError)(sqlite3_vfs*, int, char *);$/;"	m	struct:sqlite3_vfs
xInit	.\sqlite3.h	/^  int (*xInit)(void*);           \/* Initialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods
xInit	.\sqlite3.h	/^  int (*xInit)(void*);$/;"	m	struct:sqlite3_pcache_methods
xLock	.\sqlite3.h	/^  int (*xLock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods
xLog	.\sqliteInt.h	/^  void (*xLog)(void*,int,const char*); \/* Function for logging *\/$/;"	m	struct:Sqlite3Config
xMalloc	.\sqlite3.h	/^  void *(*xMalloc)(int);         \/* Memory allocation function *\/$/;"	m	struct:sqlite3_mem_methods
xMutexAlloc	.\sqlite3.h	/^  sqlite3_mutex *(*xMutexAlloc)(int);$/;"	m	struct:sqlite3_mutex_methods
xMutexEnd	.\sqlite3.h	/^  int (*xMutexEnd)(void);$/;"	m	struct:sqlite3_mutex_methods
xMutexEnter	.\sqlite3.h	/^  void (*xMutexEnter)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xMutexFree	.\sqlite3.h	/^  void (*xMutexFree)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xMutexHeld	.\sqlite3.h	/^  int (*xMutexHeld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xMutexInit	.\sqlite3.h	/^  int (*xMutexInit)(void);$/;"	m	struct:sqlite3_mutex_methods
xMutexLeave	.\sqlite3.h	/^  void (*xMutexLeave)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xMutexNotheld	.\sqlite3.h	/^  int (*xMutexNotheld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xMutexTry	.\sqlite3.h	/^  int (*xMutexTry)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xNext	.\fts3_tokenizer.h	/^  int (*xNext)($/;"	m	struct:sqlite3_tokenizer_module
xNext	.\sqlite3.h	/^  int (*xNext)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module
xOpen	.\fts3_tokenizer.h	/^  int (*xOpen)($/;"	m	struct:sqlite3_tokenizer_module
xOpen	.\sqlite3.h	/^  int (*xOpen)(sqlite3_vfs*, const char *zName, sqlite3_file*,$/;"	m	struct:sqlite3_vfs
xOpen	.\sqlite3.h	/^  int (*xOpen)(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor);$/;"	m	struct:sqlite3_module
xPagecount	.\sqlite3.h	/^  int (*xPagecount)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods
xProfile	.\sqliteInt.h	/^  void (*xProfile)(void*,const char*,u64);  \/* Profiling function *\/$/;"	m	struct:sqlite3
xProgress	.\sqliteInt.h	/^  int (*xProgress)(void *);     \/* The progress callback *\/$/;"	m	struct:sqlite3
xRandomness	.\sqlite3.h	/^  int (*xRandomness)(sqlite3_vfs*, int nByte, char *zOut);$/;"	m	struct:sqlite3_vfs
xRead	.\sqlite3.h	/^  int (*xRead)(sqlite3_file*, void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods
xRealloc	.\sqlite3.h	/^  void *(*xRealloc)(void*,int);  \/* Resize an allocation *\/$/;"	m	struct:sqlite3_mem_methods
xReiniter	.\pager.c	/^  void (*xReiniter)(DbPage*); \/* Call this routine when reloading pages *\/$/;"	m	struct:Pager	file:
xRekey	.\sqlite3.h	/^  void (*xRekey)(sqlite3_pcache*, void*, unsigned oldKey, unsigned newKey);$/;"	m	struct:sqlite3_pcache_methods
xRename	.\sqlite3.h	/^  int (*xRename)(sqlite3_vtab *pVtab, const char *zNew);$/;"	m	struct:sqlite3_module
xRollback	.\sqlite3.h	/^  int (*xRollback)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xRollbackCallback	.\sqliteInt.h	/^  void (*xRollbackCallback)(void*); \/* Invoked at every commit. *\/$/;"	m	struct:sqlite3
xRoundup	.\sqlite3.h	/^  int (*xRoundup)(int);          \/* Round up request size to allocation size *\/$/;"	m	struct:sqlite3_mem_methods
xRowid	.\sqlite3.h	/^  int (*xRowid)(sqlite3_vtab_cursor*, sqlite3_int64 *pRowid);$/;"	m	struct:sqlite3_module
xSectorSize	.\sqlite3.h	/^  int (*xSectorSize)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods
xSelectCallback	.\sqliteInt.h	/^  int (*xSelectCallback)(Walker*,Select*);  \/* Callback for SELECTs *\/$/;"	m	struct:Walker
xShmBarrier	.\sqlite3.h	/^  void (*xShmBarrier)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods
xShmLock	.\sqlite3.h	/^  int (*xShmLock)(sqlite3_file*, int offset, int n, int flags);$/;"	m	struct:sqlite3_io_methods
xShmMap	.\sqlite3.h	/^  int (*xShmMap)(sqlite3_file*, int iPg, int pgsz, int, void volatile**);$/;"	m	struct:sqlite3_io_methods
xShmUnmap	.\sqlite3.h	/^  int (*xShmUnmap)(sqlite3_file*, int deleteFlag);$/;"	m	struct:sqlite3_io_methods
xShutdown	.\sqlite3.h	/^  void (*xShutdown)(void*);      \/* Deinitialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods
xShutdown	.\sqlite3.h	/^  void (*xShutdown)(void*);$/;"	m	struct:sqlite3_pcache_methods
xSize	.\sqlite3.h	/^  int (*xSize)(void*);           \/* Return the size of an allocation *\/$/;"	m	struct:sqlite3_mem_methods
xSleep	.\sqlite3.h	/^  int (*xSleep)(sqlite3_vfs*, int microseconds);$/;"	m	struct:sqlite3_vfs
xStep	.\sqliteInt.h	/^  void (*xStep)(sqlite3_context*,int,sqlite3_value**); \/* Aggregate step *\/$/;"	m	struct:FuncDef
xStress	.\pcache.c	/^  int (*xStress)(void*,PgHdr*);       \/* Call to try make a page clean *\/$/;"	m	struct:PCache	file:
xSync	.\sqlite3.h	/^  int (*xSync)(sqlite3_file*, int flags);$/;"	m	struct:sqlite3_io_methods
xSync	.\sqlite3.h	/^  int (*xSync)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xTrace	.\sqliteInt.h	/^  void (*xTrace)(void*,const char*);        \/* Trace function *\/$/;"	m	struct:sqlite3
xTruncate	.\sqlite3.h	/^  int (*xTruncate)(sqlite3_file*, sqlite3_int64 size);$/;"	m	struct:sqlite3_io_methods
xTruncate	.\sqlite3.h	/^  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);$/;"	m	struct:sqlite3_pcache_methods
xUnlock	.\sqlite3.h	/^  int (*xUnlock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods
xUnlockNotify	.\sqliteInt.h	/^  void (*xUnlockNotify)(void **, int);  \/* Unlock notify callback *\/$/;"	m	struct:sqlite3
xUnpin	.\sqlite3.h	/^  void (*xUnpin)(sqlite3_pcache*, void*, int discard);$/;"	m	struct:sqlite3_pcache_methods
xUpdate	.\sqlite3.h	/^  int (*xUpdate)(sqlite3_vtab *, int, sqlite3_value **, sqlite3_int64 *);$/;"	m	struct:sqlite3_module
xUpdateCallback	.\sqliteInt.h	/^  void (*xUpdateCallback)(void*,int, const char*,const char*,sqlite_int64);$/;"	m	struct:sqlite3
xWalCallback	.\sqliteInt.h	/^  int (*xWalCallback)(void *, sqlite3 *, const char *, int);$/;"	m	struct:sqlite3
xWrite	.\sqlite3.h	/^  int (*xWrite)(sqlite3_file*, const void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods
xferCompatibleCollation	.\insert.c	/^static int xferCompatibleCollation(const char *z1, const char *z2){$/;"	f	file:
xferCompatibleIndex	.\insert.c	/^static int xferCompatibleIndex(Index *pDest, Index *pSrc){$/;"	f	file:
xferOptimization	.\insert.c	/^static int xferOptimization($/;"	f	file:
xthreadsafe	.\sqlite3ext.h	/^  int (*xthreadsafe)(void);$/;"	m	struct:sqlite3_api_routines
yColCache	.\sqliteInt.h	/^  struct yColCache {$/;"	s	struct:Parse
ynVar	.\sqliteInt.h	/^typedef i16 ynVar;$/;"	t
ynVar	.\sqliteInt.h	/^typedef int ynVar;$/;"	t
yy0	.\parse.c	/^  sqlite3ParserTOKENTYPE yy0;$/;"	m	union:__anon6	file:
yy118	.\parse.c	/^  ExprSpan yy118;$/;"	m	union:__anon6	file:
yy203	.\parse.c	/^  TriggerStep* yy203;$/;"	m	union:__anon6	file:
yy210	.\parse.c	/^  u8 yy210;$/;"	m	union:__anon6	file:
yy215	.\parse.c	/^  struct {int value; int mask;} yy215;$/;"	m	union:__anon6	typeref:struct:__anon6::__anon7	file:
yy259	.\parse.c	/^  SrcList* yy259;$/;"	m	union:__anon6	file:
yy292	.\parse.c	/^  struct LimitVal yy292;$/;"	m	union:__anon6	typeref:struct:__anon6::LimitVal	file:
yy314	.\parse.c	/^  Expr* yy314;$/;"	m	union:__anon6	file:
yy322	.\parse.c	/^  ExprList* yy322;$/;"	m	union:__anon6	file:
yy342	.\parse.c	/^  struct LikeOp yy342;$/;"	m	union:__anon6	typeref:struct:__anon6::LikeOp	file:
yy384	.\parse.c	/^  IdList* yy384;$/;"	m	union:__anon6	file:
yy387	.\parse.c	/^  Select* yy387;$/;"	m	union:__anon6	file:
yy4	.\parse.c	/^  int yy4;$/;"	m	union:__anon6	file:
yy90	.\parse.c	/^  struct TrigEvent yy90;$/;"	m	union:__anon6	typeref:struct:__anon6::TrigEvent	file:
yyFallback	.\parse.c	/^static const YYCODETYPE yyFallback[] = {$/;"	v	file:
yyGrowStack	.\parse.c	/^static void yyGrowStack(yyParser *p){$/;"	f	file:
yyParser	.\parse.c	/^struct yyParser {$/;"	s	file:
yyParser	.\parse.c	/^typedef struct yyParser yyParser;$/;"	t	typeref:struct:yyParser	file:
yyRuleInfo	.\parse.c	/^} yyRuleInfo[] = {$/;"	v	typeref:struct:__anon8	file:
yyRuleName	.\parse.c	/^static const char *const yyRuleName[] = {$/;"	v	file:
yyStackEntry	.\parse.c	/^struct yyStackEntry {$/;"	s	file:
yyStackEntry	.\parse.c	/^typedef struct yyStackEntry yyStackEntry;$/;"	t	typeref:struct:yyStackEntry	file:
yyStackOverflow	.\parse.c	/^static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){$/;"	f	file:
yyTokenName	.\parse.c	/^static const char *const yyTokenName[] = { $/;"	v	file:
yyTraceFILE	.\parse.c	/^static FILE *yyTraceFILE = 0;$/;"	v	file:
yyTracePrompt	.\parse.c	/^static char *yyTracePrompt = 0;$/;"	v	file:
yy_accept	.\parse.c	/^static void yy_accept($/;"	f	file:
yy_action	.\parse.c	/^static const YYACTIONTYPE yy_action[] = {$/;"	v	file:
yy_default	.\parse.c	/^static const YYACTIONTYPE yy_default[] = {$/;"	v	file:
yy_destructor	.\parse.c	/^static void yy_destructor($/;"	f	file:
yy_find_reduce_action	.\parse.c	/^static int yy_find_reduce_action($/;"	f	file:
yy_find_shift_action	.\parse.c	/^static int yy_find_shift_action($/;"	f	file:
yy_lookahead	.\parse.c	/^static const YYCODETYPE yy_lookahead[] = {$/;"	v	file:
yy_parse_failed	.\parse.c	/^static void yy_parse_failed($/;"	f	file:
yy_pop_parser_stack	.\parse.c	/^static int yy_pop_parser_stack(yyParser *pParser){$/;"	f	file:
yy_reduce	.\parse.c	/^static void yy_reduce($/;"	f	file:
yy_reduce_ofst	.\parse.c	/^static const short yy_reduce_ofst[] = {$/;"	v	file:
yy_shift	.\parse.c	/^static void yy_shift($/;"	f	file:
yy_shift_ofst	.\parse.c	/^static const short yy_shift_ofst[] = {$/;"	v	file:
yy_syntax_error	.\parse.c	/^static void yy_syntax_error($/;"	f	file:
yyerrcnt	.\parse.c	/^  int yyerrcnt;                 \/* Shifts left before out of the error *\/$/;"	m	struct:yyParser	file:
yyidx	.\parse.c	/^  int yyidx;                    \/* Index of top element in stack *\/$/;"	m	struct:yyParser	file:
yyidxMax	.\parse.c	/^  int yyidxMax;                 \/* Maximum value of yyidx *\/$/;"	m	struct:yyParser	file:
yyinit	.\parse.c	/^  int yyinit;$/;"	m	union:__anon6	file:
yystack	.\parse.c	/^  yyStackEntry *yystack;        \/* The parser's stack *\/$/;"	m	struct:yyParser	file:
yystksz	.\parse.c	/^  int yystksz;                  \/* Current side of the stack *\/$/;"	m	struct:yyParser	file:
yytestcase	.\parse.c	239;"	d	file:
yytestcase	.\parse.c	26;"	d	file:
yyzerominor	.\parse.c	/^static const YYMINORTYPE yyzerominor = { 0 };$/;"	v	file:
z	.\fts3Int.h	/^    char *z;                 \/* Text of the token *\/$/;"	m	struct:Fts3Phrase::PhraseToken
z	.\fts3_snippet.c	/^  char *z;                        \/* Pointer to buffer containing string *\/$/;"	m	struct:StrBuffer	file:
z	.\sqliteInt.h	/^    char *z;        \/* Value if eType is SQLITE_TEXT or SQLITE_BLOB *\/$/;"	m	union:IndexSample::__anon10
z	.\sqliteInt.h	/^  const char *z;     \/* Text of the token.  Not NULL-terminated! *\/$/;"	m	struct:Token
z	.\vdbe.h	/^    char *z;               \/* Pointer to data for string (char array) types *\/$/;"	m	union:VdbeOp::__anon18
z	.\vdbeInt.h	/^  char *z;            \/* String or BLOB value *\/$/;"	m	struct:Mem
zAlias	.\sqliteInt.h	/^    char *zAlias;     \/* The "B" part of a "A AS B" phrase.  zName is the "A" *\/$/;"	m	struct:SrcList::SrcList_item
zAuth	.\tclsqlite.c	/^  char *zAuth;               \/* The authorization callback routine *\/$/;"	m	struct:SqliteDb	file:
zAuthContext	.\sqliteInt.h	/^  const char *zAuthContext;   \/* Put saved Parse.zAuthContext here *\/$/;"	m	struct:AuthContext
zAuthContext	.\sqliteInt.h	/^  const char *zAuthContext; \/* The 6th parameter to db->xAuth callbacks *\/$/;"	m	struct:Parse
zBase	.\sqliteInt.h	/^  char *zBase;         \/* A base allocation.  Not from malloc. *\/$/;"	m	struct:StrAccum
zBuf	.\journal.c	/^  char *zBuf;                     \/* Space to buffer journal writes *\/$/;"	m	struct:JournalFile	file:
zBuffer	.\fts3_icu.c	/^  char *zBuffer;$/;"	m	struct:IcuCursor	file:
zBusy	.\tclsqlite.c	/^  char *zBusy;               \/* The busy callback routine *\/$/;"	m	struct:SqliteDb	file:
zCanonicalName	.\os_unix.c	/^  char *zCanonicalName;         \/* Canonical filename *\/$/;"	m	struct:vxworksFileId	file:
zChunk	.\memjournal.c	/^  u8 zChunk[JOURNAL_CHUNKSIZE];   \/* Content of this chunk *\/$/;"	m	struct:FileChunk	file:
zCol	.\sqliteInt.h	/^    char *zCol;        \/* Name of column in zTo.  If 0 use PRIMARY KEY *\/$/;"	m	struct:FKey::sColMap
zColAff	.\sqliteInt.h	/^  char *zColAff;       \/* String defining the affinity of each column *\/$/;"	m	struct:Table
zColAff	.\sqliteInt.h	/^  char *zColAff;   \/* String defining the affinity of each column *\/$/;"	m	struct:Index
zColl	.\sqliteInt.h	/^  char *zColl;     \/* Collating sequence.  If NULL, use the default *\/$/;"	m	struct:Column
zComment	.\vdbe.h	/^  char *zComment;          \/* Comment to improve readability *\/$/;"	m	struct:VdbeOp
zCommit	.\tclsqlite.c	/^  char *zCommit;             \/* The commit hook callback routine *\/$/;"	m	struct:SqliteDb	file:
zData	.\rtree.c	/^  u8 *zData;$/;"	m	struct:RtreeNode	file:
zDatabase	.\analyze.c	/^  const char *zDatabase;$/;"	m	struct:analysisInfo	file:
zDatabase	.\sqliteInt.h	/^    char *zDatabase;  \/* Name of database holding this table *\/$/;"	m	struct:SrcList::SrcList_item
zDb	.\fts3Int.h	/^  const char *zDb;                \/* logical database name *\/$/;"	m	struct:Fts3Table
zDb	.\rtree.c	/^  char *zDb;                  \/* Name of database containing r-tree table *\/$/;"	m	struct:Rtree	file:
zDb	.\sqliteInt.h	/^  const char *zDb;    \/* Make sure all objects are contained in this database *\/$/;"	m	struct:DbFixer
zDbFilename	.\shell.c	/^  const char *zDbFilename;    \/* name of the database file *\/$/;"	m	struct:callback_data	file:
zDeleteOnClose	.\os_win.c	/^  WCHAR *zDeleteOnClose;  \/* Name of file to delete when closing *\/$/;"	m	struct:winFile	file:
zDestTable	.\shell.c	/^  char *zDestTable;      \/* Name of destination table when MODE_Insert *\/$/;"	m	struct:callback_data	file:
zDflt	.\sqliteInt.h	/^  char *zDflt;     \/* Original text of the default value *\/$/;"	m	struct:Column
zEnd	.\sqliteInt.h	/^  const char *zEnd;     \/* One character past the end of input text *\/$/;"	m	struct:ExprSpan
zErrMsg	.\sqlite3.h	/^  char *zErrMsg;                  \/* Error message from sqlite3_mprintf() *\/$/;"	m	struct:sqlite3_vtab
zErrMsg	.\sqliteInt.h	/^  char *zErrMsg;                \/* Most recent error message (UTF-8 encoded) *\/$/;"	m	struct:sqlite3
zErrMsg	.\sqliteInt.h	/^  char *zErrMsg;       \/* An error message *\/$/;"	m	struct:Parse
zErrMsg	.\table.c	/^  char *zErrMsg;     \/* Error message text, if an error occurs *\/$/;"	m	struct:TabResult	file:
zErrMsg	.\vdbeInt.h	/^  char *zErrMsg;          \/* Error message written here *\/$/;"	m	struct:Vdbe
zErrMsg16	.\sqliteInt.h	/^  char *zErrMsg16;              \/* Most recent error message (UTF-16 encoded) *\/$/;"	m	struct:sqlite3
zFilename	.\os_unix.c	/^  char *zFilename;           \/* Name of the mmapped file *\/$/;"	m	struct:unixShmNode	file:
zFilename	.\os_win.c	/^  char *zFilename;           \/* Name of the file *\/$/;"	m	struct:winShmNode	file:
zFilename	.\pager.c	/^  char *zFilename;            \/* Name of the database file *\/$/;"	m	struct:Pager	file:
zHelp	.\shell.c	/^static char zHelp[] =$/;"	v	file:
zIndex	.\sqliteInt.h	/^    char *zIndex;     \/* Identifier from "INDEXED BY <zIndex>" clause *\/$/;"	m	struct:SrcList::SrcList_item
zInput	.\fts3_porter.c	/^  const char *zInput;          \/* input we are tokenizing *\/$/;"	m	struct:porter_tokenizer_cursor	file:
zJournal	.\journal.c	/^  const char *zJournal;           \/* Name of the journal file *\/$/;"	m	struct:JournalFile	file:
zJournal	.\pager.c	/^  char *zJournal;             \/* Name of the journal file *\/$/;"	m	struct:Pager	file:
zLocale	.\fts3_icu.c	/^  char *zLocale;$/;"	m	struct:IcuTokenizer	file:
zMagicHeader	.\btree.c	/^static const char zMagicHeader[] = SQLITE_FILE_HEADER;$/;"	v	file:
zMainloop	.\tclsqlite.c	/^static char zMainloop[] = $/;"	v	file:
zMainloop	.\tclsqlite.c	/^static char zMainloop[] =$/;"	v	file:
zMalloc	.\fts3_write.c	/^  char *zMalloc;                  \/* Malloc'd space (possibly) used for zTerm *\/$/;"	m	struct:SegmentNode	file:
zMalloc	.\fts3_write.c	/^  char *zMalloc;                  \/* Malloc'd space (possibly) used for zTerm *\/$/;"	m	struct:SegmentWriter	file:
zMalloc	.\vdbeInt.h	/^  char *zMalloc;      \/* Dynamic buffer allocated by sqlite3_malloc() *\/$/;"	m	struct:Mem
zName	.\build.c	/^  const char *zName;   \/* Name of the table *\/$/;"	m	struct:TableLock	file:
zName	.\fts3Int.h	/^  const char *zName;              \/* virtual table name *\/$/;"	m	struct:Fts3Table
zName	.\rtree.c	/^  char *zName;                \/* Name of r-tree table *\/ $/;"	m	struct:Rtree	file:
zName	.\sqlite3.h	/^  const char *zName;       \/* Name of this virtual file system *\/$/;"	m	struct:sqlite3_vfs
zName	.\sqliteInt.h	/^    char *zName;           \/* Token associated with this expression *\/$/;"	m	struct:ExprList::ExprList_item
zName	.\sqliteInt.h	/^    char *zName;      \/* Name of the identifier *\/$/;"	m	struct:IdList::IdList_item
zName	.\sqliteInt.h	/^    char *zName;      \/* Name of the table *\/$/;"	m	struct:SrcList::SrcList_item
zName	.\sqliteInt.h	/^  char *zName;                        \/* Savepoint name (nul-terminated) *\/$/;"	m	struct:Savepoint
zName	.\sqliteInt.h	/^  char *zName;            \/* The name of the trigger                        *\/$/;"	m	struct:Trigger
zName	.\sqliteInt.h	/^  char *zName;          \/* Name of the collating sequence, UTF-8 encoded *\/$/;"	m	struct:CollSeq
zName	.\sqliteInt.h	/^  char *zName;         \/* Name of the table or view *\/$/;"	m	struct:Table
zName	.\sqliteInt.h	/^  char *zName;         \/* Name of this database *\/$/;"	m	struct:Db
zName	.\sqliteInt.h	/^  char *zName;         \/* SQL name of the function. *\/$/;"	m	struct:FuncDef
zName	.\sqliteInt.h	/^  char *zName;     \/* Name of this column *\/$/;"	m	struct:Column
zName	.\sqliteInt.h	/^  char *zName;     \/* Name of this index *\/$/;"	m	struct:Index
zName	.\sqliteInt.h	/^  const char *zName;                   \/* Name passed to create_module() *\/$/;"	m	struct:Module
zName	.\tclsqlite.c	/^  char *zName;          \/* Name of this function *\/$/;"	m	struct:SqlFunc	file:
zNull	.\tclsqlite.c	/^  char *zNull;               \/* Text to substitute for an SQL NULL value *\/$/;"	m	struct:SqliteDb	file:
zOptions	.\shell.c	/^static const char zOptions[] = $/;"	v	file:
zPath	.\os_unix.c	/^  const char *zPath;                  \/* Name of the file *\/$/;"	m	struct:unixFile	file:
zPath	.\os_win.c	/^  const char *zPath;      \/* Full pathname of this file *\/$/;"	m	struct:winFile	file:
zPool	.\mem5.c	/^  u8 *zPool;       \/* Memory available to be allocated *\/$/;"	m	struct:Mem5Global	file:
zProfile	.\tclsqlite.c	/^  char *zProfile;            \/* The profile callback routine *\/$/;"	m	struct:SqliteDb	file:
zProgress	.\tclsqlite.c	/^  char *zProgress;           \/* The progress callback routine *\/$/;"	m	struct:SqliteDb	file:
zScript	.\tclsqlite.c	/^  char *zScript;        \/* The script to be run *\/$/;"	m	struct:SqlCollate	file:
zSelectLeaves	.\fts3Int.h	/^  char *zSelectLeaves;$/;"	m	struct:Fts3Table
zShellStatic	.\shell.c	/^static const char *zShellStatic = 0;$/;"	v	file:
zSpan	.\sqliteInt.h	/^    char *zSpan;           \/* Original text of the expression *\/$/;"	m	struct:ExprList::ExprList_item
zSql	.\tclsqlite.c	/^  const char *zSql;               \/* Remaining SQL to execute *\/$/;"	m	struct:DbEvalContext	file:
zSql	.\tclsqlite.c	/^  const char *zSql;        \/* Text of the SQL statement *\/$/;"	m	struct:SqlPreparedStmt	file:
zSql	.\vdbeInt.h	/^  char *zSql;             \/* Text of the SQL statement that generated this *\/$/;"	m	struct:Vdbe
zStart	.\sqliteInt.h	/^  const char *zStart;   \/* First character of input text *\/$/;"	m	struct:ExprSpan
zTail	.\sqliteInt.h	/^  const char *zTail;   \/* All SQL text past the last semicolon parsed *\/$/;"	m	struct:Parse
zTerm	.\fts3Int.h	/^  const char *zTerm;$/;"	m	struct:Fts3SegFilter
zTerm	.\fts3_write.c	/^  char *zTerm;                    \/* Pointer to current term *\/$/;"	m	struct:Fts3SegReader	file:
zTerm	.\fts3_write.c	/^  char *zTerm;                    \/* Pointer to previous term buffer *\/$/;"	m	struct:SegmentNode	file:
zTerm	.\fts3_write.c	/^  char *zTerm;                    \/* Pointer to previous term buffer *\/$/;"	m	struct:SegmentWriter	file:
zText	.\sqliteInt.h	/^  char *zText;         \/* The string collected so far *\/$/;"	m	struct:StrAccum
zTimerHelp	.\shell.c	/^static char zTimerHelp[] =$/;"	v	file:
zTitle	.\mem2.c	/^  char zTitle[100];  \/* The title text *\/$/;"	m	struct:__anon2	file:
zTo	.\sqliteInt.h	/^  char *zTo;        \/* Name of table that the key points to (aka: Parent) *\/$/;"	m	struct:FKey
zToken	.\fts3_porter.c	/^  char *zToken;                \/* storage for current token *\/$/;"	m	struct:porter_tokenizer_cursor	file:
zToken	.\sqliteInt.h	/^    char *zToken;          \/* Token value. Zero terminated and dequoted *\/$/;"	m	union:Expr::__anon11
zTrace	.\tclsqlite.c	/^  char *zTrace;              \/* The trace callback routine *\/$/;"	m	struct:SqliteDb	file:
zType	.\sqliteInt.h	/^  char *zType;     \/* Data type for this column *\/$/;"	m	struct:Column
zType	.\sqliteInt.h	/^  const char *zType;  \/* Type of the container - used for error messages *\/$/;"	m	struct:DbFixer
zWal	.\pager.c	/^  char *zWal;                 \/* File name for write-ahead log *\/$/;"	m	struct:Pager	file:
zWalName	.\wal.c	/^  const char *zWalName;      \/* Name of WAL file *\/$/;"	m	struct:Wal	file:
zeroJournalHdr	.\pager.c	/^static int zeroJournalHdr(Pager *pPager, int doTruncate){$/;"	f	file:
zeroPage	.\btree.c	/^static void zeroPage(MemPage *pPage, int flags){$/;"	f	file:
zeroblobFunc	.\func.c	/^static void zeroblobFunc($/;"	f	file:
zeroed	.\vdbeInt.h	/^  Bool zeroed;          \/* True if zeroed out and ready for reuse *\/$/;"	m	struct:VdbeCursor
